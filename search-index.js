var searchIndex = {};
searchIndex['ksr'] = {"items":[],"paths":[]};
searchIndex['kickstarter'] = {"items":[[0,"","kickstarter","# The Real Kickstarter",null,null],[3,"Client","","Interfaces with a Kickstarter application running on a PostgreSQL database.",null,null],[12,"uri","","PostgreSQL connection URI.",0,null],[12,"schema","","Database schema name for kickstarter data.",0,null],[4,"Error","","The error type for Kickstarter operations.",null,null],[13,"InvalidData","","Provided data was invalid.",1,null],[13,"Config","","An error occurred with the provided configuration.",1,null],[13,"Database","","A database operation could not be completed.",1,null],[13,"IO","","An I/O operation could not be completed.",1,null],[0,"db","","",null,null],[5,"get_all_tables","kickstarter::db","",null,{"inputs":[],"output":{"name":"vec"}}],[0,"kickstarter","","",null,null],[0,"pledge","kickstarter::db::kickstarter","WARNING: This file is generated, derived from table kickstarter.pledge, DO NOT EDIT",null,null],[3,"Pledge","kickstarter::db::kickstarter::pledge","",null,null],[12,"project_id","","primary\nnot nullable \ndb data type: integer",2,null],[12,"user_id","","primary\nnot nullable \ndb data type: integer",2,null],[12,"card","","unique\nnot nullable \ndb data type: text",2,null],[12,"amount","","not nullable\ndb data type: double precision",2,null],[12,"date_created","","default: ('now'::text)::timestamp without time zone\nnot nullable \ndb data type: timestamp without time zone",2,null],[12,"user","","has one",2,null],[12,"project","","has one",2,null],[7,"user_id","","",null,null],[7,"project_id","","",null,null],[7,"amount","","",null,null],[7,"card","","",null,null],[7,"date_created","","",null,null],[11,"encode","","",2,{"inputs":[{"name":"pledge"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"pledge"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"pledge"}],"output":{"name":"pledge"}}],[11,"fmt","","",2,{"inputs":[{"name":"pledge"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_dao","","",2,{"inputs":[{"name":"pledge"},{"name":"dao"}],"output":{"name":"self"}}],[11,"to_dao","","",2,{"inputs":[{"name":"pledge"}],"output":{"name":"dao"}}],[11,"to_json","","",2,{"inputs":[{"name":"pledge"}],"output":{"name":"json"}}],[11,"table","","",2,{"inputs":[{"name":"pledge"}],"output":{"name":"table"}}],[0,"project","kickstarter::db::kickstarter","WARNING: This file is generated, derived from table kickstarter.project, DO NOT EDIT",null,null],[3,"Project","kickstarter::db::kickstarter::project","",null,null],[12,"project_id","","primary\ndefault: nextval('kickstarter.project_project_id_seq'::regclass)\nnot nullable \ndb data type: integer",3,null],[12,"name","","unique\nnot nullable \ndb data type: text",3,null],[12,"date_created","","default: ('now'::text)::timestamp without time zone\nnot nullable \ndb data type: timestamp without time zone",3,null],[12,"goal","","not nullable\ndb data type: double precision",3,null],[12,"pledge","","has many",3,null],[7,"project_id","","",null,null],[7,"name","","",null,null],[7,"goal","","",null,null],[7,"date_created","","",null,null],[11,"encode","","",3,{"inputs":[{"name":"project"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"project"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"project"}],"output":{"name":"project"}}],[11,"fmt","","",3,{"inputs":[{"name":"project"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_dao","","",3,{"inputs":[{"name":"project"},{"name":"dao"}],"output":{"name":"self"}}],[11,"to_dao","","",3,{"inputs":[{"name":"project"}],"output":{"name":"dao"}}],[11,"to_json","","",3,{"inputs":[{"name":"project"}],"output":{"name":"json"}}],[11,"table","","",3,{"inputs":[{"name":"project"}],"output":{"name":"table"}}],[0,"user","kickstarter::db::kickstarter","WARNING: This file is generated, derived from table kickstarter.user, DO NOT EDIT",null,null],[3,"User","kickstarter::db::kickstarter::user","",null,null],[12,"user_id","","primary\ndefault: nextval('kickstarter.user_user_id_seq'::regclass)\nnot nullable \ndb data type: integer",4,null],[12,"name","","unique\nnot nullable \ndb data type: text",4,null],[12,"date_created","","default: ('now'::text)::timestamp without time zone\nnot nullable \ndb data type: timestamp without time zone",4,null],[12,"pledge","","has many",4,null],[7,"user_id","","",null,null],[7,"name","","",null,null],[7,"date_created","","",null,null],[11,"encode","","",4,{"inputs":[{"name":"user"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"user"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"user"}],"output":{"name":"user"}}],[11,"fmt","","",4,{"inputs":[{"name":"user"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_dao","","",4,{"inputs":[{"name":"user"},{"name":"dao"}],"output":{"name":"self"}}],[11,"to_dao","","",4,{"inputs":[{"name":"user"}],"output":{"name":"dao"}}],[11,"to_json","","",4,{"inputs":[{"name":"user"}],"output":{"name":"json"}}],[11,"table","","",4,{"inputs":[{"name":"user"}],"output":{"name":"table"}}],[0,"schema","kickstarter::db","",null,null],[17,"kickstarter","kickstarter::db::schema","",null,null],[0,"table","kickstarter::db","",null,null],[17,"pledge","kickstarter::db::table","",null,null],[17,"project","","",null,null],[17,"user","","",null,null],[0,"column","kickstarter::db","",null,null],[17,"amount","kickstarter::db::column","",null,null],[17,"card","","",null,null],[17,"date_created","","",null,null],[17,"goal","","",null,null],[17,"name","","",null,null],[17,"project_id","","",null,null],[17,"user_id","","",null,null],[0,"pledge","kickstarter","Module for interacting with Kickstarter pledges.",null,null],[11,"create","kickstarter::db::kickstarter::pledge","Creates a new pledge for an existing project.",2,{"inputs":[{"name":"pledge"},{"name":"client"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"f64"}],"output":{"name":"result"}}],[0,"project","kickstarter","Module for interacting with Kickstarter projects.",null,null],[11,"create","kickstarter::db::kickstarter::project","Creates a new Kickstarter project with the provided goal amount in dollars.\nReturns the created project on success.",3,{"inputs":[{"name":"project"},{"name":"client"},{"name":"str"},{"name":"f64"}],"output":{"name":"result"}}],[11,"get_id","","Retrieve a project ID by name.",3,{"inputs":[{"name":"project"},{"name":"client"},{"name":"str"}],"output":{"name":"result"}}],[11,"list_all","","Returns a list of all projects on Kickstarter.",3,{"inputs":[{"name":"project"},{"name":"client"}],"output":{"name":"result"}}],[11,"list_backers","","Retrieves a list of all users that have backed a given project.\nReturns a map of User objects to their contributions,\nas well as the overall project goal amount.",3,{"inputs":[{"name":"project"},{"name":"client"},{"name":"str"}],"output":{"name":"result"}}],[0,"user","kickstarter","User implementation",null,null],[11,"upsert","kickstarter::db::kickstarter::user","Upserts a user and returns the resultant ID as a Value.",4,{"inputs":[{"name":"user"},{"name":"client"},{"name":"str"}],"output":{"name":"result"}}],[11,"list_pledges","","Retrieve a map of all pledges that a user has made to Kickstarter projects.\nReturns a map of project names to Pledge objects.",4,{"inputs":[{"name":"user"},{"name":"client"},{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"user"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"user"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"user"},{"name":"self"}],"output":{"name":"bool"}}],[0,"validate","kickstarter","Kickstarter data validations",null,null],[5,"currency","kickstarter::validate","Validates that the float is positive, and rounds it to two decimal places.",null,{"inputs":[{"name":"f64"}],"output":{"name":"result"}}],[5,"alphanumeric","","Validates that the string is alphanumeric and contains only underscores and dahes as special characters.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"numtext","","Validates that the string contains only digits.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"regex","","Validates that the string matches the provided regex.",null,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"error"}],"output":{"name":"result"}}],[5,"length","","Validates that the string length is between min and max, inclusive.",null,{"inputs":[{"name":"str"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[5,"luhn10","","Validates that a numerical string passes the Luhn-10 test.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"error","","Validation error module",null,null],[4,"Error","kickstarter::validate::error","The error type for validation operations.",null,null],[13,"NotAlphaNumeric","","The string should be alphanumeric and contain only underscores or dashes.",5,null],[13,"Length","","The string length was not within the provided bounds.",5,null],[13,"NotNumeric","","The string provided was not numeric.",5,null],[13,"NotLuhn10","","The string did not pass the Luhn-10 test.",5,null],[13,"InvalidAmount","","The pledged amount was not more than zero dollars.",5,null],[13,"CardExists","","The credit card has already been used to back the desired project.",5,null],[13,"ProjectDoesNotExist","","The project being searched for does not exist.",5,null],[6,"Result","","A type for results generated by validation functions, where the Err type is validate::Error.",null,null],[11,"eq","","",5,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"new","regex::re","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a dynamic regular expression with the given size limit.",6,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",6,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",6,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",6,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"as_str","","Returns the original string of this regex.",6,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"fmt","regex::backtrack","",7,{"inputs":[{"name":"backtrack"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"backmachine"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create new empty state for the backtracking engine.",8,{"inputs":[{"name":"backmachine"}],"output":{"name":"backmachine"}}],[11,"fmt","","",9,{"inputs":[{"name":"job"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"job"}],"output":{"name":"job"}}],[11,"exec","","Execute the backtracking matching engine.",7,null],[11,"should_exec","","Returns true iff the given regex and input can be executed by this\nengine with reasonable memory usage.",7,{"inputs":[{"name":"backtrack"},{"name":"program"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","regex::char","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"char"}],"output":{"name":"char"}}],[11,"fmt","","",10,{"inputs":[{"name":"char"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_none","","Returns true iff the character is absent.",10,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"len_utf8","","Returns the length of the character's UTF-8 encoding.",10,{"inputs":[{"name":"char"}],"output":{"name":"usize"}}],[11,"is_word_char","","Returns true iff the character is a word character.",10,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"as_char","","Converts the character to a real primitive `char`.",10,{"inputs":[{"name":"char"}],"output":{"name":"option"}}],[11,"from","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"char"}}],[11,"from","","",10,{"inputs":[{"name":"char"},{"name":"option"}],"output":{"name":"char"}}],[11,"eq","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","regex::compile","Creates a new compiler that limits the size of the regex program\nto the size given (in bytes).",11,{"inputs":[{"name":"compiler"},{"name":"usize"}],"output":{"name":"compiler"}}],[11,"compile","","Compiles the given regex AST into a tuple of a sequence of\ninstructions and a sequence of capture groups, optionally named.",11,{"inputs":[{"name":"compiler"},{"name":"expr"}],"output":{"name":"result"}}],[11,"fmt","regex::input","",12,{"inputs":[{"name":"inputat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"inputat"}],"output":{"name":"inputat"}}],[11,"is_beginning","","Returns true iff this position is at the beginning of the input.",12,{"inputs":[{"name":"inputat"}],"output":{"name":"bool"}}],[11,"char","","Returns the character at this position.",12,{"inputs":[{"name":"inputat"}],"output":{"name":"char"}}],[11,"len","","Returns the UTF-8 width of the character at this position.",12,{"inputs":[{"name":"inputat"}],"output":{"name":"usize"}}],[11,"pos","","Returns the byte offset of this position.",12,{"inputs":[{"name":"inputat"}],"output":{"name":"usize"}}],[11,"next_pos","","Returns the byte offset of the next position in the input.",12,{"inputs":[{"name":"inputat"}],"output":{"name":"usize"}}],[11,"fmt","","",13,{"inputs":[{"name":"charinput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a new character input reader for the given string.",13,{"inputs":[{"name":"charinput"},{"name":"str"}],"output":{"name":"charinput"}}],[11,"deref","","",13,{"inputs":[{"name":"charinput"}],"output":{"name":"str"}}],[11,"at","","",13,{"inputs":[{"name":"charinput"},{"name":"usize"}],"output":{"name":"inputat"}}],[11,"previous_at","","",13,{"inputs":[{"name":"charinput"},{"name":"usize"}],"output":{"name":"inputat"}}],[11,"prefix_at","","",13,{"inputs":[{"name":"charinput"},{"name":"prefix"},{"name":"inputat"}],"output":{"name":"option"}}],[11,"new","regex::pool","Create a new pool.",14,{"inputs":[{"name":"pool"},{"name":"box"}],"output":{"name":"pool"}}],[11,"get","","Request a resource from the pool.",14,{"inputs":[{"name":"pool"}],"output":{"name":"t"}}],[11,"put","","Add a resource to the pool.",14,null],[11,"fmt","","",14,{"inputs":[{"name":"pool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::prefix","",15,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"new","","Create a new prefix matching machine.",15,{"inputs":[{"name":"prefix"},{"name":"vec"}],"output":{"name":"prefix"}}],[11,"find","","Find the position of a prefix in `haystack` if it exists.",15,{"inputs":[{"name":"prefix"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_empty","","Returns true iff this prefix is empty.",15,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of prefixes in this machine.",15,{"inputs":[{"name":"prefix"}],"output":{"name":"usize"}}],[11,"preserves_priority","","Returns true iff the prefix match preserves priority.",15,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"prefixes","","Returns all of the prefixes participating in this machine.",15,{"inputs":[{"name":"prefix"}],"output":{"name":"vec"}}],[11,"fmt","","",16,{"inputs":[{"name":"singlesearch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"singlesearch"}],"output":{"name":"singlesearch"}}],[11,"fmt","","",15,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","regex::program","",17,{"inputs":[{"name":"inst"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"inst"}],"output":{"name":"inst"}}],[11,"fmt","","",18,{"inputs":[{"name":"charranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"charranges"}],"output":{"name":"charranges"}}],[11,"eq","","",19,{"inputs":[{"name":"lookinst"},{"name":"lookinst"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"lookinst"},{"name":"lookinst"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"lookinst"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"lookinst"}],"output":{"name":"lookinst"}}],[11,"any","","Emits a range specifically for the `(?s).` expression.",18,{"inputs":[{"name":"charranges"}],"output":{"name":"charranges"}}],[11,"any_nonl","","Emits a range specifically for the `.` expression.",18,{"inputs":[{"name":"charranges"}],"output":{"name":"charranges"}}],[11,"from_class","","Emits a range from the AST character class.",18,{"inputs":[{"name":"charranges"},{"name":"charclass"}],"output":{"name":"charranges"}}],[11,"matches","","Tests whether the given input character matches this instruction.",18,{"inputs":[{"name":"charranges"},{"name":"char"}],"output":{"name":"option"}}],[11,"matches","","Tests whether the pair of characters matches this zero-width\ninstruction.",19,{"inputs":[{"name":"lookinst"},{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"matchengine"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"matchengine"}],"output":{"name":"matchengine"}}],[11,"fmt","","",21,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Compiles a Regex.",21,{"inputs":[{"name":"program"},{"name":"option"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"exec","","Executes a compiled regex program.",21,null],[11,"num_captures","","Returns the total number of capture groups in the regular expression.\nThis includes the zeroth capture.",21,{"inputs":[{"name":"program"}],"output":{"name":"usize"}}],[11,"alloc_captures","","Allocate new capture groups.",21,{"inputs":[{"name":"program"}],"output":{"name":"vec"}}],[11,"find_prefixes","","Find and store a prefix machine for the current program.",21,null],[11,"clone","","",21,{"inputs":[{"name":"program"}],"output":{"name":"program"}}],[11,"fmt","regex::nfa","",22,{"inputs":[{"name":"nfa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"exec","","Execute the NFA matching engine.",22,null],[11,"fmt","","",23,{"inputs":[{"name":"nfathreads"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"threads"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"new","","Create new empty state for the NFA engine.",23,{"inputs":[{"name":"nfathreads"},{"name":"usize"},{"name":"usize"}],"output":{"name":"nfathreads"}}],[11,"fmt","regex::re","",26,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",26,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",26,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",26,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",6,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"clone","","",27,{"inputs":[{"name":"exnative"}],"output":{"name":"exnative"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","","",28,{"inputs":[{"name":"namesiter"}],"output":{"name":"option"}}],[11,"reg_replace","","",29,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",29,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",32,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",32,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",32,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",32,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",32,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",32,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",32,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",32,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",32,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"next","","",33,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",35,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",36,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"new","kickstarter","Creates a new Kickstarter client, connecting to the specified PostgreSQL uri and database schema.",0,{"inputs":[{"name":"client"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_config","","Creates a new Kickstarter client using the provided .toml configuration filename.\nIf bootstrap is true, the client will wipe and recreate the database\nusing the sql_file specified in the configuration.",0,{"inputs":[{"name":"client"},{"name":"str"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"db","","Returns a reference to the encapsulated database.",0,{"inputs":[{"name":"client"}],"output":{"name":"database"}}],[11,"table","","Returns the full table namespace.",0,{"inputs":[{"name":"client"},{"name":"str"}],"output":{"name":"string"}}],[11,"table_abbr","","Returns the full table namespace, abbreviated with the first two letters.",0,{"inputs":[{"name":"client"},{"name":"str"}],"output":{"name":"string"}}],[11,"sync","","Syncs generated models in src/lib/gen with database tables.",0,{"inputs":[{"name":"client"}],"output":null}],[11,"create_project","","Creates a new Kickstarter project with the specified name and goal amount in US dollars.",0,{"inputs":[{"name":"client"},{"name":"str"},{"name":"f64"}],"output":{"name":"result"}}],[11,"back_project","","Backs an existing Kickstarter project with the specified user, credit card, and contribution amount.",0,{"inputs":[{"name":"client"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"f64"}],"output":{"name":"result"}}],[11,"list_backers","","Returns a map of all backers and their contributions\ntowards a project, along with the project's goal amount.",0,{"inputs":[{"name":"client"},{"name":"str"}],"output":{"name":"result"}}],[11,"list_projects","","Returns a list of all projects on Kickstarter.",0,{"inputs":[{"name":"client"}],"output":{"name":"result"}}],[11,"list_backed_projects","","Returns a map of all Kickstarter projects backed by a user, along with the pledge information.",0,{"inputs":[{"name":"client"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"dberror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A type for results generated by Kickstarter-related functions, where the Err type is kickstarter::Error.",null,null]],"paths":[[3,"Client"],[4,"Error"],[3,"Pledge"],[3,"Project"],[3,"User"],[4,"Error"],[4,"Regex"],[3,"Backtrack"],[3,"BackMachine"],[4,"Job"],[3,"Char"],[3,"Compiler"],[3,"InputAt"],[3,"CharInput"],[3,"Pool"],[4,"Prefix"],[3,"SingleSearch"],[4,"Inst"],[3,"CharRanges"],[4,"LookInst"],[4,"MatchEngine"],[3,"Program"],[3,"Nfa"],[3,"NfaThreads"],[3,"Threads"],[3,"Thread"],[4,"Error"],[3,"ExNative"],[4,"NamesIter"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"]]};
searchIndex['codegenta'] = {"items":[[0,"","codegenta","",null,null],[11,"meta_code","rustorm::table","",0,null],[11,"meta_code","","",1,null],[11,"meta_code","","build a source code which express it self as a table object\nwhich is a meta definition of the struct itself",2,null],[11,"struct_code","","build a source code for the struct defined by this table\n(imports, imported_tables, source code)",2,null],[11,"write_column","","",2,{"inputs":[{"name":"table"},{"name":"writer"},{"name":"column"}],"output":null}],[0,"generator","codegenta","",null,null],[3,"Config","codegenta::generator","configuration for generating code",null,null],[12,"base_module","","the module name to be used when it is possible to unify all tables in 1 module\nlikely the project name",3,null],[12,"include_table_references","","include the has_one, has_many, extension Models",3,null],[12,"use_condensed_name","","use the condense name of the has_many else, use the table name referred",3,null],[12,"generate_table_meta","","generate the is table definition for each table",3,null],[12,"base_dir","","base directory for the generated content",3,null],[12,"include_views","","whether to include generating views",3,null],[5,"get_all_tables","","",null,{"inputs":[{"name":"databasedev"}],"output":{"name":"vec"}}],[5,"get_schemas","","get the database schema",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"get_tables_in_schema","","get all tables with schema name",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"generate_all","","this is the default config generation",null,{"inputs":[{"name":"databasedev"},{"name":"config"}],"output":null}],[5,"generate_tables","","if only_tables is empty vec, then generate_all",null,{"inputs":[{"name":"databasedev"},{"name":"vec"},{"name":"config"}],"output":null}],[11,"default","","",3,{"inputs":[{"name":"config"}],"output":{"name":"self"}}]],"paths":[[3,"Foreign"],[3,"Column"],[3,"Table"],[3,"Config"]]};
searchIndex['rustorm'] = {"items":[[0,"","rustorm","Rustorm is a simple ORM implemented in rust.",null,null],[0,"em","","",null,null],[3,"EntityManager","rustorm::em","A higher level API for manipulating objects in the database\nThis serves as a helper function for the query api",null,null],[12,"db","","",0,null],[11,"new","","Create an entity manager with the database connection provided",0,{"inputs":[{"name":"entitymanager"},{"name":"database"}],"output":{"name":"self"}}],[11,"delete","","delete records of this table",0,{"inputs":[{"name":"entitymanager"},{"name":"table"},{"name":"vec"}],"output":{"name":"usize"}}],[11,"get_all","","get all the records of this table",0,{"inputs":[{"name":"entitymanager"}],"output":{"name":"result"}}],[11,"get_all_only_columns","","get all the records of this table, but return only the columns mentioned",0,{"inputs":[{"name":"entitymanager"},{"name":"vec"}],"output":{"name":"result"}}],[11,"get_all_ignore_columns","","get all the records of this table, ignoring the columns listed, mentioned the other else",0,{"inputs":[{"name":"entitymanager"},{"name":"vec"}],"output":{"name":"result"}}],[11,"get_all_distinct","","get all the distinct records of this table",0,{"inputs":[{"name":"entitymanager"}],"output":{"name":"result"}}],[11,"get_all_with_filter","","get all the records on this table which passed thru the filters\nany query that specified more than the parameters should use the query api",0,{"inputs":[{"name":"entitymanager"},{"name":"vec"}],"output":{"name":"result"}}],[11,"get_one","","get the first records of this table that passed thru the filters",0,{"inputs":[{"name":"entitymanager"},{"name":"filter"}],"output":{"name":"result"}}],[11,"get_exact","","",0,{"inputs":[{"name":"entitymanager"},{"name":"tovalue"}],"output":{"name":"result"}}],[11,"insert","","",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"}],"output":{"name":"result"}}],[11,"insert_with_ignore_columns","","insert this record on the database, ignoring some columns\nwhich are set by the database default\ncolumns that are ignored are set by the database automatically",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"},{"name":"vec"}],"output":{"name":"result"}}],[11,"insert_ignore_defaulted_columns","","insert this record on the database, explicitly setting the defaults of the columns\nit may produce the same result with insert_with_ignore_columns\nthe query is different since it may mentions `created` now(),",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"}],"output":{"name":"result"}}],[11,"reset","","this is called when there is a problem with the transaction",0,{"inputs":[{"name":"entitymanager"}],"output":null}],[11,"rollback","","when there is a problem with the transaction process, this can be called",0,{"inputs":[{"name":"entitymanager"}],"output":null}],[11,"update","","update the Dao, return the updated Dao",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"}],"output":{"name":"result"}}],[11,"update_ignore_columns","","update the Dao, return the updated Dao\nignored columns will remain unchanged",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"},{"name":"vec"}],"output":{"name":"result"}}],[11,"update_only_columns","","update the Dao, return the updated Dao\nonly the columns specified, the rest is unchanged",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"},{"name":"vec"}],"output":{"name":"result"}}],[11,"update_ignore_defaulted_columns","","update the Dao, return the updated Dao\nthe default columns will be reset to whatever the db's default function will come up.\nie. updated column will be defaulted everytime a record is updated.",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"}],"output":{"name":"result"}}],[11,"update_with_filter","","update the Dao with filter, return the updated Dao",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"},{"name":"vec"}],"output":{"name":"result"}}],[11,"save","","whether to use insert or update\ninsert when it is a new record\nupdate when it is an existing recor\nmay use UPSERT in newer versions of postgres\nmay use MERGE in oracle, mssql",0,{"inputs":[{"name":"entitymanager"},{"name":"t"}],"output":{"name":"result"}}],[0,"query","rustorm","",null,null],[3,"Join","rustorm::query","",null,null],[12,"modifier","","",1,null],[12,"join_type","","",1,null],[12,"table_name","","",1,null],[12,"column1","","",1,null],[12,"column2","","",1,null],[3,"Function","","function in a sql statement",null,null],[12,"function","","",2,null],[12,"params","","",2,null],[3,"Condition","","expression has left operand,\nequality and right operand",null,null],[12,"left","","",3,null],[12,"equality","","",3,null],[12,"right","","",3,null],[3,"Filter","","TODO: support for functions on columns\nTODO: need to merge with Expr",null,null],[12,"connector","","",4,null],[12,"condition","","TODO: maybe renamed to LHS, supports functions and SQL",4,null],[12,"subfilters","","",4,null],[3,"ColumnName","","",null,null],[12,"column","","",5,null],[12,"table","","",5,null],[12,"schema","","",5,null],[3,"Field","","",null,null],[12,"operand","","the field",6,null],[12,"name","","when renamed as field",6,null],[3,"TableName","","",null,null],[12,"schema","","",7,null],[12,"name","","",7,null],[12,"columns","","optional columns needed when rename for conflicting columns are needed",7,null],[3,"Query","","",null,null],[12,"sql_type","","sql type determine which type of query to form, some fields are not applicable to other types of query",8,null],[12,"distinct","","whether to select the records distinct",8,null],[12,"enumerate_all","","whether to enumate all columns in involved models",8,null],[12,"declared_query","","",8,null],[12,"enumerated_fields","","fields can be functions, column sql query, and even columns\nTODO; merge enumerated column to this, add a builder for fields",8,null],[12,"distinct_on_columns","","specify to use distinct ON set of columns",8,null],[12,"filters","","filter records, ~ where statement of the query",8,null],[12,"joins","","joining multiple tables",8,null],[12,"order_by","","ordering of the records via the columns specified\nTODO: ordering should be more flexible than this\nneeds to support expressions",8,null],[12,"group_by","","grouping columns to create an aggregate",8,null],[12,"having","","having field",8,null],[12,"excluded_columns","","exclude the mention of the columns in the SQL query, useful when ignoring changes in update/insert records",8,null],[12,"page","","paging of records",8,null],[12,"page_size","","size of a page",8,null],[12,"from","","where the focus of values of column selection\nthis is the table to insert to, update to delete, create, drop\nwhe used in select, this is the \npub from_table:Option<TableName>,\nfrom field, where field can be a query, table, column, or function",8,null],[12,"values","","The data values, used in bulk inserting, updating,",8,null],[12,"enumerated_returns","","the returning clause of the query when supported,",8,null],[4,"JoinType","","",null,null],[13,"CROSS","","",9,null],[13,"INNER","","",9,null],[13,"OUTER","","",9,null],[4,"Modifier","","",null,null],[13,"LEFT","","",10,null],[13,"RIGHT","","",10,null],[13,"FULL","","",10,null],[4,"Direction","","",null,null],[13,"ASC","","",11,null],[13,"DESC","","",11,null],[4,"Connector","","Filter struct merged to query",null,null],[13,"And","","",12,null],[13,"Or","","",12,null],[4,"Equality","","",null,null],[13,"EQ","","",13,null],[13,"NEQ","","",13,null],[13,"LT","","",13,null],[13,"LTE","","",13,null],[13,"GT","","",13,null],[13,"GTE","","",13,null],[13,"IN","","",13,null],[13,"NOT_IN","","",13,null],[13,"LIKE","","",13,null],[13,"IS_NOT_NULL","","",13,null],[13,"IS_NULL","","",13,null],[4,"Operand","","Operands can be columns, functions, query or value types",null,null],[13,"ColumnName","","",14,null],[13,"TableName","","",14,null],[13,"Function","","",14,null],[13,"Query","","",14,null],[13,"Value","","",14,null],[13,"Vec","","",14,null],[4,"SqlType","","Could have been SqlAction",null,null],[13,"SELECT","","",15,null],[13,"INSERT","","",15,null],[13,"UPDATE","","",15,null],[13,"DELETE","","",15,null],[4,"Error","","Query Error",null,null],[13,"NoTableSpecified","","",16,null],[13,"NoColumnSpecified","","",16,null],[13,"SqlError","","",16,null],[8,"ToTableName","","convert str, IsTable to TableName",null,null],[10,"to_table_name","","",17,{"inputs":[{"name":"totablename"}],"output":{"name":"tablename"}}],[11,"fmt","","",9,{"inputs":[{"name":"jointype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"jointype"}],"output":{"name":"jointype"}}],[11,"fmt","","",10,{"inputs":[{"name":"modifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"modifier"}],"output":{"name":"modifier"}}],[11,"fmt","","",1,{"inputs":[{"name":"join"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"join"}],"output":{"name":"join"}}],[11,"fmt","","",11,{"inputs":[{"name":"direction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"fmt","","",12,{"inputs":[{"name":"connector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"connector"}],"output":{"name":"connector"}}],[11,"fmt","","",13,{"inputs":[{"name":"equality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"equality"}],"output":{"name":"equality"}}],[11,"fmt","","",2,{"inputs":[{"name":"function"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"function"}],"output":{"name":"function"}}],[11,"fmt","","",14,{"inputs":[{"name":"operand"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"operand"}],"output":{"name":"operand"}}],[11,"fmt","","",3,{"inputs":[{"name":"condition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"condition"}],"output":{"name":"condition"}}],[11,"fmt","","",4,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"new","","user friendly, commonly use API",4,{"inputs":[{"name":"filter"},{"name":"str"},{"name":"equality"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"with_value","","user friendly, commonly use API",4,{"inputs":[{"name":"filter"},{"name":"str"},{"name":"equality"},{"name":"value"}],"output":{"name":"self"}}],[11,"bare_new","","not very commonly used, offers enough flexibility",4,{"inputs":[{"name":"filter"},{"name":"operand"},{"name":"equality"},{"name":"operand"}],"output":{"name":"self"}}],[11,"is_null","","",4,{"inputs":[{"name":"filter"},{"name":"str"}],"output":{"name":"self"}}],[11,"is_not_null","","",4,{"inputs":[{"name":"filter"},{"name":"str"}],"output":{"name":"self"}}],[11,"and","","",4,{"inputs":[{"name":"filter"},{"name":"str"},{"name":"equality"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"or","","",4,{"inputs":[{"name":"filter"},{"name":"str"},{"name":"equality"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"or_filter","","",4,{"inputs":[{"name":"filter"},{"name":"filter"}],"output":{"name":"self"}}],[11,"and_filter","","",4,{"inputs":[{"name":"filter"},{"name":"filter"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"sqltype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"sqltype"}],"output":{"name":"sqltype"}}],[11,"clone","","",5,{"inputs":[{"name":"columnname"}],"output":{"name":"columnname"}}],[11,"fmt","","",5,{"inputs":[{"name":"columnname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"columnname"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"columnname"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"field"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"field"}],"output":{"name":"field"}}],[11,"from_str","","",5,{"inputs":[{"name":"columnname"},{"name":"str"}],"output":{"name":"self"}}],[11,"complete_name","","table name and column name",5,{"inputs":[{"name":"columnname"}],"output":{"name":"string"}}],[11,"super_complete_name","","includes the schema, table name and column name",5,{"inputs":[{"name":"columnname"}],"output":{"name":"string"}}],[11,"fmt","","",5,{"inputs":[{"name":"columnname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"columnname"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"columnname"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"tablename"}],"output":{"name":"tablename"}}],[11,"fmt","","",7,{"inputs":[{"name":"tablename"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"tablename"},{"name":"str"}],"output":{"name":"self"}}],[11,"complete_name","","",7,{"inputs":[{"name":"tablename"}],"output":{"name":"string"}}],[11,"eq","","",7,{"inputs":[{"name":"tablename"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"tablename"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"tablename"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"query"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"query"}],"output":{"name":"query"}}],[11,"new","","the default query is select",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"select","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"insert","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"update","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"delete","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"distinct","","add DISTINCT ie: SELECT DISTINCT",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"select_all","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"enumerate_all","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"all","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"column","","all enumerated columns shall be called from this\nany conflict of columns from some other table will be automatically renamed\ncolumns that are not conflicts from some other table,\nbut is the other conflicting column is not explicityly enumerated will not be renamed",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"columns","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"group_by","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"having","","",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"equality"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"exclude_column","","exclude columns when inserting/updating data\nalso ignores the column when selecting records\nuseful for manipulating thin records by excluding huge binary blobs such as images",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"exclude_columns","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"distinct_on_columns","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"set_page","","when paging multiple records",8,{"inputs":[{"name":"query"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_page_size","","the number of items retrieve per page",8,{"inputs":[{"name":"query"},{"name":"usize"}],"output":{"name":"self"}}],[11,"limit","","the number of items retrieve per page",8,{"inputs":[{"name":"query"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","A more terse way to write the query",8,{"inputs":[{"name":"query"},{"name":"totablename"}],"output":{"name":"self"}}],[11,"only_from","","enumerate only the columns that is coming from this table\nthis will invalidate enumerate_all",8,{"inputs":[{"name":"query"},{"name":"totablename"}],"output":{"name":"self"}}],[11,"from_table","","",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"into_","","`into` is used in rust, os settled with `into_`",8,{"inputs":[{"name":"query"},{"name":"totablename"}],"output":{"name":"self"}}],[11,"into_table","","can not use into since it's rust .into built-in (owned)",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"table","","can be used in behalf of into_, from,",8,{"inputs":[{"name":"query"},{"name":"totablename"}],"output":{"name":"self"}}],[11,"declare_query","","if the database support CTE declareted query i.e WITH,\nthen this query will be declared\nif database doesn't support WITH queries, then this query will be \nwrapped in the from_query\nbuild a builder for this",8,{"inputs":[{"name":"query"},{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_query","","a query to query from\nuse WITH (query) t1 SELECT from t1 declaration in postgresql, sqlite\nuse SELECT FROM (query) in oracle, mysql, others \nalias of the table",8,{"inputs":[{"name":"query"},{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_field","","",8,{"inputs":[{"name":"query"},{"name":"field"}],"output":{"name":"self"}}],[11,"get_from_table","","",8,{"inputs":[{"name":"query"}],"output":{"name":"option"}}],[11,"join","","join a table on this query",8,{"inputs":[{"name":"query"},{"name":"join"}],"output":{"name":"self"}}],[11,"left_join_table","","join a table on this query",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"left_join","","",8,{"inputs":[{"name":"query"},{"name":"totablename"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"right_join_table","","",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"right_join","","",8,{"inputs":[{"name":"query"},{"name":"totablename"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"full_join_table","","",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"full_join","","",8,{"inputs":[{"name":"query"},{"name":"totablename"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"inner_join_table","","",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"inner_join","","",8,{"inputs":[{"name":"query"},{"name":"totablename"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"asc","","ascending orderby of this column",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"desc","","ascending orderby of this column",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"get_involved_tables","","",8,{"inputs":[{"name":"query"}],"output":{"name":"vec"}}],[11,"finalize","","preprocess the missing fields of the query,\nsuch as mentioning the columns of the from_table\nenumerate the columns of the involved tables\nskipping those which are explicitly ignored\nthe query will then be built and ready to be executed\nTODO: renamed conflicting enumerated columns\nif no enumerated fields and no excluded columns\ndo a select all",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"get_renamed_columns","","return the list of renamed columns, used in dao conversion to struc types",8,{"inputs":[{"name":"query"}],"output":{"name":"vec"}}],[11,"get_enumerated_columns","","return the list of enumerated columns\nwill be used for updating records",8,{"inputs":[{"name":"query"}],"output":{"name":"vec"}}],[11,"add_filter","","",8,{"inputs":[{"name":"query"},{"name":"filter"}],"output":{"name":"self"}}],[11,"add_filters","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"filter","","",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"equality"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"filter_eq","","column = value",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"filter_lt","","column < value",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"filter_lte","","column <= value",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"filter_gt","","column > value",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"filter_gte","","column <= value",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"add_value","","",8,{"inputs":[{"name":"query"},{"name":"operand"}],"output":{"name":"self"}}],[11,"value","","",8,{"inputs":[{"name":"query"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"set","","set a value of a column when inserting/updating records",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"tovalue"}],"output":{"name":"self"}}],[11,"return_all","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"returns","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"enumerate_column_as_return","","",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"build","","build the query only, not executed, useful when debugging",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"sqlfrag"}}],[11,"retrieve","","expects a return, such as select, insert/update with returning clause",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"result"}}],[11,"retrieve_one","","expects a return, such as select, insert/update with returning clause\nno casting of data to structs is done\nThis is used when retrieving multiple models in 1 query, then casting the records to its equivalent structs",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"result"}}],[11,"execute","","delete, update without caring for the return",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"result"}}],[11,"collect","","execute the query, then convert the result",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"result"}}],[11,"collect_one","","execute the query then collect only 1 record\nTODO: use Result<T,Error> instead of Option<T>",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"result"}}],[0,"dao","rustorm","",null,null],[3,"DaoResult","rustorm::dao","meta result of a query useful when doing complex query, and also with paging\nTODO: good name: DaoRows",null,null],[12,"dao","","",18,null],[12,"renamed_columns","","renamed columns for each table\nie. product => [(name, product_name),..];",18,null],[12,"total","","the total number of records",18,null],[12,"page","","page of the query",18,null],[12,"page_size","","page size",18,null],[3,"SerDaoResult","","a serializable array of dao to be serialized to json request",null,null],[12,"dao","","",19,null],[12,"total","","",19,null],[12,"page","","",19,null],[12,"page_size","","",19,null],[3,"Dao","","TODO: optimization, used enum types for the key values\nThis will save allocation of string to enum keys which is a few bytes, int ",null,null],[12,"values","","",20,null],[4,"Type","","supported generic datatypes for an ORM",null,null],[13,"Bool","","",21,null],[13,"I8","","",21,null],[13,"I16","","",21,null],[13,"I32","","",21,null],[13,"I64","","",21,null],[13,"U8","","",21,null],[13,"U16","","",21,null],[13,"U32","","",21,null],[13,"U64","","",21,null],[13,"F32","","",21,null],[13,"F64","","",21,null],[13,"String","","",21,null],[13,"VecU8","","",21,null],[13,"Object","","",21,null],[13,"Json","","",21,null],[13,"Uuid","","",21,null],[13,"DateTime","","",21,null],[13,"NaiveDate","","",21,null],[13,"NaiveTime","","",21,null],[13,"NaiveDateTime","","",21,null],[4,"Value","","supported generic datatypes for an ORM",null,null],[13,"Bool","","",22,null],[13,"I8","","",22,null],[13,"I16","","",22,null],[13,"I32","","",22,null],[13,"I64","","",22,null],[13,"U8","","",22,null],[13,"U16","","",22,null],[13,"U32","","",22,null],[13,"U64","","",22,null],[13,"F32","","",22,null],[13,"F64","","",22,null],[13,"String","","",22,null],[13,"VecU8","","",22,null],[13,"Object","","",22,null],[13,"Json","","",22,null],[13,"Uuid","","",22,null],[13,"DateTime","","",22,null],[13,"NaiveDate","","",22,null],[13,"NaiveTime","","",22,null],[13,"NaiveDateTime","","",22,null],[13,"Null","","",22,null],[8,"IsDao","","trait for converting dao to model\nsized and clonable",null,null],[10,"from_dao","","convert dao to an instance of the corresponding struct of the model\ntaking into considerating the renamed columns",23,{"inputs":[{"name":"isdao"},{"name":"dao"}],"output":{"name":"self"}}],[10,"to_dao","","convert from an instance of the struct to a dao representation\nto be saved into the database",23,{"inputs":[{"name":"isdao"}],"output":{"name":"dao"}}],[8,"ToCompact","","Ignore Column are columns that are redundant when displaying as API results",null,null],[10,"redundant_fields","","list of redundant fields that will be removed when doing a compact serialization",24,{"inputs":[{"name":"tocompact"}],"output":{"name":"vec"}}],[10,"compact_map","","compact BTreeMap represetation",24,{"inputs":[{"name":"tocompact"}],"output":{"name":"btreemap"}}],[10,"compact_dao","","compact dao representation",24,{"inputs":[{"name":"tocompact"}],"output":{"name":"dao"}}],[10,"compact_json","","compact dao representation",24,{"inputs":[{"name":"tocompact"}],"output":{"name":"json"}}],[8,"ToValue","","rename to ToValue",null,null],[10,"to_db_type","","",25,{"inputs":[{"name":"tovalue"}],"output":{"name":"value"}}],[8,"FromValue","","",null,null],[10,"from_type","","",26,{"inputs":[{"name":"fromvalue"},{"name":"value"}],"output":{"name":"self"}}],[11,"fmt","","",21,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"eq","","",21,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"eq","","",22,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"value"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",22,{"inputs":[{"name":"value"}],"output":{"name":"json"}}],[11,"fmt","","",22,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"daoresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"serdaoresult"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_dao_result","","",19,{"inputs":[{"name":"serdaoresult"},{"name":"daoresult"}],"output":{"name":"self"}}],[11,"encode","","",18,{"inputs":[{"name":"daoresult"},{"name":"s"}],"output":{"name":"result"}}],[11,"cast","","cast the dao to the specific struct instance\ndo not include if non nullable parts contains null",18,{"inputs":[{"name":"daoresult"}],"output":{"name":"vec"}}],[11,"cast_one","","",18,{"inputs":[{"name":"daoresult"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"dao"}],"output":{"name":"dao"}}],[11,"fmt","","",20,{"inputs":[{"name":"dao"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"dao"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",20,{"inputs":[{"name":"dao"}],"output":{"name":"json"}}],[11,"new","","",20,{"inputs":[{"name":"dao"}],"output":{"name":"self"}}],[11,"set","","",20,{"inputs":[{"name":"dao"},{"name":"str"},{"name":"tovalue"}],"output":null}],[11,"set_null","","set to null the value of this column",20,{"inputs":[{"name":"dao"},{"name":"str"}],"output":null}],[11,"set_value","","",20,{"inputs":[{"name":"dao"},{"name":"str"},{"name":"value"}],"output":null}],[11,"get_value","","",20,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"value"}}],[11,"remove","","take the value and remove the content",20,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"t"}}],[11,"get","","take the value but not removing the content",20,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"t"}}],[11,"get_opt","","get optional value",20,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_ref","","get a reference of the type",20,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"value"}}],[11,"as_map","","",20,{"inputs":[{"name":"dao"}],"output":{"name":"btreemap"}}],[11,"to_db_type","","",22,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"to_db_type","collections::string","",27,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"to_db_type","uuid","",28,{"inputs":[{"name":"uuid"}],"output":{"name":"value"}}],[11,"to_db_type","chrono::datetime","",29,{"inputs":[{"name":"datetime"}],"output":{"name":"value"}}],[11,"to_db_type","chrono::naive::date","",30,{"inputs":[{"name":"naivedate"}],"output":{"name":"value"}}],[11,"to_db_type","chrono::naive::time","",31,{"inputs":[{"name":"naivetime"}],"output":{"name":"value"}}],[11,"to_db_type","chrono::naive::datetime","",32,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"value"}}],[11,"from_type","collections::string","",27,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_type","uuid","",28,{"inputs":[{"name":"uuid"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_type","chrono::datetime","",29,{"inputs":[{"name":"datetime"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_type","chrono::naive::time","",31,{"inputs":[{"name":"naivetime"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_type","chrono::naive::date","",30,{"inputs":[{"name":"naivedate"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_type","chrono::naive::datetime","",32,{"inputs":[{"name":"naivedatetime"},{"name":"value"}],"output":{"name":"self"}}],[0,"database","rustorm","",null,null],[3,"DbError","rustorm::database","",null,null],[12,"code","","",33,null],[4,"SqlOption","","SqlOption, contains the info about the features and quirks of underlying database",null,null],[13,"UsesNumberedParam","","use the numbered parameters, as the case with rust-postgres",34,null],[13,"UsesQuestionMark","","sqlite, jdbc",34,null],[13,"SupportsReturningClause","","postgresql supports returning clause on insert and update",34,null],[13,"SupportsCTE","","support CTE (common table expression ie. WITH) (postgresql, sqlite)",34,null],[13,"SupportsInheritance","","supports inheritance (postgresql)",34,null],[13,"UsesSchema","","whether the database uses schema (postgresl, oracle)",34,null],[13,"ReturnMetaColumns","","wheter the returned rows in a query included Meta columns for easy extraction of records\n(postgres returns this), sqlite does not return meta columns, so you have to extract it by index yourself.",34,null],[8,"Database","","Generic Database interface\nThis is the database interface which will should be implemented to you the specifics of each database platform\nAt least all methods on this trait should be implemented for target deployment database\nA lower level API for manipulating objects in the database",null,null],[10,"version","","return the version of the database\nlower version of database has fewer supported features",35,{"inputs":[{"name":"database"}],"output":{"name":"string"}}],[10,"begin","","begin database transaction",35,{"inputs":[{"name":"database"}],"output":null}],[10,"commit","","commit database transaction",35,{"inputs":[{"name":"database"}],"output":null}],[10,"rollback","","rollback data changes executed prior to calling the begin method",35,{"inputs":[{"name":"database"}],"output":null}],[10,"is_transacted","","determine if this transaction has been committed or rolledback",35,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[10,"is_closed","","determine if the database connection closed",35,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[10,"is_connected","","check if the database is still connected",35,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[10,"close","","close the database connection",35,{"inputs":[{"name":"database"}],"output":null}],[10,"is_valid","","determine if the database connection is still valid",35,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[10,"reset","","reset the database connection",35,{"inputs":[{"name":"database"}],"output":null}],[11,"select","","select\nreturns an array to the qualified records",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"result"}}],[11,"insert","","insert\ninsert an object, returns the inserted Dao value\nincluding the value generated via the defaults",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"result"}}],[10,"update","","update\nreturns the updated Dao",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"dao"}}],[10,"delete","","delete records\nreturns the number of deleted records",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"result"}}],[11,"execute_with_return","","execute query with return dao,\nuse the enumerated column for data extraction when db doesn't support returning the records column names",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"result"}}],[11,"execute_with_one_return","","execute query with 1 return dao",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"result"}}],[11,"execute","","execute query with no return dao",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"result"}}],[10,"execute_sql_with_return","","execute insert with returning clause, update with returning clause",35,{"inputs":[{"name":"database"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[11,"execute_sql_with_one_return","","",35,{"inputs":[{"name":"database"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[10,"execute_sql","","everything else, no required return other than error or affected number of records",35,{"inputs":[{"name":"database"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[11,"build_query","","build a query, return the sql string and the parameters.\nuse by select to build the select query\nbuild all types of query\nTODO: need to supply the number of parameters where to start the numbering of the number parameters",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[11,"build_operand","","build operand, i.e: columns, query, function, values",35,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"operand"}],"output":null}],[11,"build_condition","","",35,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"condition"}],"output":null}],[11,"build_field","","",35,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"field"}],"output":null}],[11,"build_filter","","",35,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"filter"}],"output":null}],[11,"build_filters","","build the filter clause or the where clause of the query\nTODO: add the sub filters",35,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"vec"}],"output":null}],[11,"build_enumerated_fields","","build the enumerated, distinct, *, columns",35,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"vec"}],"output":null}],[11,"build_select","","build the select statment from the query object",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[11,"build_insert","","TODO complete this",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[11,"build_update","","",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[11,"build_delete","","",35,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[10,"sql_options","","",35,{"inputs":[{"name":"database"}],"output":{"name":"vec"}}],[8,"DatabaseDDL","","Deployment Database should implement this trait,\nto enable automated installation of the app, regardless what database platform\nthe app is developed from.",null,null],[10,"create_schema","","The following methods involves DDL(Data definition language) operation\ncreate a database schema",36,{"inputs":[{"name":"databaseddl"},{"name":"str"}],"output":null}],[10,"drop_schema","","drop the database schema",36,{"inputs":[{"name":"databaseddl"},{"name":"str"}],"output":null}],[10,"create_table","","create a database table based on the Model Definition",36,{"inputs":[{"name":"databaseddl"},{"name":"table"}],"output":null}],[10,"build_create_table","","build sql for create table",36,{"inputs":[{"name":"databaseddl"},{"name":"table"}],"output":{"name":"sqlfrag"}}],[10,"rename_table","","rename table, in the same schema",36,{"inputs":[{"name":"databaseddl"},{"name":"table"},{"name":"string"}],"output":null}],[10,"drop_table","","drop table",36,{"inputs":[{"name":"databaseddl"},{"name":"table"}],"output":null}],[10,"set_foreign_constraint","","set the foreign key constraint of a table",36,{"inputs":[{"name":"databaseddl"},{"name":"table"}],"output":null}],[10,"set_primary_constraint","","set the primary key constraint of a table",36,{"inputs":[{"name":"databaseddl"},{"name":"table"}],"output":null}],[8,"DatabaseDev","","implement this for database that you use as your development platform, to extract meta data information\nabout the tables and their relationship to each other",null,null],[10,"get_table_sub_class","","Database interface use for the development process\napplicable to later version of postgresql where there is inheritance",37,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[10,"get_parent_table","","",37,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[10,"get_table_metadata","","Build the Table object based on the extracted meta data info from database\nThis is queries directly from the database, so this will be costly. Only used this on initialization processes",37,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":{"name":"table"}}],[10,"get_all_tables","","get all the tables in this database (schema, table, is_view)",37,{"inputs":[{"name":"databasedev"}],"output":{"name":"vec"}}],[10,"get_inherited_columns","","get the inherited columns of this table",37,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[10,"dbtype_to_rust_type","","get the equivalent postgresql database data type to rust data type\nreturns (module, type)",37,null],[10,"rust_type_to_dbtype","","",37,{"inputs":[{"name":"databasedev"},{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",34,{"inputs":[{"name":"sqloption"},{"name":"sqloption"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"sqloption"},{"name":"sqloption"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"dberror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",33,{"inputs":[{"name":"dberror"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_code","","",33,{"inputs":[{"name":"dberror"},{"name":"str"},{"name":"sqlstate"}],"output":{"name":"self"}}],[11,"description","","",33,{"inputs":[{"name":"dberror"}],"output":{"name":"str"}}],[11,"cause","","",33,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"dberror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",33,{"inputs":[{"name":"dberror"},{"name":"error"}],"output":{"name":"dberror"}}],[0,"platform","rustorm","",null,null],[0,"postgres","rustorm::platform","",null,null],[3,"Postgres","rustorm::platform::postgres","",null,null],[12,"pool","","a connection pool is provided",38,null],[11,"new","","create an instance, but without a connection yet,\nuseful when just building sql queries specific to this platform\ninexpensive operation, so can have multiple instances",38,{"inputs":[{"name":"postgres"}],"output":{"name":"self"}}],[11,"with_pooled_connection","","",38,{"inputs":[{"name":"postgres"},{"name":"pooledconnection"}],"output":{"name":"self"}}],[11,"get_connection","","",38,{"inputs":[{"name":"postgres"}],"output":{"name":"connection"}}],[11,"version","","",38,{"inputs":[{"name":"postgres"}],"output":{"name":"string"}}],[11,"begin","","",38,{"inputs":[{"name":"postgres"}],"output":null}],[11,"commit","","",38,{"inputs":[{"name":"postgres"}],"output":null}],[11,"rollback","","",38,{"inputs":[{"name":"postgres"}],"output":null}],[11,"is_transacted","","",38,{"inputs":[{"name":"postgres"}],"output":{"name":"bool"}}],[11,"is_closed","","",38,{"inputs":[{"name":"postgres"}],"output":{"name":"bool"}}],[11,"is_connected","","",38,{"inputs":[{"name":"postgres"}],"output":{"name":"bool"}}],[11,"close","","",38,{"inputs":[{"name":"postgres"}],"output":null}],[11,"is_valid","","",38,{"inputs":[{"name":"postgres"}],"output":{"name":"bool"}}],[11,"reset","","",38,{"inputs":[{"name":"postgres"}],"output":null}],[11,"sql_options","","return this list of options, supported features in the database\nTODO: make this features version specific\nhttp://www.postgresql.org/about/featurematrix/\nwriter CTE  >= 9.1\nInheritance  >= 9.0\nJSON >= 9.2\nJSONB >= 9.4\nReturning >= 8.2",38,{"inputs":[{"name":"postgres"}],"output":{"name":"vec"}}],[11,"update","","",38,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"dao"}}],[11,"delete","","",38,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"result"}}],[11,"execute_sql_with_return","","",38,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[11,"execute_sql","","generic execute sql which returns not much information,\nreturns only the number of affected records or errors\ncan be used with DDL operations (CREATE, DELETE, ALTER, DROP)",38,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[11,"create_schema","","",38,{"inputs":[{"name":"postgres"},{"name":"str"}],"output":null}],[11,"drop_schema","","",38,{"inputs":[{"name":"postgres"},{"name":"str"}],"output":null}],[11,"create_table","","",38,{"inputs":[{"name":"postgres"},{"name":"table"}],"output":null}],[11,"build_create_table","","",38,{"inputs":[{"name":"postgres"},{"name":"table"}],"output":{"name":"sqlfrag"}}],[11,"rename_table","","",38,{"inputs":[{"name":"postgres"},{"name":"table"},{"name":"string"}],"output":null}],[11,"drop_table","","",38,{"inputs":[{"name":"postgres"},{"name":"table"}],"output":null}],[11,"set_foreign_constraint","","",38,{"inputs":[{"name":"postgres"},{"name":"table"}],"output":null}],[11,"set_primary_constraint","","",38,{"inputs":[{"name":"postgres"},{"name":"table"}],"output":null}],[11,"get_parent_table","","",38,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_table_sub_class","","",38,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[11,"get_table_metadata","","",38,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":{"name":"table"}}],[11,"get_all_tables","","",38,{"inputs":[{"name":"postgres"}],"output":{"name":"vec"}}],[11,"get_inherited_columns","","",38,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[11,"dbtype_to_rust_type","","get the rust data type names from database data type names\nwill be used in source code generation",38,null],[11,"rust_type_to_dbtype","","",38,{"inputs":[{"name":"postgres"},{"name":"str"}],"output":{"name":"string"}}],[0,"mysql","rustorm::platform","",null,null],[3,"Mysql","rustorm::platform::mysql","",null,null],[11,"new","","",39,{"inputs":[{"name":"mysql"}],"output":{"name":"self"}}],[11,"with_pooled_connection","","",39,{"inputs":[{"name":"mysql"},{"name":"mypool"}],"output":{"name":"self"}}],[11,"version","","",39,{"inputs":[{"name":"mysql"}],"output":{"name":"string"}}],[11,"begin","","",39,{"inputs":[{"name":"mysql"}],"output":null}],[11,"commit","","",39,{"inputs":[{"name":"mysql"}],"output":null}],[11,"rollback","","",39,{"inputs":[{"name":"mysql"}],"output":null}],[11,"is_transacted","","",39,{"inputs":[{"name":"mysql"}],"output":{"name":"bool"}}],[11,"is_closed","","",39,{"inputs":[{"name":"mysql"}],"output":{"name":"bool"}}],[11,"is_connected","","",39,{"inputs":[{"name":"mysql"}],"output":{"name":"bool"}}],[11,"close","","",39,{"inputs":[{"name":"mysql"}],"output":null}],[11,"is_valid","","",39,{"inputs":[{"name":"mysql"}],"output":{"name":"bool"}}],[11,"reset","","",39,{"inputs":[{"name":"mysql"}],"output":null}],[11,"sql_options","","return this list of options, supported features in the database",39,{"inputs":[{"name":"mysql"}],"output":{"name":"vec"}}],[11,"update","","",39,{"inputs":[{"name":"mysql"},{"name":"query"}],"output":{"name":"dao"}}],[11,"delete","","",39,{"inputs":[{"name":"mysql"},{"name":"query"}],"output":{"name":"result"}}],[11,"execute_sql_with_return","","",39,{"inputs":[{"name":"mysql"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[11,"execute_sql_with_one_return","","",39,{"inputs":[{"name":"mysql"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[11,"execute_sql","","generic execute sql which returns not much information,\nreturns only the number of affected records or errors\ncan be used with DDL operations (CREATE, DELETE, ALTER, DROP)",39,{"inputs":[{"name":"mysql"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[11,"create_schema","","",39,{"inputs":[{"name":"mysql"},{"name":"str"}],"output":null}],[11,"drop_schema","","",39,{"inputs":[{"name":"mysql"},{"name":"str"}],"output":null}],[11,"build_create_table","","",39,{"inputs":[{"name":"mysql"},{"name":"table"}],"output":{"name":"sqlfrag"}}],[11,"create_table","","",39,{"inputs":[{"name":"mysql"},{"name":"table"}],"output":null}],[11,"rename_table","","",39,{"inputs":[{"name":"mysql"},{"name":"table"},{"name":"string"}],"output":null}],[11,"drop_table","","",39,{"inputs":[{"name":"mysql"},{"name":"table"}],"output":null}],[11,"set_foreign_constraint","","",39,{"inputs":[{"name":"mysql"},{"name":"table"}],"output":null}],[11,"set_primary_constraint","","",39,{"inputs":[{"name":"mysql"},{"name":"table"}],"output":null}],[0,"table","rustorm","",null,null],[3,"Foreign","rustorm::table","",null,null],[12,"schema","","",40,null],[12,"table","","",40,null],[12,"column","","",40,null],[3,"Column","","",null,null],[12,"name","","",41,null],[12,"data_type","","the generic data type, ie: u32, f64, string",41,null],[12,"db_data_type","","the database data type of this column, ie: int, numeric, character varying",41,null],[12,"is_primary","","",41,null],[12,"is_unique","","",41,null],[12,"default","","",41,null],[12,"comment","","",41,null],[12,"not_null","","",41,null],[12,"foreign","","",41,null],[12,"is_inherited","","determines if the column is inherited from the parent table",41,null],[3,"RefTable","","all referenced table used in context",null,null],[12,"table","","the table being referred",42,null],[12,"is_ext","","",42,null],[12,"is_has_one","","",42,null],[12,"is_has_many","","",42,null],[12,"is_direct","","",42,null],[3,"Table","","",null,null],[12,"schema","","which schema this belongs",43,null],[12,"name","","the table name",43,null],[12,"parent_table","","the parent table of this table when inheriting (>= postgresql 9.3)\n[FIXME] need to tell which schema this parent table belongs\nthere might be same table in different schemas",43,null],[12,"sub_table","","what are the other table that inherits this\n[FIXME] need to tell which schema this parent table belongs\nthere might be same table in different schemas",43,null],[12,"comment","","comment of this table",43,null],[12,"columns","","columns of this table",43,null],[12,"is_view","","views can also be generated",43,null],[8,"IsTable","","trait for table definition",null,null],[10,"table","","",44,{"inputs":[{"name":"istable"}],"output":{"name":"table"}}],[11,"eq","","",40,{"inputs":[{"name":"foreign"},{"name":"foreign"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"foreign"},{"name":"foreign"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"foreign"}],"output":{"name":"foreign"}}],[11,"fmt","","",40,{"inputs":[{"name":"foreign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"column"}],"output":{"name":"column"}}],[11,"fmt","","",41,{"inputs":[{"name":"column"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"corrected_name","","some column names may be a rust reserve keyword, so have to correct them",41,{"inputs":[{"name":"column"}],"output":{"name":"string"}}],[11,"displayname","","",41,{"inputs":[{"name":"column"}],"output":{"name":"string"}}],[11,"condense_name","","shorten, compress the name based on the table it points to\nparent_organization_id becomes parent",41,{"inputs":[{"name":"column"}],"output":{"name":"string"}}],[11,"fmt","","",41,{"inputs":[{"name":"column"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"column"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"column"},{"name":"self"}],"output":{"name":"bool"}}],[11,"member_name","","return the appropriate member name of this reference\nwhen used with the table in context\nwill have to use another name if the comed up name\nalready in the column names\n1. the concise name of the referred/referrring table\n2. the name of the referred/referring table\n3. the appended column_name and the table name\n4. the table_name appended with HasMany, or HasOne\n1:1, 1:M, M:M\n11, 1m mm",42,{"inputs":[{"name":"reftable"},{"name":"table"}],"output":{"name":"string"}}],[11,"fmt","","",43,{"inputs":[{"name":"table"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"table"}],"output":{"name":"table"}}],[11,"fmt","","",43,{"inputs":[{"name":"table"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"table"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"table"},{"name":"self"}],"output":{"name":"bool"}}],[11,"complete_name","","return the long name of the table using schema.table_name",43,{"inputs":[{"name":"table"}],"output":{"name":"string"}}],[11,"struct_name","","capitalize the first later, if there is underscore remove it then capitalize the next letter",43,{"inputs":[{"name":"table"}],"output":{"name":"string"}}],[11,"displayname","","get the display name of this table\nproduct_availability -> Product Availability",43,{"inputs":[{"name":"table"}],"output":{"name":"string"}}],[11,"condensed_displayname","","get a shorter display name of a certain table\nwhen being refered to this table\nexample product.product_availability -> Availability\nuser.user_info -> Info",43,{"inputs":[{"name":"table"},{"name":"table"}],"output":{"name":"string"}}],[11,"condensed_member_name","","get a condensed name of this table when used in contex with another table",43,{"inputs":[{"name":"table"},{"name":"table"}],"output":{"name":"string"}}],[11,"has_column_name","","determine if this table has a colum named",43,{"inputs":[{"name":"table"},{"name":"str"}],"output":{"name":"bool"}}],[11,"get_column","","return the column of this table with the name",43,{"inputs":[{"name":"table"},{"name":"str"}],"output":{"name":"option"}}],[11,"primary_columns","","return all the primary columns of this table",43,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"non_nullable_columns","","",43,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"uninherited_columns","","return all the columns of this table excluding the inherited columns",43,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"inherited_columns","","return all the inherited columns",43,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"is_primary","","check to see if the column is a primary or not\nthe Column.is_primary property is not reliable since it also list down the foreign key\nwhich makes it 2 entries in the table",43,{"inputs":[{"name":"table"},{"name":"str"}],"output":{"name":"bool"}}],[11,"unique_columns","","return all the unique keys of this table",43,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"foreign_columns","","",43,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"get_table","","return the first match of table name regardless of which schema it belongs to.\nget the table definition using the table name from an array of table object\n[FIXME] Needs to have a more elegant solution by using HashMap",43,{"inputs":[{"name":"table"},{"name":"str"},{"name":"str"},{"name":"vec"}],"output":{"name":"table"}}],[11,"referred_tables","","get all the tables that is referred by this table\nget has_one",43,{"inputs":[{"name":"table"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"referring_tables","","has_many_direct\nget all other tables that is refering to this table\nwhen any column of a table refers to this table\nget_has_many",43,{"inputs":[{"name":"table"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"get_all_applicable_reference","","all the referenced table of this table, this is used in building the structs as stubs or final model definitions\nit does not include the parent is this table is just an extension to it\nwhen a linker table, no applicable referenced is returned\nparent of extension tables are not returned",43,{"inputs":[{"name":"table"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"is_linker_table","","determine if this table is a linker table\nFIXME: make sure that there are 2 different tables referred to it",43,{"inputs":[{"name":"table"}],"output":{"name":"bool"}}],[11,"is_owned","","determines if the table is owned by some other table\nsay order_line is owned by orders\nwhich doesn't make sense to be a stand alone window on its own\ncharacteristic: if it has only 1 has_one which is its owning parent table\nand no other direct or indirect referring table",43,{"inputs":[{"name":"table"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"indirect_referring_tables","","has many indirect\nwhen there is a linker table, bypass the 1:1 relation to the linker table\nthen create a 1:M relation to the other linked table\nAlgorithmn: determine whether a table is a linker then get the other linked table\n       *get all the referring table\n       *for each table that refer to this table\n       *if there are only 2 columns and is both primary\n           and foreign key at the same time\n        and 1 of which refer to the primary column of this table\n    * then the other table that is refered is the indirect referring table\nreturns the table that is indirectly referring to this table and its linker table",43,{"inputs":[{"name":"table"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"extension_tables","","get referring tables, and check if primary columns of these referring table\nis the same set of the primary columns of this table\nit is just an extension table\n[FIXED]~~FIXME:~~ 2 primary 1 foreign should not be included as extension table\ncase for photo_sizes",43,{"inputs":[{"name":"table"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"is_extension_of","","determines if this table is just an extension of the table specified\nextension tables need not to contain a reference of their parent table",43,{"inputs":[{"name":"table"},{"name":"table"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"get_foreign_columns_to_table","","returns the columns of these table that is a foreign columns to the foreign table",43,{"inputs":[{"name":"table"},{"name":"table"}],"output":{"name":"vec"}}],[0,"writer","rustorm","",null,null],[3,"SqlFrag","rustorm::writer","sql fragment\nuse this for writing SQL statements",null,null],[12,"sql","","",45,null],[12,"params","","",45,null],[12,"sql_options","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"sqlfrag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",45,{"inputs":[{"name":"sqlfrag"},{"name":"vec"}],"output":{"name":"self"}}],[11,"append","","",45,{"inputs":[{"name":"sqlfrag"},{"name":"str"}],"output":{"name":"self"}}],[11,"appendln","","",45,{"inputs":[{"name":"sqlfrag"},{"name":"str"}],"output":{"name":"self"}}],[11,"tab","","",45,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"tabs","","",45,{"inputs":[{"name":"sqlfrag"},{"name":"u32"}],"output":{"name":"self"}}],[11,"ln","","",45,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"ln_tab","","",45,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"ln_tabs","","",45,{"inputs":[{"name":"sqlfrag"},{"name":"u32"}],"output":{"name":"self"}}],[11,"comma","","",45,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"sp","","",45,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"spaces","","",45,{"inputs":[{"name":"sqlfrag"},{"name":"i32"}],"output":{"name":"self"}}],[11,"left_river","","write the string, aligning to the left side of the middle space (river)",45,{"inputs":[{"name":"sqlfrag"},{"name":"str"}],"output":{"name":"self"}}],[11,"right_river","","write the string, aligning to the right side of the middle space (river), leaving the left with empty string",45,{"inputs":[{"name":"sqlfrag"},{"name":"str"}],"output":{"name":"self"}}],[11,"commasp","","",45,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"comment","","",45,{"inputs":[{"name":"sqlfrag"},{"name":"str"}],"output":{"name":"self"}}],[11,"parameter","","append parameter including the needed sql keywords",45,{"inputs":[{"name":"sqlfrag"},{"name":"value"}],"output":null}],[0,"config","rustorm","",null,null],[3,"DbConfig","rustorm::config","",null,null],[12,"platform","","postgres, sqlite, mysql\nsome fields are optional since sqlite is not applicable for those",46,null],[12,"username","","",46,null],[12,"password","","",46,null],[12,"host","","localhost",46,null],[12,"port","","5432",46,null],[12,"database","","",46,null],[12,"ssl","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"dbconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"dbconfig"},{"name":"dbconfig"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"dbconfig"},{"name":"dbconfig"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"dbconfig"}],"output":{"name":"dbconfig"}}],[11,"from_url","","TODO: get rid of the hacky way parsing database url\nhttps://github.com/servo/rust-url/issues/40",46,{"inputs":[{"name":"dbconfig"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_url","","",46,{"inputs":[{"name":"dbconfig"}],"output":{"name":"string"}}],[0,"pool","rustorm","",null,null],[4,"Platform","rustorm::pool","the sql builder for each of the database platform",null,null],[13,"Postgres","","",47,null],[13,"Oracle","","",47,null],[13,"Mysql","","",47,null],[4,"ManagedPool","","Postgres, Sqlite uses r2d2 connection manager,\nMysql has its own connection pooling",null,null],[13,"Postgres","","",48,null],[13,"Oracle","","",48,null],[13,"Mysql","","",48,null],[11,"as_ref","","",47,{"inputs":[{"name":"platform"}],"output":{"name":"database"}}],[11,"as_ddl","","",47,{"inputs":[{"name":"platform"}],"output":{"name":"databaseddl"}}],[11,"as_dev","","",47,{"inputs":[{"name":"platform"}],"output":{"name":"databasedev"}}],[11,"init","","initialize the pool",48,{"inputs":[{"name":"managedpool"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"connect","","a conection is created here",48,{"inputs":[{"name":"managedpool"}],"output":{"name":"result"}}],[11,"to_table_name","rustorm::table","contain the columns for later use when renaming is necessary",43,{"inputs":[{"name":"table"}],"output":{"name":"tablename"}}]],"paths":[[3,"EntityManager"],[3,"Join"],[3,"Function"],[3,"Condition"],[3,"Filter"],[3,"ColumnName"],[3,"Field"],[3,"TableName"],[3,"Query"],[4,"JoinType"],[4,"Modifier"],[4,"Direction"],[4,"Connector"],[4,"Equality"],[4,"Operand"],[4,"SqlType"],[4,"Error"],[8,"ToTableName"],[3,"DaoResult"],[3,"SerDaoResult"],[3,"Dao"],[4,"Type"],[4,"Value"],[8,"IsDao"],[8,"ToCompact"],[8,"ToValue"],[8,"FromValue"],[3,"String"],[3,"Uuid"],[3,"DateTime"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"DbError"],[4,"SqlOption"],[8,"Database"],[8,"DatabaseDDL"],[8,"DatabaseDev"],[3,"Postgres"],[3,"Mysql"],[3,"Foreign"],[3,"Column"],[3,"RefTable"],[3,"Table"],[8,"IsTable"],[3,"SqlFrag"],[3,"DbConfig"],[4,"Platform"],[4,"ManagedPool"]]};
searchIndex['r2d2_postgres'] = {"items":[[0,"","r2d2_postgres","Postgres support for the `r2d2` connection pool.",null,null],[3,"PostgresConnectionManager","","An `r2d2::ManageConnection` for `postgres::Connection`s.",null,null],[4,"Error","","A unified enum of errors returned by postgres::Connection",null,null],[13,"Connect","","A postgres::error::ConnectError",0,null],[13,"Other","","An postgres::error::Error",0,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"postgresconnectionmanager"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `PostgresConnectionManager`.",1,{"inputs":[{"name":"postgresconnectionmanager"},{"name":"t"},{"name":"sslmode"}],"output":{"name":"result"}}],[11,"connect","","",1,{"inputs":[{"name":"postgresconnectionmanager"}],"output":{"name":"result"}}],[11,"is_valid","","",1,{"inputs":[{"name":"postgresconnectionmanager"},{"name":"connection"}],"output":{"name":"result"}}],[11,"has_broken","","",1,{"inputs":[{"name":"postgresconnectionmanager"},{"name":"connection"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[3,"PostgresConnectionManager"]]};
searchIndex['postgres'] = {"items":[[0,"","postgres","Rust-Postgres is a pure-Rust frontend for the popular PostgreSQL database. It\nexposes a high level interface in the vein of JDBC or Go's `database/sql`\npackage.",null,null],[3,"UserInfo","","Authentication information.",null,null],[12,"user","","The username",0,null],[12,"password","","An optional password",0,null],[3,"ConnectParams","","Information necessary to open a new connection to a Postgres server.",null,null],[12,"target","","The target server",1,null],[12,"port","","The target port.",1,null],[12,"user","","The user to login as.",1,null],[12,"database","","The database to connect to. Defaults the value of `user`.",1,null],[12,"options","","Runtime parameters to be passed to the Postgres backend.",1,null],[3,"LoggingNoticeHandler","","A notice handler which logs at the `info` level.",null,null],[3,"CancelData","","Contains information necessary to cancel queries for a session.",null,null],[12,"process_id","","The process ID of the session.",2,null],[12,"secret_key","","The secret key for the session.",2,null],[3,"Connection","","A connection to a Postgres database.",null,null],[3,"Transaction","","Represents a transaction on a database connection.",null,null],[4,"ConnectTarget","","Specifies the target server to connect to.",null,null],[13,"Tcp","","Connect via TCP to the specified host.",3,null],[4,"IsolationLevel","","An enumeration of transaction isolation levels.",null,null],[13,"ReadUncommitted","","The \"read uncommitted\" level.",4,null],[13,"ReadCommitted","","The \"read committed\" level.",4,null],[13,"RepeatableRead","","The \"repeatable read\" level.",4,null],[13,"Serializable","","The \"serializable\" level.",4,null],[4,"SslMode","","Specifies the SSL support requested for a new connection.",null,null],[13,"None","","The connection will not use SSL.",5,null],[13,"Prefer","","The connection will use SSL if the backend supports it.",5,null],[13,"Require","","The connection must use SSL.",5,null],[5,"cancel_query","","Attempts to cancel an in-progress query.",null,{"inputs":[{"name":"t"},{"name":"sslmode"},{"name":"canceldata"}],"output":{"name":"result"}}],[0,"error","","Error types.",null,null],[3,"DbError","postgres::error","A Postgres error or notice.",null,null],[4,"SqlState","","SQLSTATE error codes",null,null],[13,"SuccessfulCompletion","","`00000`",6,null],[13,"Warning","","`01000`",6,null],[13,"DynamicResultSetsReturned","","`0100C`",6,null],[13,"ImplicitZeroBitPadding","","`01008`",6,null],[13,"NullValueEliminatedInSetFunction","","`01003`",6,null],[13,"PrivilegeNotGranted","","`01007`",6,null],[13,"PrivilegeNotRevoked","","`01006`",6,null],[13,"StringDataRightTruncationWarning","","`01004`",6,null],[13,"DeprecatedFeature","","`01P01`",6,null],[13,"NoData","","`02000`",6,null],[13,"NoAdditionalDynamicResultSetsReturned","","`02001`",6,null],[13,"SqlStatementNotYetComplete","","`03000`",6,null],[13,"ConnectionException","","`08000`",6,null],[13,"ConnectionDoesNotExist","","`08003`",6,null],[13,"ConnectionFailure","","`08006`",6,null],[13,"SqlclientUnableToEstablishSqlconnection","","`08001`",6,null],[13,"SqlserverRejectedEstablishmentOfSqlconnection","","`08004`",6,null],[13,"TransactionResolutionUnknown","","`08007`",6,null],[13,"ProtocolViolation","","`08P01`",6,null],[13,"TriggeredActionException","","`09000`",6,null],[13,"FeatureNotSupported","","`0A000`",6,null],[13,"InvalidTransactionInitiation","","`0B000`",6,null],[13,"LocatorException","","`0F000`",6,null],[13,"InvalidLocatorException","","`0F001`",6,null],[13,"InvalidGrantor","","`0L000`",6,null],[13,"InvalidGrantOperation","","`0LP01`",6,null],[13,"InvalidRoleSpecification","","`0P000`",6,null],[13,"DiagnosticsException","","`0Z000`",6,null],[13,"StackedDiagnosticsAccessedWithoutActiveHandler","","`0Z002`",6,null],[13,"CaseNotFound","","`20000`",6,null],[13,"CardinalityViolation","","`21000`",6,null],[13,"DataException","","`22000`",6,null],[13,"ArraySubscriptError","","`2202E`",6,null],[13,"CharacterNotInRepertoire","","`22021`",6,null],[13,"DatetimeFieldOverflow","","`22008`",6,null],[13,"DivisionByZero","","`22012`",6,null],[13,"ErrorInAssignment","","`22005`",6,null],[13,"EscapeCharacterConflict","","`2200B`",6,null],[13,"IndicatorOverflow","","`22022`",6,null],[13,"IntervalFieldOverflow","","`22015`",6,null],[13,"InvalidArgumentForLogarithm","","`2201E`",6,null],[13,"InvalidArgumentForNtileFunction","","`22014`",6,null],[13,"InvalidArgumentForNthValueFunction","","`22016`",6,null],[13,"InvalidArgumentForPowerFunction","","`2201F`",6,null],[13,"InvalidArgumentForWidthBucketFunction","","`2201G`",6,null],[13,"InvalidCharacterValueForCast","","`22018`",6,null],[13,"InvalidDatetimeFormat","","`22007`",6,null],[13,"InvalidEscapeCharacter","","`22019`",6,null],[13,"InvalidEscapeOctet","","`2200D`",6,null],[13,"InvalidEscapeSequence","","`22025`",6,null],[13,"NonstandardUseOfEscapeCharacter","","`22P06`",6,null],[13,"InvalidIndicatorParameterValue","","`22010`",6,null],[13,"InvalidParameterValue","","`22023`",6,null],[13,"InvalidRegularExpression","","`2201B`",6,null],[13,"InvalidRowCountInLimitClause","","`2201W`",6,null],[13,"InvalidRowCountInResultOffsetClause","","`2201X`",6,null],[13,"InvalidTimeZoneDisplacementValue","","`22009`",6,null],[13,"InvalidUseOfEscapeCharacter","","`2200C`",6,null],[13,"MostSpecificTypeMismatch","","`2200G`",6,null],[13,"NullValueNotAllowedData","","`22004`",6,null],[13,"NullValueNoIndicatorParameter","","`22002`",6,null],[13,"NumericValueOutOfRange","","`22003`",6,null],[13,"StringDataLengthMismatch","","`22026`",6,null],[13,"StringDataRightTruncationException","","`22001`",6,null],[13,"SubstringError","","`22011`",6,null],[13,"TrimError","","`22027`",6,null],[13,"UnterminatedCString","","`22024`",6,null],[13,"ZeroLengthCharacterString","","`2200F`",6,null],[13,"FloatingPointException","","`22P01`",6,null],[13,"InvalidTextRepresentation","","`22P02`",6,null],[13,"InvalidBinaryRepresentation","","`22P03`",6,null],[13,"BadCopyFileFormat","","`22P04`",6,null],[13,"UntranslatableCharacter","","`22P05`",6,null],[13,"NotAnXmlDocument","","`2200L`",6,null],[13,"InvalidXmlDocument","","`2200M`",6,null],[13,"InvalidXmlContent","","`2200N`",6,null],[13,"InvalidXmlComment","","`2200S`",6,null],[13,"InvalidXmlProcessingInstruction","","`2200T`",6,null],[13,"IntegrityConstraintViolation","","`23000`",6,null],[13,"RestrictViolation","","`23001`",6,null],[13,"NotNullViolation","","`23502`",6,null],[13,"ForeignKeyViolation","","`23503`",6,null],[13,"UniqueViolation","","`23505`",6,null],[13,"CheckViolation","","`23514`",6,null],[13,"ExclusionViolation","","`32P01`",6,null],[13,"InvalidCursorState","","`24000`",6,null],[13,"InvalidTransactionState","","`25000`",6,null],[13,"ActiveSqlTransaction","","`25001`",6,null],[13,"BranchTransactionAlreadyActive","","`25002`",6,null],[13,"HeldCursorRequiresSameIsolationLevel","","`25008`",6,null],[13,"InappropriateAccessModeForBranchTransaction","","`25003`",6,null],[13,"InappropriateIsolationLevelForBranchTransaction","","`25004`",6,null],[13,"NoActiveSqlTransactionForBranchTransaction","","`25005`",6,null],[13,"ReadOnlySqlTransaction","","`25006`",6,null],[13,"SchemaAndDataStatementMixingNotSupported","","`25007`",6,null],[13,"NoActiveSqlTransaction","","`25P01`",6,null],[13,"InFailedSqlTransaction","","`25P02`",6,null],[13,"InvalidSqlStatementName","","`26000`",6,null],[13,"TriggeredDataChangeViolation","","`27000`",6,null],[13,"InvalidAuthorizationSpecification","","`28000`",6,null],[13,"InvalidPassword","","`28P01`",6,null],[13,"DependentPrivilegeDescriptorsStillExist","","`2B000`",6,null],[13,"DependentObjectsStillExist","","`2BP01`",6,null],[13,"InvalidTransactionTermination","","`2D000`",6,null],[13,"SqlRoutineException","","`2F000`",6,null],[13,"FunctionExecutedNoReturnStatement","","`2F005`",6,null],[13,"ModifyingSqlDataNotPermittedSqlRoutine","","`2F002`",6,null],[13,"ProhibitedSqlStatementAttemptedSqlRoutine","","`2F003`",6,null],[13,"ReadingSqlDataNotPermittedSqlRoutine","","`2F004`",6,null],[13,"InvalidCursorName","","`34000`",6,null],[13,"ExternalRoutineException","","`38000`",6,null],[13,"ContainingSqlNotPermitted","","`38001`",6,null],[13,"ModifyingSqlDataNotPermittedExternalRoutine","","`38002`",6,null],[13,"ProhibitedSqlStatementAttemptedExternalRoutine","","`38003`",6,null],[13,"ReadingSqlDataNotPermittedExternalRoutine","","`38004`",6,null],[13,"ExternalRoutineInvocationException","","`39000`",6,null],[13,"InvalidSqlstateReturned","","`39001`",6,null],[13,"NullValueNotAllowedExternalRoutine","","`39004`",6,null],[13,"TriggerProtocolViolated","","`39P01`",6,null],[13,"SrfProtocolViolated","","`39P02`",6,null],[13,"SavepointException","","`3B000`",6,null],[13,"InvalidSavepointException","","`3B001`",6,null],[13,"InvalidCatalogName","","`3D000`",6,null],[13,"InvalidSchemaName","","`3F000`",6,null],[13,"TransactionRollback","","`40000`",6,null],[13,"TransactionIntegrityConstraintViolation","","`40002`",6,null],[13,"SerializationFailure","","`40001`",6,null],[13,"StatementCompletionUnknown","","`40003`",6,null],[13,"DeadlockDetected","","`40P01`",6,null],[13,"SyntaxErrorOrAccessRuleViolation","","`42000`",6,null],[13,"SyntaxError","","`42601`",6,null],[13,"InsufficientPrivilege","","`42501`",6,null],[13,"CannotCoerce","","`42846`",6,null],[13,"GroupingError","","`42803`",6,null],[13,"WindowingError","","`42P20`",6,null],[13,"InvalidRecursion","","`42P19`",6,null],[13,"InvalidForeignKey","","`42830`",6,null],[13,"InvalidName","","`42602`",6,null],[13,"NameTooLong","","`42622`",6,null],[13,"ReservedName","","`42939`",6,null],[13,"DatatypeMismatch","","`42804`",6,null],[13,"IndeterminateDatatype","","`42P18`",6,null],[13,"CollationMismatch","","`42P21`",6,null],[13,"IndeterminateCollation","","`42P22`",6,null],[13,"WrongObjectType","","`42809`",6,null],[13,"UndefinedColumn","","`42703`",6,null],[13,"UndefinedFunction","","`42883`",6,null],[13,"UndefinedTable","","`42P01`",6,null],[13,"UndefinedParameter","","`42P02`",6,null],[13,"UndefinedObject","","`42704`",6,null],[13,"DuplicateColumn","","`42701`",6,null],[13,"DuplicateCursor","","`42P03`",6,null],[13,"DuplicateDatabase","","`42P04`",6,null],[13,"DuplicateFunction","","`42723`",6,null],[13,"DuplicatePreparedStatement","","`42P05`",6,null],[13,"DuplicateSchema","","`42P06`",6,null],[13,"DuplicateTable","","`42P07`",6,null],[13,"DuplicateAliaas","","`42712`",6,null],[13,"DuplicateObject","","`42710`",6,null],[13,"AmbiguousColumn","","`42702`",6,null],[13,"AmbiguousFunction","","`42725`",6,null],[13,"AmbiguousParameter","","`42P08`",6,null],[13,"AmbiguousAlias","","`42P09`",6,null],[13,"InvalidColumnReference","","`42P10`",6,null],[13,"InvalidColumnDefinition","","`42611`",6,null],[13,"InvalidCursorDefinition","","`42P11`",6,null],[13,"InvalidDatabaseDefinition","","`42P12`",6,null],[13,"InvalidFunctionDefinition","","`42P13`",6,null],[13,"InvalidPreparedStatementDefinition","","`42P14`",6,null],[13,"InvalidSchemaDefinition","","`42P15`",6,null],[13,"InvalidTableDefinition","","`42P16`",6,null],[13,"InvalidObjectDefinition","","`42P17`",6,null],[13,"WithCheckOptionViolation","","`44000`",6,null],[13,"InsufficientResources","","`53000`",6,null],[13,"DiskFull","","`53100`",6,null],[13,"OutOfMemory","","`53200`",6,null],[13,"TooManyConnections","","`53300`",6,null],[13,"ConfigurationLimitExceeded","","`53400`",6,null],[13,"ProgramLimitExceeded","","`54000`",6,null],[13,"StatementTooComplex","","`54001`",6,null],[13,"TooManyColumns","","`54011`",6,null],[13,"TooManyArguments","","`54023`",6,null],[13,"ObjectNotInPrerequisiteState","","`55000`",6,null],[13,"ObjectInUse","","`55006`",6,null],[13,"CantChangeRuntimeParam","","`55P02`",6,null],[13,"LockNotAvailable","","`55P03`",6,null],[13,"OperatorIntervention","","`57000`",6,null],[13,"QueryCanceled","","`57014`",6,null],[13,"AdminShutdown","","`57P01`",6,null],[13,"CrashShutdown","","`57P02`",6,null],[13,"CannotConnectNow","","`57P03`",6,null],[13,"DatabaseDropped","","`57P04`",6,null],[13,"SystemError","","`58000`",6,null],[13,"IoError","","`58030`",6,null],[13,"UndefinedFile","","`58P01`",6,null],[13,"DuplicateFile","","`58P02`",6,null],[13,"ConfigFileError","","`F0000`",6,null],[13,"LockFileExists","","`F0001`",6,null],[13,"FdwError","","`HV000`",6,null],[13,"FdwColumnNameNotFound","","`HV005`",6,null],[13,"FdwDynamicParameterValueNeeded","","`HV002`",6,null],[13,"FdwFunctionSequenceError","","`HV010`",6,null],[13,"FdwInconsistentDescriptorInformation","","`HV021`",6,null],[13,"FdwInvalidAttributeValue","","`HV024`",6,null],[13,"FdwInvalidColumnName","","`HV007`",6,null],[13,"FdwInvalidColumnNumber","","`HV008`",6,null],[13,"FdwInvalidDataType","","`HV004`",6,null],[13,"FdwInvalidDataTypeDescriptors","","`HV006`",6,null],[13,"FdwInvalidDescriptorFieldIdentifier","","`HV091`",6,null],[13,"FdwInvalidHandle","","`HV00B`",6,null],[13,"FdwInvalidOptionIndex","","`HV00C`",6,null],[13,"FdwInvalidOptionName","","`HV00D`",6,null],[13,"FdwInvalidStringLengthOrBufferLength","","`HV090`",6,null],[13,"FdwInvalidStringFormat","","`HV00A`",6,null],[13,"FdwInvalidUseOfNullPointer","","`HV009`",6,null],[13,"FdwTooManyHandles","","`HV014`",6,null],[13,"FdwOutOfMemory","","`HV001`",6,null],[13,"FdwNoSchemas","","`HV00P`",6,null],[13,"FdwOptionNameNotFound","","`HV00J`",6,null],[13,"FdwReplyHandle","","`HV00K`",6,null],[13,"FdwSchemaNotFound","","`HV00Q`",6,null],[13,"FdwTableNotFound","","`HV00R`",6,null],[13,"FdwUnableToCreateExcecution","","`HV00L`",6,null],[13,"FdwUnableToCreateReply","","`HV00M`",6,null],[13,"FdwUnableToEstablishConnection","","`HV00N`",6,null],[13,"PlpgsqlError","","`P0000`",6,null],[13,"RaiseException","","`P0001`",6,null],[13,"NoDataFound","","`P0002`",6,null],[13,"TooManyRows","","`P0003`",6,null],[13,"InternalError","","`XX000`",6,null],[13,"DataCorrupted","","`XX001`",6,null],[13,"IndexCorrupted","","`XX002`",6,null],[13,"Unknown","","An unknown code",6,null],[4,"ConnectError","","Reasons a new Postgres connection could fail.",null,null],[13,"BadConnectParams","","An error creating `ConnectParams`.",7,null],[13,"MissingUser","","The `ConnectParams` was missing a user.",7,null],[13,"DbError","","An error from the Postgres server itself.",7,null],[13,"MissingPassword","","A password was required but not provided in the `ConnectParams`.",7,null],[13,"UnsupportedAuthentication","","The Postgres server requested an authentication method not supported\nby the driver.",7,null],[13,"NoSslSupport","","The Postgres server does not support SSL encryption.",7,null],[13,"SslError","","An error initializing the SSL session.",7,null],[13,"IoError","","An error communicating with the server.",7,null],[4,"ErrorPosition","","Represents the position of an error in a query.",null,null],[13,"Normal","","A position in the original query.",8,null],[13,"Internal","","A position in an internally generated query.",8,null],[12,"position","postgres::error::ErrorPosition","The byte position.",8,null],[12,"query","","A query generated by the Postgres server.",8,null],[4,"Error","postgres::error","An error encountered when communicating with the Postgres server.",null,null],[13,"DbError","","An error reported by the Postgres server.",9,null],[13,"IoError","","An error communicating with the Postgres server.",9,null],[13,"WrongType","","An attempt was made to convert between incompatible Rust and Postgres\ntypes.",9,null],[13,"InvalidColumn","","An attempt was made to read from a column that does not exist.",9,null],[13,"Conversion","","An error converting between Postgres and Rust types.",9,null],[11,"clone","","",6,{"inputs":[{"name":"sqlstate"}],"output":{"name":"sqlstate"}}],[11,"eq","","",6,{"inputs":[{"name":"sqlstate"},{"name":"sqlstate"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"sqlstate"},{"name":"sqlstate"}],"output":{"name":"bool"}}],[11,"from_code","","Creates a `SqlState` from its error code.",6,{"inputs":[{"name":"sqlstate"},{"name":"string"}],"output":{"name":"sqlstate"}}],[11,"code","","Returns the error code corresponding to the `SqlState`.",6,{"inputs":[{"name":"sqlstate"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"sqlstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"dberror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"dberror"},{"name":"dberror"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"dberror"},{"name":"dberror"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"dberror"}],"output":{"name":"dberror"}}],[11,"severity","","The field contents are ERROR, FATAL, or PANIC (in an error message),\nor WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message), or a\nlocalized translation of one of these.",10,{"inputs":[{"name":"dberror"}],"output":{"name":"str"}}],[11,"code","","The SQLSTATE code for the error.",10,{"inputs":[{"name":"dberror"}],"output":{"name":"sqlstate"}}],[11,"message","","The primary human-readable error message. This should be accurate but\nterse (typically one line).",10,{"inputs":[{"name":"dberror"}],"output":{"name":"str"}}],[11,"detail","","An optional secondary error message carrying more detail about the\nproblem. Might run to multiple lines.",10,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"hint","","An optional suggestion what to do about the problem. This is intended\nto differ from Detail in that it offers advice (potentially\ninappropriate) rather than hard facts. Might run to multiple lines.",10,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"position","","An optional error cursor position into either the original query string\nor an internally generated query.",10,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"where_","","An indication of the context in which the error occurred. Presently\nthis includes a call stack traceback of active procedural language\nfunctions and internally-generated queries. The trace is one entry per\nline, most recent first.",10,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"schema","","If the error was associated with a specific database object, the name\nof the schema containing that object, if any. (PostgreSQL 9.3+)",10,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"table","","If the error was associated with a specific table, the name of the\ntable. (Refer to the schema name field for the name of the table's\nschema.) (PostgreSQL 9.3+)",10,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"column","","If the error was associated with a specific table column, the name of\nthe column. (Refer to the schema and table name fields to identify the\ntable.) (PostgreSQL 9.3+)",10,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"datatype","","If the error was associated with a specific data type, the name of the\ndata type. (Refer to the schema name field for the name of the data\ntype's schema.) (PostgreSQL 9.3+)",10,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"constraint","","If the error was associated with a specific constraint, the name of the\nconstraint. Refer to fields listed above for the associated table or\ndomain. (For this purpose, indexes are treated as constraints, even if\nthey weren't created with constraint syntax.) (PostgreSQL 9.3+)",10,{"inputs":[{"name":"dberror"}],"output":{"name":"option"}}],[11,"file","","The file name of the source-code location where the error was reported.",10,{"inputs":[{"name":"dberror"}],"output":{"name":"str"}}],[11,"line","","The line number of the source-code location where the error was\nreported.",10,{"inputs":[{"name":"dberror"}],"output":{"name":"u32"}}],[11,"routine","","The name of the source-code routine reporting the error.",10,{"inputs":[{"name":"dberror"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"dberror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"dberror"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"connecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"connecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"connecterror"}],"output":{"name":"str"}}],[11,"cause","","",7,{"inputs":[{"name":"connecterror"}],"output":{"name":"option"}}],[11,"from","","",7,{"inputs":[{"name":"connecterror"},{"name":"error"}],"output":{"name":"connecterror"}}],[11,"from","","",7,{"inputs":[{"name":"connecterror"},{"name":"dberror"}],"output":{"name":"connecterror"}}],[11,"from","","",7,{"inputs":[{"name":"connecterror"},{"name":"error"}],"output":{"name":"connecterror"}}],[11,"fmt","","",8,{"inputs":[{"name":"errorposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"errorposition"},{"name":"errorposition"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"errorposition"},{"name":"errorposition"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"errorposition"}],"output":{"name":"errorposition"}}],[11,"fmt","","",9,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",9,{"inputs":[{"name":"error"},{"name":"dberror"}],"output":{"name":"error"}}],[11,"from","","",9,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",9,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",11,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[0,"io","postgres","Types and traits for SSL adaptors.",null,null],[3,"Stream","postgres::io","A connection to the Postgres server.",null,null],[8,"StreamWrapper","","A trait implemented by SSL adaptors.",null,null],[10,"get_ref","","Returns a reference to the underlying `Stream`.",12,{"inputs":[{"name":"streamwrapper"}],"output":{"name":"stream"}}],[10,"get_mut","","Returns a mutable reference to the underlying `Stream`.",12,{"inputs":[{"name":"streamwrapper"}],"output":{"name":"stream"}}],[8,"NegotiateSsl","","A trait implemented by types that can negotiate SSL over a Postgres stream.",null,null],[10,"negotiate_ssl","","Negotiates an SSL session, returning a wrapper around the provided\nstream.",13,{"inputs":[{"name":"negotiatessl"},{"name":"str"},{"name":"stream"}],"output":{"name":"result"}}],[0,"rows","postgres","Query result rows.",null,null],[3,"Rows","postgres::rows","The resulting rows of a query.",null,null],[3,"Iter","","An iterator over `Row`s.",null,null],[3,"IntoIter","","An owning iterator over `Row`s.",null,null],[3,"Row","","A single result row of a query.",null,null],[3,"LazyRows","","A lazily-loaded iterator over the resulting rows of a query.",null,null],[8,"RowIndex","","A trait implemented by types that can index into columns of a row.",null,null],[10,"idx","","Returns the index of the appropriate column, or `None` if no such\ncolumn exists.",14,{"inputs":[{"name":"rowindex"},{"name":"statement"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"rows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"columns","","Returns a slice describing the columns of the `Rows`.",15,null],[11,"len","","Returns the number of rows present.",15,{"inputs":[{"name":"rows"}],"output":{"name":"usize"}}],[11,"get","","Returns a specific `Row`.",15,{"inputs":[{"name":"rows"},{"name":"usize"}],"output":{"name":"row"}}],[11,"iter","","Returns an iterator over the `Row`s.",15,{"inputs":[{"name":"rows"}],"output":{"name":"iter"}}],[11,"into_iter","","",15,{"inputs":[{"name":"rows"}],"output":{"name":"intoiter"}}],[11,"next","","",16,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next_back","","",16,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",17,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"row"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of values in the row.",18,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[11,"columns","","Returns a slice describing the columns of the `Row`.",18,null],[11,"get_opt","","Retrieves the contents of a field of the row.",18,{"inputs":[{"name":"row"},{"name":"i"}],"output":{"name":"result"}}],[11,"get","","Retrieves the contents of a field of the row.",18,{"inputs":[{"name":"row"},{"name":"i"}],"output":{"name":"t"}}],[11,"get_bytes","","Retrieves the specified field as a raw buffer of Postgres data.",18,{"inputs":[{"name":"row"},{"name":"i"}],"output":{"name":"option"}}],[11,"drop","","",19,{"inputs":[{"name":"lazyrows"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"lazyrows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"columns","","Returns a slice describing the columns of the `LazyRows`.",19,null],[11,"finish","","Consumes the `LazyRows`, cleaning up associated state.",19,{"inputs":[{"name":"lazyrows"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"lazyrows"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[0,"stmt","postgres","Prepared statements",null,null],[3,"Statement","postgres::stmt","A prepared statement.",null,null],[3,"Column","","Information about a column of the result of a query.",null,null],[3,"CopyInfo","","A struct containing information relevant for a `COPY` operation.",null,null],[4,"Format","","The format of a portion of COPY query data.",null,null],[13,"Text","","A text based format.",20,null],[13,"Binary","","A binary format.",20,null],[8,"ReadWithInfo","","Like `Read` except that a `CopyInfo` object is provided as well.",null,null],[10,"read_with_info","","Like `Read::read`.",21,null],[8,"WriteWithInfo","","Like `Write` except that a `CopyInfo` object is provided as well.",null,null],[10,"write_with_info","","Like `Write::write`.",22,null],[11,"fmt","","",23,{"inputs":[{"name":"statement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",23,{"inputs":[{"name":"statement"}],"output":null}],[11,"param_types","","Returns a slice containing the expected parameter types.",23,null],[11,"columns","","Returns a slice describing the columns of the result of the query.",23,null],[11,"execute","","Executes the prepared statement, returning the number of rows modified.",23,null],[11,"query","","Executes the prepared statement, returning the resulting rows.",23,null],[11,"lazy_query","","Executes the prepared statement, returning a lazily loaded iterator\nover the resulting rows.",23,null],[11,"copy_in","","Executes a `COPY FROM STDIN` statement, returning the number of rows\nadded.",23,null],[11,"copy_out","","Executes a `COPY TO STDOUT` statement, passing the resulting data to\nthe provided writer and returning the number of rows received.",23,null],[11,"finish","","Consumes the statement, clearing it from the Postgres session.",23,{"inputs":[{"name":"statement"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"column"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"column"}],"output":{"name":"column"}}],[11,"eq","","",24,{"inputs":[{"name":"column"},{"name":"column"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"column"},{"name":"column"}],"output":{"name":"bool"}}],[11,"format","","Returns the format of the overall data.",25,{"inputs":[{"name":"copyinfo"}],"output":{"name":"format"}}],[11,"column_formats","","Returns the format of the individual columns.",25,null],[11,"session_info","","Returns session info for the associated connection.",25,{"inputs":[{"name":"copyinfo"}],"output":{"name":"sessioninfo"}}],[11,"name","","The name of the column.",24,{"inputs":[{"name":"column"}],"output":{"name":"str"}}],[11,"type_","","The type of the data in the column.",24,{"inputs":[{"name":"column"}],"output":{"name":"type"}}],[11,"eq","","",20,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"fmt","","",20,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"types","postgres","Traits dealing with Postgres data types",null,null],[3,"Slice","postgres::types","An adapter type mapping slices to Postgres arrays.",null,null],[3,"SessionInfo","","A structure providing information for conversion methods.",null,null],[3,"Other","","Information about an unknown type.",null,null],[3,"WasNull","","An error indicating that a `NULL` Postgres value was passed to a `FromSql`\nimplementation that does not support `NULL` values.",null,null],[4,"Kind","","Represents the kind of a Postgres type.",null,null],[13,"Simple","","A simple type like `VARCHAR` or `INTEGER`.",26,null],[13,"Array","","An array type along with the type of its elements.",26,null],[13,"Range","","A range type along with the type of its elements.",26,null],[4,"Type","","A Postgres type.",null,null],[13,"Bool","","BOOL - boolean, 'true'/'false'",27,null],[13,"Bytea","","BYTEA - variable-length string, binary values escaped",27,null],[13,"Char","","\"char\" - single character",27,null],[13,"Name","","NAME - 63-byte type for storing system identifiers",27,null],[13,"Int8","","INT8/BIGINT - ~18 digit integer, 8-byte storage",27,null],[13,"Int2","","INT2/SMALLINT - -32 thousand to 32 thousand, 2-byte storage",27,null],[13,"Int2Vector","","INT2VECTOR - array of int2, used in system tables",27,null],[13,"Int4","","INT4/INT - -2 billion to 2 billion integer, 4-byte storage",27,null],[13,"Regproc","","REGPROC - registered procedure",27,null],[13,"Text","","TEXT - variable-length string, no limit specified",27,null],[13,"Oid","","OID - object identifier(oid), maximum 4 billion",27,null],[13,"Tid","","TID - (block, offset), physical location of tuple",27,null],[13,"Xid","","XID - transaction id",27,null],[13,"Cid","","CID - command identifier type, sequence in transaction id",27,null],[13,"OidVector","","OIDVECTOR - array of oids, used in system tables",27,null],[13,"PgType","","PG_TYPE",27,null],[13,"PgAttribute","","PG_ATTRIBUTE",27,null],[13,"PgProc","","PG_PROC",27,null],[13,"PgClass","","PG_CLASS",27,null],[13,"Json","","JSON",27,null],[13,"Xml","","XML - XML content",27,null],[13,"XmlArray","","XML[]",27,null],[13,"PgNodeTree","","PG_NODE_TREE - string representing an internal node tree",27,null],[13,"JsonArray","","JSON[]",27,null],[13,"Smgr","","SMGR - storage manager",27,null],[13,"Point","","POINT - geometric point '(x, y)'",27,null],[13,"Lseg","","LSEG - geometric line segment '(pt1,pt2)'",27,null],[13,"Path","","PATH - geometric path '(pt1,...)'",27,null],[13,"Box","","BOX - geometric box '(lower left,upper right)'",27,null],[13,"Polygon","","POLYGON - geometric polygon '(pt1,...)'",27,null],[13,"Line","","LINE - geometric line",27,null],[13,"LineArray","","LINE[]",27,null],[13,"Cidr","","CIDR - network IP address/netmask, network address",27,null],[13,"CidrArray","","CIDR[]",27,null],[13,"Float4","","FLOAT4/REAL - single-precision floating point number, 4-byte storage",27,null],[13,"Float8","","FLOAT8/DOUBLE PRECISION - double-precision floating point number, 8-byte storage",27,null],[13,"Abstime","","ABSTIME - absolute, limited-range date and time (Unix system time)",27,null],[13,"Reltime","","RELTIME - relative, limited-range date and time (Unix delta time)",27,null],[13,"Tinterval","","TINTERVAL - (abstime,abstime), time interval",27,null],[13,"Unknown","","UNKNOWN",27,null],[13,"Circle","","CIRCLE - geometric circle '(center,radius)'",27,null],[13,"CircleArray","","CIRCLE[]",27,null],[13,"Money","","MONEY - monetary amounts, $d,ddd.cc",27,null],[13,"MoneyArray","","MONEY[]",27,null],[13,"Macaddr","","MACADDR - XX:XX:XX:XX:XX:XX, MAC address",27,null],[13,"Inet","","INET - IP address/netmask, host address, netmask optional",27,null],[13,"BoolArray","","BOOL[]",27,null],[13,"ByteaArray","","BYTEA[]",27,null],[13,"CharArray","","\"char\"[]",27,null],[13,"NameArray","","NAME[]",27,null],[13,"Int2Array","","INT2[]",27,null],[13,"Int2VectorArray","","INT2VECTOR[]",27,null],[13,"Int4Array","","INT4[]",27,null],[13,"RegprocArray","","REGPROC[]",27,null],[13,"TextArray","","TEXT[]",27,null],[13,"TidArray","","TID[]",27,null],[13,"XidArray","","XID[]",27,null],[13,"CidArray","","CID[]",27,null],[13,"OidVectorArray","","OIDVECTOR[]",27,null],[13,"BpcharArray","","BPCHAR[]",27,null],[13,"VarcharArray","","VARCHAR[]",27,null],[13,"Int8Array","","INT8[]",27,null],[13,"PointArray","","POINT[]",27,null],[13,"LsegArray","","LSEG[]",27,null],[13,"PathArray","","PATH[]",27,null],[13,"BoxArray","","BOX[]",27,null],[13,"Float4Array","","FLOAT4[]",27,null],[13,"Float8Array","","FLOAT8[]",27,null],[13,"AbstimeArray","","ABSTIME[]",27,null],[13,"ReltimeArray","","RELTIME[]",27,null],[13,"TintervalArray","","TINTERVAL[]",27,null],[13,"PolygonArray","","POLYGON[]",27,null],[13,"OidArray","","OID[]",27,null],[13,"Aclitem","","ACLITEM - access control list",27,null],[13,"AclitemArray","","ACLITEM[]",27,null],[13,"MacaddrArray","","MACADDR[]",27,null],[13,"InetArray","","INET[]",27,null],[13,"Bpchar","","BPCHAR - char(length), blank-padded string, fixed storage length",27,null],[13,"Varchar","","VARCHAR - varchar(length), non-blank-padded string, variable storage length",27,null],[13,"Date","","DATE - date",27,null],[13,"Time","","TIME - time of day",27,null],[13,"Timestamp","","TIMESTAMP - date and time",27,null],[13,"TimestampArray","","TIMESTAMP[]",27,null],[13,"DateArray","","DATE[]",27,null],[13,"TimeArray","","TIME[]",27,null],[13,"TimestampTZ","","TIMESTAMPTZ - date and time with time zone",27,null],[13,"TimestampTZArray","","TIMESTAMPTZ[]",27,null],[13,"Interval","","INTERVAL - @ &lt;number&gt; &lt;units&gt;, time interval",27,null],[13,"IntervalArray","","INTERVAL[]",27,null],[13,"NumericArray","","NUMERIC[]",27,null],[13,"CstringArray","","CSTRING[]",27,null],[13,"Timetz","","TIMETZ - time of day with time zone",27,null],[13,"TimetzArray","","TIMETZ[]",27,null],[13,"Bit","","BIT - fixed-length bit string",27,null],[13,"BitArray","","BIT[]",27,null],[13,"Varbit","","VARBIT - variable-length bit string",27,null],[13,"VarbitArray","","VARBIT[]",27,null],[13,"Numeric","","NUMERIC - numeric(precision, decimal), arbitrary precision number",27,null],[13,"Refcursor","","REFCURSOR - reference to cursor (portal name)",27,null],[13,"RefcursorArray","","REFCURSOR[]",27,null],[13,"Regprocedure","","REGPROCEDURE - registered procedure (with args)",27,null],[13,"Regoper","","REGOPER - registered operator",27,null],[13,"Regoperator","","REGOPERATOR - registered operator (with args)",27,null],[13,"Regclass","","REGCLASS - registered class",27,null],[13,"Regtype","","REGTYPE - registered type",27,null],[13,"RegprocedureArray","","REGPROCEDURE[]",27,null],[13,"RegoperArray","","REGOPER[]",27,null],[13,"RegoperatorArray","","REGOPERATOR[]",27,null],[13,"RegclassArray","","REGCLASS[]",27,null],[13,"RegtypeArray","","REGTYPE[]",27,null],[13,"Record","","RECORD",27,null],[13,"Cstring","","CSTRING",27,null],[13,"Any","","ANY",27,null],[13,"AnyArray","","ANY[]",27,null],[13,"Void","","VOID",27,null],[13,"Trigger","","TRIGGER",27,null],[13,"LanguageHandler","","LANGUAGE_HANDLER",27,null],[13,"Internal","","INTERNAL",27,null],[13,"Opaque","","OPAQUE",27,null],[13,"Anyelement","","ANYELEMENT",27,null],[13,"RecordArray","","RECORD[]",27,null],[13,"Anynonarray","","ANYNONARRAY",27,null],[13,"TxidSnapshotArray","","TXID_SNAPSHOT[]",27,null],[13,"Uuid","","UUID - UUID datatype",27,null],[13,"TxidSnapshot","","TXID_SNAPSHOT - txid snapshot",27,null],[13,"UuidArray","","UUID[]",27,null],[13,"FdwHandler","","FDW_HANDLER",27,null],[13,"PgLsn","","PG_LSN - PostgreSQL LSN datatype",27,null],[13,"PgLsnArray","","PG_LSN[]",27,null],[13,"Anyenum","","ANYENUM",27,null],[13,"Tsvector","","TSVECTOR - text representation for text search",27,null],[13,"Tsquery","","TSQUERY - query representation for text search",27,null],[13,"Gtsvector","","GTSVECTOR - GiST index internal text representation for text search",27,null],[13,"TsvectorArray","","TSVECTOR[]",27,null],[13,"GtsvectorArray","","GTSVECTOR[]",27,null],[13,"TsqueryArray","","TSQUERY[]",27,null],[13,"Regconfig","","REGCONFIG - registered text search configuration",27,null],[13,"RegconfigArray","","REGCONFIG[]",27,null],[13,"Regdictionary","","REGDICTIONARY - registered text search dictionary",27,null],[13,"RegdictionaryArray","","REGDICTIONARY[]",27,null],[13,"Jsonb","","JSONB",27,null],[13,"Anyrange","","ANYRANGE",27,null],[13,"JsonbArray","","JSONB[]",27,null],[13,"Int4Range","","INT4RANGE - range of integers",27,null],[13,"Int4RangeArray","","INT4RANGE[]",27,null],[13,"NumRange","","NUMRANGE - range of numerics",27,null],[13,"NumRangeArray","","NUMRANGE[]",27,null],[13,"TsRange","","TSRANGE - range of timestamps without time zone",27,null],[13,"TsRangeArray","","TSRANGE[]",27,null],[13,"TstzRange","","TSTZRANGE - range of timestamps with time zone",27,null],[13,"TstzRangeArray","","TSTZRANGE[]",27,null],[13,"DateRange","","DATERANGE - range of dates",27,null],[13,"DateRangeArray","","DATERANGE[]",27,null],[13,"Int8Range","","INT8RANGE - range of bigints",27,null],[13,"Int8RangeArray","","INT8RANGE[]",27,null],[13,"EventTrigger","","EVENT_TRIGGER",27,null],[13,"Other","","An unknown type.",27,null],[4,"IsNull","","An enum representing the nullability of a Postgres value.",null,null],[13,"Yes","","The value is NULL.",28,null],[13,"No","","The value is not NULL.",28,null],[11,"from_sql","uuid","",29,{"inputs":[{"name":"uuid"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",29,{"inputs":[{"name":"uuid"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",29,{"inputs":[{"name":"uuid"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",29,{"inputs":[{"name":"uuid"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",29,{"inputs":[{"name":"uuid"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"from_sql","time","",30,{"inputs":[{"name":"timespec"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",30,{"inputs":[{"name":"timespec"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",30,{"inputs":[{"name":"timespec"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",30,{"inputs":[{"name":"timespec"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",30,{"inputs":[{"name":"timespec"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"fmt","postgres::types","",31,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_sql_checked","","",31,{"inputs":[{"name":"slice"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"to_sql","","",31,{"inputs":[{"name":"slice"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",31,{"inputs":[{"name":"slice"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_sql","chrono::naive::datetime","",32,{"inputs":[{"name":"naivedatetime"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",32,{"inputs":[{"name":"naivedatetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",32,{"inputs":[{"name":"naivedatetime"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",32,{"inputs":[{"name":"naivedatetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",32,{"inputs":[{"name":"naivedatetime"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"from_sql","chrono::datetime","",33,{"inputs":[{"name":"datetime"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",33,{"inputs":[{"name":"datetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",33,{"inputs":[{"name":"datetime"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",33,{"inputs":[{"name":"datetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",33,{"inputs":[{"name":"datetime"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"from_sql","","",33,{"inputs":[{"name":"datetime"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",33,{"inputs":[{"name":"datetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",33,{"inputs":[{"name":"datetime"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",33,{"inputs":[{"name":"datetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",33,{"inputs":[{"name":"datetime"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"from_sql","","",33,{"inputs":[{"name":"datetime"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",33,{"inputs":[{"name":"datetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",33,{"inputs":[{"name":"datetime"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",33,{"inputs":[{"name":"datetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",33,{"inputs":[{"name":"datetime"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"from_sql","chrono::naive::date","",34,{"inputs":[{"name":"naivedate"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",34,{"inputs":[{"name":"naivedate"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",34,{"inputs":[{"name":"naivedate"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",34,{"inputs":[{"name":"naivedate"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",34,{"inputs":[{"name":"naivedate"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"from_sql","chrono::naive::time","",35,{"inputs":[{"name":"naivetime"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",35,{"inputs":[{"name":"naivetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",35,{"inputs":[{"name":"naivetime"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",35,{"inputs":[{"name":"naivetime"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",35,{"inputs":[{"name":"naivetime"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[6,"Oid","postgres::types","A Postgres OID.",null,null],[8,"FromSql","","A trait for types that can be created from a Postgres value.",null,null],[11,"from_sql_nullable","","Creates a new value of this type from a `Read`er of Postgres data.",36,{"inputs":[{"name":"fromsql"},{"name":"type"},{"name":"option"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[10,"from_sql","","Creates a new value of this type from a `Read`er of the binary format\nof the specified Postgres `Type`.",36,{"inputs":[{"name":"fromsql"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[10,"accepts","","Determines if a value of this type can be created from the specified\nPostgres `Type`.",36,{"inputs":[{"name":"fromsql"},{"name":"type"}],"output":{"name":"bool"}}],[8,"ToSql","","A trait for types that can be converted into Postgres values.",null,null],[10,"to_sql","","Converts the value of `self` into the binary format of the specified\nPostgres `Type`, writing it to `out`.",37,{"inputs":[{"name":"tosql"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[10,"accepts","","Determines if a value of this type can be converted to the specified\nPostgres `Type`.",37,{"inputs":[{"name":"tosql"},{"name":"type"}],"output":{"name":"bool"}}],[10,"to_sql_checked","","An adaptor method used internally by Rust-Postgres.",37,{"inputs":[{"name":"tosql"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"parameter","","Returns the value of the specified Postgres backend parameter, such\nas `timezone` or `server_version`.",38,{"inputs":[{"name":"sessioninfo"},{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",26,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"kind"}],"output":{"name":"kind"}}],[11,"fmt","","",26,{"inputs":[{"name":"kind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"eq","","",27,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"oid","","Returns the OID of the `Type`.",27,{"inputs":[{"name":"type"}],"output":{"name":"oid"}}],[11,"kind","","The kind of this type.",27,{"inputs":[{"name":"type"}],"output":{"name":"kind"}}],[11,"fmt","","",39,{"inputs":[{"name":"other"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"other"}],"output":{"name":"other"}}],[11,"eq","","",39,{"inputs":[{"name":"other"},{"name":"other"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"other"},{"name":"other"}],"output":{"name":"bool"}}],[11,"name","","The name of the type.",39,{"inputs":[{"name":"other"}],"output":{"name":"str"}}],[11,"oid","","The OID of this type.",39,{"inputs":[{"name":"other"}],"output":{"name":"oid"}}],[11,"kind","","The kind of this type.",39,{"inputs":[{"name":"other"}],"output":{"name":"kind"}}],[11,"clone","","",40,{"inputs":[{"name":"wasnull"}],"output":{"name":"wasnull"}}],[11,"fmt","","",40,{"inputs":[{"name":"wasnull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"wasnull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",40,{"inputs":[{"name":"wasnull"}],"output":{"name":"str"}}],[11,"from_sql_nullable","core::option","",41,{"inputs":[{"name":"option"},{"name":"type"},{"name":"option"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"from_sql","","",41,{"inputs":[{"name":"option"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",41,{"inputs":[{"name":"option"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_sql","collections::vec","",42,{"inputs":[{"name":"vec"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",42,{"inputs":[{"name":"vec"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_sql","collections::string","",43,{"inputs":[{"name":"string"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",43,{"inputs":[{"name":"string"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_sql","std::collections::hash::map","",44,{"inputs":[{"name":"hashmap"},{"name":"type"},{"name":"r"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",44,{"inputs":[{"name":"hashmap"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","core::option","",41,{"inputs":[{"name":"option"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"to_sql","","",41,{"inputs":[{"name":"option"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",41,{"inputs":[{"name":"option"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","collections::vec","",42,{"inputs":[{"name":"vec"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"to_sql","","",42,{"inputs":[{"name":"vec"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",42,{"inputs":[{"name":"vec"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","collections::string","",43,{"inputs":[{"name":"string"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"to_sql","","",43,{"inputs":[{"name":"string"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",43,{"inputs":[{"name":"string"},{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","std::collections::hash::map","",44,{"inputs":[{"name":"hashmap"},{"name":"type"},{"name":"write"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"to_sql","","",44,{"inputs":[{"name":"hashmap"},{"name":"type"},{"name":"w"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"accepts","","",44,{"inputs":[{"name":"hashmap"},{"name":"type"}],"output":{"name":"bool"}}],[0,"notification","postgres","Asynchronous notifications.",null,null],[3,"Notification","postgres::notification","An asynchronous notification.",null,null],[12,"pid","","The process ID of the notifying backend process.",45,null],[12,"channel","","The name of the channel that the notify has been raised on.",45,null],[12,"payload","","The \"payload\" string passed from the notifying process.",45,null],[3,"Notifications","","An iterator over asynchronous notifications.",null,null],[3,"Iter","","An iterator over pending notifications.",null,null],[3,"BlockingIter","","An iterator over notifications which will block if none are pending.",null,null],[11,"fmt","","",45,{"inputs":[{"name":"notification"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"notification"}],"output":{"name":"notification"}}],[11,"fmt","","",46,{"inputs":[{"name":"notifications"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of pending notifications.",46,{"inputs":[{"name":"notifications"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over pending notifications.",46,{"inputs":[{"name":"notifications"}],"output":{"name":"iter"}}],[11,"blocking_iter","","Returns an iterator over notifications, blocking until one is received\nif none are pending.",46,{"inputs":[{"name":"notifications"}],"output":{"name":"blockingiter"}}],[11,"next","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",48,{"inputs":[{"name":"blockingiter"}],"output":{"name":"option"}}],[6,"Result","postgres","A type alias of the result returned by many methods.",null,null],[8,"IntoConnectParams","","A trait implemented by types that can be converted into a `ConnectParams`.",null,null],[10,"into_connect_params","","Converts the value of `self` into a `ConnectParams`.",49,{"inputs":[{"name":"intoconnectparams"}],"output":{"name":"result"}}],[8,"HandleNotice","","Trait for types that can handle Postgres notice messages",null,null],[10,"handle_notice","","Handle a Postgres notice message",50,{"inputs":[{"name":"handlenotice"},{"name":"dberror"}],"output":null}],[8,"GenericConnection","","A trait allowing abstraction over connections and transactions",null,null],[10,"prepare","","Like `Connection::prepare`.",51,{"inputs":[{"name":"genericconnection"},{"name":"str"}],"output":{"name":"result"}}],[10,"prepare_cached","","Like `Connection::prepare_cached`.",51,{"inputs":[{"name":"genericconnection"},{"name":"str"}],"output":{"name":"result"}}],[10,"execute","","Like `Connection::execute`.",51,null],[10,"transaction","","Like `Connection::transaction`.",51,{"inputs":[{"name":"genericconnection"}],"output":{"name":"result"}}],[10,"batch_execute","","Like `Connection::batch_execute`.",51,{"inputs":[{"name":"genericconnection"},{"name":"str"}],"output":{"name":"result"}}],[10,"is_active","","Like `Connection::is_active`.",51,{"inputs":[{"name":"genericconnection"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"connecttarget"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"connecttarget"}],"output":{"name":"connecttarget"}}],[11,"fmt","","",0,{"inputs":[{"name":"userinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"userinfo"}],"output":{"name":"userinfo"}}],[11,"fmt","","",1,{"inputs":[{"name":"connectparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"connectparams"}],"output":{"name":"connectparams"}}],[11,"into_connect_params","","",1,{"inputs":[{"name":"connectparams"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"loggingnoticehandler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"loggingnoticehandler"}],"output":{"name":"loggingnoticehandler"}}],[11,"handle_notice","","",52,{"inputs":[{"name":"loggingnoticehandler"},{"name":"dberror"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"canceldata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"canceldata"}],"output":{"name":"canceldata"}}],[11,"eq","","",4,{"inputs":[{"name":"isolationlevel"},{"name":"isolationlevel"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"isolationlevel"},{"name":"isolationlevel"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"isolationlevel"}],"output":{"name":"isolationlevel"}}],[11,"fmt","","",4,{"inputs":[{"name":"isolationlevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"sslmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Creates a new connection to a Postgres database.",53,{"inputs":[{"name":"connection"},{"name":"t"},{"name":"sslmode"}],"output":{"name":"result"}}],[11,"set_notice_handler","","Sets the notice handler for the connection, returning the old handler.",53,{"inputs":[{"name":"connection"},{"name":"box"}],"output":{"name":"box"}}],[11,"notifications","","Returns a structure providing access to asynchronous notifications.",53,{"inputs":[{"name":"connection"}],"output":{"name":"notifications"}}],[11,"prepare","","Creates a new prepared statement.",53,{"inputs":[{"name":"connection"},{"name":"str"}],"output":{"name":"result"}}],[11,"prepare_cached","","Creates cached prepared statement.",53,{"inputs":[{"name":"connection"},{"name":"str"}],"output":{"name":"result"}}],[11,"transaction","","Begins a new transaction.",53,{"inputs":[{"name":"connection"}],"output":{"name":"result"}}],[11,"set_transaction_isolation","","Sets the isolation level which will be used for future transactions.",53,{"inputs":[{"name":"connection"},{"name":"isolationlevel"}],"output":{"name":"result"}}],[11,"transaction_isolation","","Returns the isolation level which will be used for future transactions.",53,{"inputs":[{"name":"connection"}],"output":{"name":"result"}}],[11,"execute","","A convenience function for queries that are only run once.",53,null],[11,"batch_execute","","Execute a sequence of SQL statements.",53,{"inputs":[{"name":"connection"},{"name":"str"}],"output":{"name":"result"}}],[11,"cancel_data","","Returns information used to cancel pending queries.",53,{"inputs":[{"name":"connection"}],"output":{"name":"canceldata"}}],[11,"parameter","","Returns the value of the specified Postgres backend parameter, such as\n`timezone` or `server_version`.",53,{"inputs":[{"name":"connection"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_desynchronized","","Returns whether or not the stream has been desynchronized due to an\nerror in the communication channel with the server.",53,{"inputs":[{"name":"connection"}],"output":{"name":"bool"}}],[11,"is_active","","Determines if the `Connection` is currently \"active\", that is, if there\nare no active transactions.",53,{"inputs":[{"name":"connection"}],"output":{"name":"bool"}}],[11,"finish","","Consumes the connection, closing it.",53,{"inputs":[{"name":"connection"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",54,{"inputs":[{"name":"transaction"}],"output":null}],[11,"prepare","","Like `Connection::prepare`.",54,{"inputs":[{"name":"transaction"},{"name":"str"}],"output":{"name":"result"}}],[11,"prepare_cached","","Like `Connection::prepare_cached`.",54,{"inputs":[{"name":"transaction"},{"name":"str"}],"output":{"name":"result"}}],[11,"execute","","Like `Connection::execute`.",54,null],[11,"batch_execute","","Like `Connection::batch_execute`.",54,{"inputs":[{"name":"transaction"},{"name":"str"}],"output":{"name":"result"}}],[11,"transaction","","Like `Connection::transaction`.",54,{"inputs":[{"name":"transaction"}],"output":{"name":"result"}}],[11,"connection","","Returns a reference to the `Transaction`'s `Connection`.",54,{"inputs":[{"name":"transaction"}],"output":{"name":"connection"}}],[11,"is_active","","Like `Connection::is_active`.",54,{"inputs":[{"name":"transaction"}],"output":{"name":"bool"}}],[11,"will_commit","","Determines if the transaction is currently set to commit or roll back.",54,{"inputs":[{"name":"transaction"}],"output":{"name":"bool"}}],[11,"set_commit","","Sets the transaction to commit at its completion.",54,{"inputs":[{"name":"transaction"}],"output":null}],[11,"set_rollback","","Sets the transaction to roll back at its completion.",54,{"inputs":[{"name":"transaction"}],"output":null}],[11,"commit","","A convenience method which consumes and commits a transaction.",54,{"inputs":[{"name":"transaction"}],"output":{"name":"result"}}],[11,"finish","","Consumes the transaction, commiting or rolling it back as appropriate.",54,{"inputs":[{"name":"transaction"}],"output":{"name":"result"}}],[11,"prepare","","",53,{"inputs":[{"name":"connection"},{"name":"str"}],"output":{"name":"result"}}],[11,"prepare_cached","","",53,{"inputs":[{"name":"connection"},{"name":"str"}],"output":{"name":"result"}}],[11,"execute","","",53,null],[11,"transaction","","",53,{"inputs":[{"name":"connection"}],"output":{"name":"result"}}],[11,"batch_execute","","",53,{"inputs":[{"name":"connection"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_active","","",53,{"inputs":[{"name":"connection"}],"output":{"name":"bool"}}],[11,"prepare","","",54,{"inputs":[{"name":"transaction"},{"name":"str"}],"output":{"name":"result"}}],[11,"prepare_cached","","",54,{"inputs":[{"name":"transaction"},{"name":"str"}],"output":{"name":"result"}}],[11,"execute","","",54,null],[11,"transaction","","",54,{"inputs":[{"name":"transaction"}],"output":{"name":"result"}}],[11,"batch_execute","","",54,{"inputs":[{"name":"transaction"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_active","","",54,{"inputs":[{"name":"transaction"}],"output":{"name":"bool"}}],[14,"accepts!","","Generates a simple implementation of `ToSql::accepts` which accepts the\ntypes passed to it.",null,null],[14,"to_sql_checked!","","Generates an implementation of `ToSql::to_sql_checked`.",null,null],[11,"read","postgres::io","",55,null],[11,"write","","",55,null],[11,"flush","","",55,{"inputs":[{"name":"stream"}],"output":{"name":"result"}}],[11,"get_ref","","",55,{"inputs":[{"name":"stream"}],"output":{"name":"stream"}}],[11,"get_mut","","",55,{"inputs":[{"name":"stream"}],"output":{"name":"stream"}}],[11,"as_raw_fd","","",55,{"inputs":[{"name":"stream"}],"output":{"name":"rawfd"}}]],"paths":[[3,"UserInfo"],[3,"ConnectParams"],[3,"CancelData"],[4,"ConnectTarget"],[4,"IsolationLevel"],[4,"SslMode"],[4,"SqlState"],[4,"ConnectError"],[4,"ErrorPosition"],[4,"Error"],[3,"DbError"],[3,"Error"],[8,"StreamWrapper"],[8,"NegotiateSsl"],[8,"RowIndex"],[3,"Rows"],[3,"Iter"],[3,"IntoIter"],[3,"Row"],[3,"LazyRows"],[4,"Format"],[8,"ReadWithInfo"],[8,"WriteWithInfo"],[3,"Statement"],[3,"Column"],[3,"CopyInfo"],[4,"Kind"],[4,"Type"],[4,"IsNull"],[3,"Uuid"],[3,"Timespec"],[3,"Slice"],[3,"NaiveDateTime"],[3,"DateTime"],[3,"NaiveDate"],[3,"NaiveTime"],[8,"FromSql"],[8,"ToSql"],[3,"SessionInfo"],[3,"Other"],[3,"WasNull"],[4,"Option"],[3,"Vec"],[3,"String"],[3,"HashMap"],[3,"Notification"],[3,"Notifications"],[3,"Iter"],[3,"BlockingIter"],[8,"IntoConnectParams"],[8,"HandleNotice"],[8,"GenericConnection"],[3,"LoggingNoticeHandler"],[3,"Connection"],[3,"Transaction"],[3,"Stream"]]};
searchIndex['chrono'] = {"items":[[0,"","chrono","# Chrono 0.2.16",null,null],[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",0,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"fmt","time","",1,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","time::duration","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","time::sys::inner::unix","",2,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","",2,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"sub","","",2,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",2,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",2,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"hash","time","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",3,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",3,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",3,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",4,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",4,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",4,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",5,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",5,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",5,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",5,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",5,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",6,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",6,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",6,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",6,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",6,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",6,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",7,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"fmt"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week (DOW).",null,null],[13,"Mon","","Monday.",9,null],[13,"Tue","","Tuesday.",9,null],[13,"Wed","","Wednesday.",9,null],[13,"Thu","","Thursday.",9,null],[13,"Fri","","Friday.",9,null],[13,"Sat","","Saturday.",9,null],[13,"Sun","","Sunday.",9,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.",10,null],[13,"Single","","Given local time representation has a single unique result.",10,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.",10,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don't need the local time.\nIt is also used as an offset (which is also a dummy type).",null,null],[11,"eq","","",11,{"inputs":[{"name":"utc"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"utc"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"decode","","",11,{"inputs":[{"name":"utc"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"utc"},{"name":"__s"}],"output":{"name":"result"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",11,{"inputs":[{"name":"utc"}],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",11,{"inputs":[{"name":"utc"}],"output":{"name":"datetime"}}],[11,"from_offset","","",11,{"inputs":[{"name":"utc"},{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",11,{"inputs":[{"name":"utc"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",11,{"inputs":[{"name":"utc"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",11,{"inputs":[{"name":"utc"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",11,{"inputs":[{"name":"utc"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"local_minus_utc","","",11,{"inputs":[{"name":"utc"}],"output":{"name":"duration"}}],[11,"fmt","","",11,{"inputs":[{"name":"utc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"utc"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"eq","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"decode","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"__s"}],"output":{"name":"result"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",12,{"inputs":[{"name":"fixedoffset"},{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",12,{"inputs":[{"name":"fixedoffset"},{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",12,{"inputs":[{"name":"fixedoffset"},{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",12,{"inputs":[{"name":"fixedoffset"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_offset","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"local_minus_utc","","",12,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"duration"}}],[11,"fmt","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"fixedoffset"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",13,{"inputs":[{"name":"local"}],"output":{"name":"local"}}],[11,"decode","","",13,{"inputs":[{"name":"local"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"local"},{"name":"__s"}],"output":{"name":"result"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",13,{"inputs":[{"name":"local"}],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",13,{"inputs":[{"name":"local"}],"output":{"name":"datetime"}}],[11,"from_offset","","",13,{"inputs":[{"name":"local"},{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",13,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",13,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",13,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",13,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",13,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",13,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",13,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",13,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",14,{"inputs":[{"name":"offset"}],"output":{"name":"duration"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.",15,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",15,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",15,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.",15,{"inputs":[{"name":"timezone"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.",15,{"inputs":[{"name":"timezone"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and\nreturns a `DateTime` with the current offset.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,{"inputs":[{"name":"timezone"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",15,{"inputs":[{"name":"timezone"},{"name":"offset"}],"output":{"name":"self"}}],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",15,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",15,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",15,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",15,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",15,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"offset"}}],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",15,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"offset"}}],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",15,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",15,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"fmt","","",10,{"inputs":[{"name":"localresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"localresult"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"localresult"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"localresult"}],"output":{"name":"localresult"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",10,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",10,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",10,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",10,{"inputs":[{"name":"localresult"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",10,{"inputs":[{"name":"localresult"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",10,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",10,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",10,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",10,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or fails accordingly.",10,{"inputs":[{"name":"localresult"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone.\nAllows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate`.",null,null],[17,"MAX","","The maximum possible `NaiveDate`.",null,null],[11,"clone","","",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"cmp","","",16,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"decode","","",16,{"inputs":[{"name":"naivedate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"naivedate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_ymd","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",16,{"inputs":[{"name":"naivedate"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",16,{"inputs":[{"name":"naivedate"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from year and day of year (DOY or \"ordinal\").\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",16,{"inputs":[{"name":"naivedate"},{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from year and day of year (DOY or \"ordinal\").\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",16,{"inputs":[{"name":"naivedate"},{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",16,{"inputs":[{"name":"naivedate"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",16,{"inputs":[{"name":"naivedate"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",16,{"inputs":[{"name":"naivedate"},{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",16,{"inputs":[{"name":"naivedate"},{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,{"inputs":[{"name":"naivedate"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",16,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",16,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",16,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",16,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",16,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",16,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",16,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",16,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",16,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next date.",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next date.",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the prior date.",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the prior date.",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"option"}}],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",16,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",16,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the date with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",16,{"inputs":[{"name":"naivedate"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,{"inputs":[{"name":"naivedate"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"i32"}}],[11,"month","","",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"month0","","",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"day","","",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"day0","","",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"ordinal","","",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"ordinal0","","",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"weekday","","",16,{"inputs":[{"name":"naivedate"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",16,null],[11,"with_year","","",16,{"inputs":[{"name":"naivedate"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",16,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",16,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",16,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",16,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",16,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",16,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",16,{"inputs":[{"name":"naivedate"},{"name":"h"}],"output":null}],[11,"add","","",16,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"sub","","",16,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"duration"}}],[11,"sub","","",16,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"fmt","","",16,{"inputs":[{"name":"naivedate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"naivedate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"naivedate"},{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.",null,null],[11,"clone","","",17,{"inputs":[{"name":"naivetime"}],"output":{"name":"naivetime"}}],[11,"cmp","","",17,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"decode","","",17,{"inputs":[{"name":"naivetime"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"naivetime"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",17,{"inputs":[{"name":"naivetime"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,{"inputs":[{"name":"naivetime"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items.",17,{"inputs":[{"name":"naivetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,{"inputs":[{"name":"naivetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","",17,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"minute","","",17,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"second","","",17,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",17,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",17,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",17,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",17,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",17,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","",17,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"hash","","",17,{"inputs":[{"name":"naivetime"},{"name":"h"}],"output":null}],[11,"add","","",17,{"inputs":[{"name":"naivetime"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"sub","","",17,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"duration"}}],[11,"sub","","",17,{"inputs":[{"name":"naivetime"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"fmt","","",17,{"inputs":[{"name":"naivetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"naivetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"naivetime"},{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"clone","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivedatetime"}}],[11,"cmp","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"decode","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components.\nEquivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.",18,{"inputs":[{"name":"naivedatetime"},{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.",18,{"inputs":[{"name":"naivedatetime"},{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::from_timestamp`.",18,{"inputs":[{"name":"naivedatetime"},{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","*Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`.",18,{"inputs":[{"name":"naivedatetime"},{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",18,{"inputs":[{"name":"naivedatetime"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka \"UNIX timestamp\").\nNote that this does *not* account for the timezone!",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i64"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::timestamp`.",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i64"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",18,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",18,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",18,{"inputs":[{"name":"naivedatetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",18,{"inputs":[{"name":"naivedatetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i32"}}],[11,"month","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"month0","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"day","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"day0","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"ordinal","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"ordinal0","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"weekday","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",18,null],[11,"with_year","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"minute","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"second","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",18,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"h"}],"output":null}],[11,"add","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"duration"}}],[11,"sub","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"fmt","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"naivedatetime"},{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",19,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"decode","","",19,{"inputs":[{"name":"date"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"date"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.",19,{"inputs":[{"name":"date"},{"name":"naivedate"},{"name":"offset"}],"output":{"name":"date"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",19,{"inputs":[{"name":"date"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",19,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",19,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",19,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",19,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",19,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",19,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",19,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",19,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",19,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",19,{"inputs":[{"name":"date"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",19,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",19,{"inputs":[{"name":"date"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",19,{"inputs":[{"name":"date"}],"output":{"name":"offset"}}],[11,"timezone","","Retrieves an associated time zone.",19,{"inputs":[{"name":"date"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).",19,{"inputs":[{"name":"date"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add","","Adds given `Duration` to the current date.",19,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date.",19,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",19,{"inputs":[{"name":"date"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",19,{"inputs":[{"name":"date"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",19,{"inputs":[{"name":"date"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,{"inputs":[{"name":"date"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",19,{"inputs":[{"name":"date"}],"output":{"name":"i32"}}],[11,"month","","",19,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"month0","","",19,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"day","","",19,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"day0","","",19,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"ordinal","","",19,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"ordinal0","","",19,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"weekday","","",19,{"inputs":[{"name":"date"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",19,null],[11,"with_year","","",19,{"inputs":[{"name":"date"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",19,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",19,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",19,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",19,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",19,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",19,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",19,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",19,{"inputs":[{"name":"date"},{"name":"h"}],"output":null}],[11,"add","","",19,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"date"}}],[11,"sub","","",19,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"duration"}}],[11,"sub","","",19,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"date"}}],[11,"fmt","","",19,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"datetime"}}],[11,"decode","","",20,{"inputs":[{"name":"datetime"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"datetime"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset.\nThe local datetime should be constructed via the `TimeZone` trait.",20,{"inputs":[{"name":"datetime"},{"name":"naivedatetime"},{"name":"offset"}],"output":{"name":"datetime"}}],[11,"date","","Retrieves a date component.",20,{"inputs":[{"name":"datetime"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component.\nUnlike `date`, this is not associated to the time zone.",20,{"inputs":[{"name":"datetime"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka \"UNIX timestamp\").",20,{"inputs":[{"name":"datetime"}],"output":{"name":"i64"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated*: Same to `DateTime::timestamp`.",20,{"inputs":[{"name":"datetime"}],"output":{"name":"i64"}}],[11,"offset","","Retrieves an associated offset from UTC.",20,{"inputs":[{"name":"datetime"}],"output":{"name":"offset"}}],[11,"timezone","","Retrieves an associated time zone.",20,{"inputs":[{"name":"datetime"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `DateTime` (but will change the string representation).",20,{"inputs":[{"name":"datetime"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",20,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",20,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",20,{"inputs":[{"name":"datetime"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",20,{"inputs":[{"name":"datetime"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",20,{"inputs":[{"name":"datetime"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",20,{"inputs":[{"name":"datetime"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and\nreturns a new `DateTime` with a parsed `FixedOffset`.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",20,{"inputs":[{"name":"datetime"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",20,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",20,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",20,{"inputs":[{"name":"datetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",20,{"inputs":[{"name":"datetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"i32"}}],[11,"month","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"month0","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"day","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"day0","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"ordinal","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"ordinal0","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"weekday","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",20,null],[11,"with_year","","",20,{"inputs":[{"name":"datetime"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"minute","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"second","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",20,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",20,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",20,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",20,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",20,{"inputs":[{"name":"datetime"},{"name":"h"}],"output":null}],[11,"add","","",20,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",20,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"sub","","",20,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"fmt","","",20,{"inputs":[{"name":"datetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"datetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",20,{"inputs":[{"name":"datetime"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",20,{"inputs":[{"name":"datetime"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",20,{"inputs":[{"name":"datetime"},{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",21,null],[13,"Zero","","Zero (`0`) padding.",21,null],[13,"Space","","Space padding.",21,null],[4,"Numeric","","Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",22,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",22,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",22,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",22,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",22,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",22,null],[13,"Month","","Month (FW=PW=2).",22,null],[13,"Day","","Day of the month (FW=PW=2).",22,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",22,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",22,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",22,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",22,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",22,null],[13,"Ordinal","","Day of the year (FW=PW=3).",22,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",22,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",22,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",22,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",22,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned; see also `Fixed::Nanosecond`.",22,null],[13,"Timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC (FW=1, PW=infinity).\nFor formatting, it assumes UTC upon the absence of time zone offset.",22,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",23,null],[13,"LongMonthName","","Full month names.",23,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",23,null],[13,"LongWeekdayName","","Full day of the week names.",23,null],[13,"LowerAmPm","","AM/PM.",23,null],[13,"UpperAmPm","","AM/PM.",23,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also `Numeric::Nanosecond`.",23,null],[13,"Nanosecond3","","Fixed prescision at Nanosecond3 where 3 is the left aligned accuracy.",23,null],[13,"Nanosecond6","","Fixed prescision at Nanosecond6 where 6 is the left aligned accuracy.",23,null],[13,"Nanosecond9","","Fixed prescision at Nanosecond9 where 9 is the left aligned accuracy.",23,null],[13,"TimezoneName","","Timezone name.",23,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",23,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",23,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",23,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",23,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",23,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",23,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",24,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",24,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.",24,null],[13,"Fixed","","Fixed-format item.",24,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",24,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items.\nThey can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year. This can be negative unlike `year_{div,mod}_100` fields.",25,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",25,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",25,null],[12,"isoyear","","Year in the ISO week date. This can be negative unlike `isoyear_{div,mod}_100` fields.",25,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",25,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",25,null],[12,"month","","Month (1--12).",25,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January.\n(0--53, 1--53 or 1--52 depending on the year).",25,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January.\n(0--53, 1--53 or 1--52 depending on the year).",25,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",25,null],[12,"weekday","","Day of the week.",25,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",25,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",25,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",25,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",25,null],[12,"minute","","Minute number (0--59).",25,null],[12,"second","","Second number (0--60, accounting for leap seconds).",25,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",25,null],[12,"timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC.",25,null],[12,"offset","","Offset from the local time to UTC, in seconds.",25,null],[11,"fmt","","",25,{"inputs":[{"name":"parsed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"parsed"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"parsed"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"parsed"}],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",25,{"inputs":[{"name":"parsed"}],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",25,{"inputs":[{"name":"parsed"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",25,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",25,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",25,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields,\nexcept for the `offset` field (assumed to have a given value).\nThis is required for parsing a local time or other known-timezone inputs.",25,{"inputs":[{"name":"parsed"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",25,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",25,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields,\nwith an additional `TimeZone` used to interpret and validate the local date.",25,{"inputs":[{"name":"parsed"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",26,{"inputs":[{"name":"strftimeitems"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",26,{"inputs":[{"name":"strftimeitems"},{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",26,{"inputs":[{"name":"strftimeitems"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"fmt","","",21,{"inputs":[{"name":"pad"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"pad"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"pad"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"pad"}],"output":{"name":"pad"}}],[11,"fmt","","",22,{"inputs":[{"name":"numeric"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"numeric"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"numeric"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"numeric"}],"output":{"name":"numeric"}}],[11,"fmt","","",23,{"inputs":[{"name":"fixed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"fixed"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"fixed"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"fixed"}],"output":{"name":"fixed"}}],[11,"fmt","","",24,{"inputs":[{"name":"item"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"eq","","",27,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",27,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",27,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"delayedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",28,{"inputs":[{"name":"delayedformat"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",28,{"inputs":[{"name":"delayedformat"},{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",28,{"inputs":[{"name":"delayedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number.",29,{"inputs":[{"name":"datelike"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",29,null],[10,"month","","Returns the month number starting from 1.",29,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",29,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",29,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",29,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",29,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",29,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",29,{"inputs":[{"name":"datelike"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week.\nThe adjusted year may differ from that of the calendar date.",29,null],[10,"with_year","","Makes a new value with the year number changed.",29,{"inputs":[{"name":"datelike"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",29,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",29,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",29,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",29,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",29,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",29,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",29,{"inputs":[{"name":"datelike"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",30,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.",30,null],[10,"minute","","Returns the minute number from 0 to 59.",30,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",30,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents the leap second.",30,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",30,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",30,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",30,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",30,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",30,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[11,"fmt","","",9,{"inputs":[{"name":"weekday"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"eq","","",9,{"inputs":[{"name":"weekday"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"weekday"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"decode","","",9,{"inputs":[{"name":"weekday"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"weekday"},{"name":"__s"}],"output":{"name":"result"}}],[11,"succ","","The next day in the week.",9,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",9,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a DOW number starting from Monday = 1. (ISO 8601 weekday number)",9,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a DOW number starting from Sunday = 1.",9,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a DOW number starting from Monday = 0.",9,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a DOW number starting from Sunday = 0.",9,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"from_i64","","",9,{"inputs":[{"name":"weekday"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",9,{"inputs":[{"name":"weekday"},{"name":"u64"}],"output":{"name":"option"}}]],"paths":[[3,"Duration"],[3,"TmFmt"],[3,"SteadyTime"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[4,"Fmt"],[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"]]};
searchIndex['mysql'] = {"items":[[0,"","mysql","### rust-mysql-simple\nMysql client library implemented in rust nightly.",null,null],[0,"consts","","",null,null],[3,"StatusFlags","mysql::consts","",null,null],[3,"CapabilityFlags","","",null,null],[3,"ColumnFlags","","",null,null],[4,"Command","","Commands (u8)",null,null],[13,"COM_SLEEP","","",0,null],[13,"COM_QUIT","","",0,null],[13,"COM_INIT_DB","","",0,null],[13,"COM_QUERY","","",0,null],[13,"COM_FIELD_LIST","","",0,null],[13,"COM_CREATE_DB","","",0,null],[13,"COM_DROP_DB","","",0,null],[13,"COM_REFRESH","","",0,null],[13,"COM_SHUTDOWN","","",0,null],[13,"COM_STATISTICS","","",0,null],[13,"COM_PROCESS_INFO","","",0,null],[13,"COM_CONNECT","","",0,null],[13,"COM_PROCESS_KILL","","",0,null],[13,"COM_DEBUG","","",0,null],[13,"COM_PING","","",0,null],[13,"COM_TIME","","",0,null],[13,"COM_DELAYED_INSERT","","",0,null],[13,"COM_CHANGE_USER","","",0,null],[13,"COM_BINLOG_DUMP","","",0,null],[13,"COM_TABLE_DUMP","","",0,null],[13,"COM_CONNECT_OUT","","",0,null],[13,"COM_REGISTER_SLAVE","","",0,null],[13,"COM_STMT_PREPARE","","",0,null],[13,"COM_STMT_EXECUTE","","",0,null],[13,"COM_STMT_SEND_LONG_DATA","","",0,null],[13,"COM_STMT_CLOSE","","",0,null],[13,"COM_STMT_RESET","","",0,null],[13,"COM_SET_OPTION","","",0,null],[13,"COM_STMT_FETCH","","",0,null],[13,"COM_DAEMON","","",0,null],[13,"COM_BINLOG_DUMP_GTID","","",0,null],[13,"COM_RESET_CONNECTION","","",0,null],[4,"ColumnType","","Text protocol column types (u8)",null,null],[13,"MYSQL_TYPE_DECIMAL","","",1,null],[13,"MYSQL_TYPE_TINY","","",1,null],[13,"MYSQL_TYPE_SHORT","","",1,null],[13,"MYSQL_TYPE_LONG","","",1,null],[13,"MYSQL_TYPE_FLOAT","","",1,null],[13,"MYSQL_TYPE_DOUBLE","","",1,null],[13,"MYSQL_TYPE_NULL","","",1,null],[13,"MYSQL_TYPE_TIMESTAMP","","",1,null],[13,"MYSQL_TYPE_LONGLONG","","",1,null],[13,"MYSQL_TYPE_INT24","","",1,null],[13,"MYSQL_TYPE_DATE","","",1,null],[13,"MYSQL_TYPE_TIME","","",1,null],[13,"MYSQL_TYPE_DATETIME","","",1,null],[13,"MYSQL_TYPE_YEAR","","",1,null],[13,"MYSQL_TYPE_VARCHAR","","",1,null],[13,"MYSQL_TYPE_BIT","","",1,null],[13,"MYSQL_TYPE_NEWDECIMAL","","",1,null],[13,"MYSQL_TYPE_ENUM","","",1,null],[13,"MYSQL_TYPE_SET","","",1,null],[13,"MYSQL_TYPE_TINY_BLOB","","",1,null],[13,"MYSQL_TYPE_MEDIUM_BLOB","","",1,null],[13,"MYSQL_TYPE_LONG_BLOB","","",1,null],[13,"MYSQL_TYPE_BLOB","","",1,null],[13,"MYSQL_TYPE_VAR_STRING","","",1,null],[13,"MYSQL_TYPE_STRING","","",1,null],[13,"MYSQL_TYPE_GEOMETRY","","",1,null],[7,"PAYLOAD_OFFSET","","",null,null],[7,"MAX_PACKET_LEN","","",null,null],[7,"MAX_PAYLOAD_LEN","","",null,null],[7,"UTF8_GENERAL_CI","","",null,null],[17,"SERVER_STATUS_IN_TRANS","","",null,null],[17,"SERVER_STATUS_AUTOCOMMIT","","",null,null],[17,"SERVER_MORE_RESULTS_EXISTS","","",null,null],[17,"SERVER_STATUS_NO_GOOD_INDEX_USED","","",null,null],[17,"SERVER_STATUS_NO_INDEX_USED","","",null,null],[17,"SERVER_STATUS_CURSOR_EXISTS","","",null,null],[17,"SERVER_STATUS_LAST_ROW_SENT","","",null,null],[17,"SERVER_STATUS_DB_DROPPED","","",null,null],[17,"SERVER_STATUS_NO_BACKSLASH_ESCAPES","","",null,null],[17,"SERVER_STATUS_METADATA_CHANGED","","",null,null],[17,"SERVER_QUERY_WAS_SLOW","","",null,null],[17,"SERVER_PT_OUT_PARAMS","","",null,null],[17,"CLIENT_LONG_PASSWORD","","",null,null],[17,"CLIENT_FOUND_ROWS","","",null,null],[17,"CLIENT_LONG_FLAG","","",null,null],[17,"CLIENT_CONNECT_WITH_DB","","",null,null],[17,"CLIENT_NO_SCHEMA","","",null,null],[17,"CLIENT_COMPRESS","","",null,null],[17,"CLIENT_ODBC","","",null,null],[17,"CLIENT_LOCAL_FILES","","",null,null],[17,"CLIENT_IGNORE_SPACE","","",null,null],[17,"CLIENT_PROTOCOL_41","","",null,null],[17,"CLIENT_INTERACTIVE","","",null,null],[17,"CLIENT_SSL","","",null,null],[17,"CLIENT_IGNORE_SIGPIPE","","",null,null],[17,"CLIENT_TRANSACTIONS","","",null,null],[17,"CLIENT_RESERVED","","",null,null],[17,"CLIENT_SECURE_CONNECTION","","",null,null],[17,"CLIENT_MULTI_STATEMENTS","","",null,null],[17,"CLIENT_MULTI_RESULTS","","",null,null],[17,"CLIENT_PS_MULTI_RESULTS","","",null,null],[17,"CLIENT_PLUGIN_AUTH","","",null,null],[17,"CLIENT_CONNECT_ATTRS","","",null,null],[17,"CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA","","",null,null],[17,"NOT_NULL_FLAG","","",null,null],[17,"PRI_KEY_FLAG","","",null,null],[17,"UNIQUE_KEY_FLAG","","",null,null],[17,"MULTIPLE_KEY_FLAG","","",null,null],[17,"BLOB_FLAG","","",null,null],[17,"UNSIGNED_FLAG","","",null,null],[17,"ZEROFILL_FLAG","","",null,null],[17,"BINARY_FLAG","","",null,null],[17,"ENUM_FLAG","","",null,null],[17,"AUTO_INCREMENT_FLAG","","",null,null],[17,"TIMESTAMP_FLAG","","",null,null],[17,"SET_FLAG","","",null,null],[17,"NO_DEFAULT_VALUE_FLAG","","",null,null],[17,"ON_UPDATE_NOW_FLAG","","",null,null],[17,"NUM_FLAG","","",null,null],[17,"PART_KEY_FLAG","","",null,null],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"statusflags"}],"output":{"name":"statusflags"}}],[11,"eq","","",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"statusflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",2,{"inputs":[{"name":"statusflags"}],"output":{"name":"statusflags"}}],[11,"all","","Returns the set containing all flags.",2,{"inputs":[{"name":"statusflags"}],"output":{"name":"statusflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",2,{"inputs":[{"name":"statusflags"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",2,{"inputs":[{"name":"statusflags"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",2,{"inputs":[{"name":"statusflags"},{"name":"u16"}],"output":{"name":"statusflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",2,{"inputs":[{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",2,{"inputs":[{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"statusflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"statusflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"statusflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",2,{"inputs":[{"name":"statusflags"},{"name":"statusflags"}],"output":{"name":"statusflags"}}],[11,"not","","Returns the complement of this set of flags.",2,{"inputs":[{"name":"statusflags"}],"output":{"name":"statusflags"}}],[11,"from_iter","","",2,{"inputs":[{"name":"statusflags"},{"name":"t"}],"output":{"name":"statusflags"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"capabilityflags"}],"output":{"name":"capabilityflags"}}],[11,"eq","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",3,{"inputs":[{"name":"capabilityflags"}],"output":{"name":"capabilityflags"}}],[11,"all","","Returns the set containing all flags.",3,{"inputs":[{"name":"capabilityflags"}],"output":{"name":"capabilityflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",3,{"inputs":[{"name":"capabilityflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",3,{"inputs":[{"name":"capabilityflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",3,{"inputs":[{"name":"capabilityflags"},{"name":"u32"}],"output":{"name":"capabilityflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",3,{"inputs":[{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",3,{"inputs":[{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"capabilityflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"capabilityflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"capabilityflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",3,{"inputs":[{"name":"capabilityflags"},{"name":"capabilityflags"}],"output":{"name":"capabilityflags"}}],[11,"not","","Returns the complement of this set of flags.",3,{"inputs":[{"name":"capabilityflags"}],"output":{"name":"capabilityflags"}}],[11,"from_iter","","",3,{"inputs":[{"name":"capabilityflags"},{"name":"t"}],"output":{"name":"capabilityflags"}}],[11,"fmt","","",0,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"command"},{"name":"command"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"command"},{"name":"command"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"fmt","","",1,{"inputs":[{"name":"columntype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"columntype"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"columntype"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"columntype"}],"output":{"name":"columntype"}}],[11,"from","","",1,{"inputs":[{"name":"columntype"},{"name":"u8"}],"output":{"name":"columntype"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"columnflags"}],"output":{"name":"columnflags"}}],[11,"eq","","",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"columnflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",4,{"inputs":[{"name":"columnflags"}],"output":{"name":"columnflags"}}],[11,"all","","Returns the set containing all flags.",4,{"inputs":[{"name":"columnflags"}],"output":{"name":"columnflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",4,{"inputs":[{"name":"columnflags"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",4,{"inputs":[{"name":"columnflags"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",4,{"inputs":[{"name":"columnflags"},{"name":"u16"}],"output":{"name":"columnflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,{"inputs":[{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",4,{"inputs":[{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"columnflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"columnflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"columnflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",4,{"inputs":[{"name":"columnflags"},{"name":"columnflags"}],"output":{"name":"columnflags"}}],[11,"not","","Returns the complement of this set of flags.",4,{"inputs":[{"name":"columnflags"}],"output":{"name":"columnflags"}}],[11,"from_iter","","",4,{"inputs":[{"name":"columnflags"},{"name":"t"}],"output":{"name":"columnflags"}}],[0,"error","mysql","",null,null],[3,"ErrPacket","mysql::error","",null,null],[12,"sql_state","","",5,null],[12,"error_message","","",5,null],[12,"error_code","","",5,null],[4,"MyError","","",null,null],[13,"MyIoError","","",6,null],[13,"MySqlError","","",6,null],[13,"MyDriverError","","",6,null],[13,"MySslError","","",6,null],[4,"DriverError","","",null,null],[13,"CouldNotConnect","","",7,null],[13,"UnsupportedProtocol","","",7,null],[13,"PacketOutOfSync","","",7,null],[13,"PacketTooLarge","","",7,null],[13,"Protocol41NotSet","","",7,null],[13,"UnexpectedPacket","","",7,null],[13,"MismatchedStmtParams","","",7,null],[13,"InvalidPoolConstraints","","",7,null],[13,"SetupError","","",7,null],[13,"SslNotSupported","","",7,null],[13,"CouldNotParseVersion","","",7,null],[13,"ReadOnlyTransNotSupported","","",7,null],[13,"PoisonedPoolMutex","","",7,null],[4,"ServerError","","Server error codes (u16)",null,null],[13,"ER_HASHCHK","","",8,null],[13,"ER_NISAMCHK","","",8,null],[13,"ER_NO","","",8,null],[13,"ER_YES","","",8,null],[13,"ER_CANT_CREATE_FILE","","",8,null],[13,"ER_CANT_CREATE_TABLE","","",8,null],[13,"ER_CANT_CREATE_DB","","",8,null],[13,"ER_DB_CREATE_EXISTS","","",8,null],[13,"ER_DB_DROP_EXISTS","","",8,null],[13,"ER_DB_DROP_DELETE","","",8,null],[13,"ER_DB_DROP_RMDIR","","",8,null],[13,"ER_CANT_DELETE_FILE","","",8,null],[13,"ER_CANT_FIND_SYSTEM_REC","","",8,null],[13,"ER_CANT_GET_STAT","","",8,null],[13,"ER_CANT_GET_WD","","",8,null],[13,"ER_CANT_LOCK","","",8,null],[13,"ER_CANT_OPEN_FILE","","",8,null],[13,"ER_FILE_NOT_FOUND","","",8,null],[13,"ER_CANT_READ_DIR","","",8,null],[13,"ER_CANT_SET_WD","","",8,null],[13,"ER_CHECKREAD","","",8,null],[13,"ER_DISK_FULL","","",8,null],[13,"ER_DUP_KEY","","",8,null],[13,"ER_ERROR_ON_CLOSE","","",8,null],[13,"ER_ERROR_ON_READ","","",8,null],[13,"ER_ERROR_ON_RENAME","","",8,null],[13,"ER_ERROR_ON_WRITE","","",8,null],[13,"ER_FILE_USED","","",8,null],[13,"ER_FILSORT_ABORT","","",8,null],[13,"ER_FORM_NOT_FOUND","","",8,null],[13,"ER_GET_ERRNO","","",8,null],[13,"ER_ILLEGAL_HA","","",8,null],[13,"ER_KEY_NOT_FOUND","","",8,null],[13,"ER_NOT_FORM_FILE","","",8,null],[13,"ER_NOT_KEYFILE","","",8,null],[13,"ER_OLD_KEYFILE","","",8,null],[13,"ER_OPEN_AS_READONLY","","",8,null],[13,"ER_OUTOFMEMORY","","",8,null],[13,"ER_OUT_OF_SORTMEMORY","","",8,null],[13,"ER_UNEXPECTED_EOF","","",8,null],[13,"ER_CON_COUNT_ERROR","","",8,null],[13,"ER_OUT_OF_RESOURCES","","",8,null],[13,"ER_BAD_HOST_ERROR","","",8,null],[13,"ER_HANDSHAKE_ERROR","","",8,null],[13,"ER_DBACCESS_DENIED_ERROR","","",8,null],[13,"ER_ACCESS_DENIED_ERROR","","",8,null],[13,"ER_NO_DB_ERROR","","",8,null],[13,"ER_UNKNOWN_COM_ERROR","","",8,null],[13,"ER_BAD_NULL_ERROR","","",8,null],[13,"ER_BAD_DB_ERROR","","",8,null],[13,"ER_TABLE_EXISTS_ERROR","","",8,null],[13,"ER_BAD_TABLE_ERROR","","",8,null],[13,"ER_NON_UNIQ_ERROR","","",8,null],[13,"ER_SERVER_SHUTDOWN","","",8,null],[13,"ER_BAD_FIELD_ERROR","","",8,null],[13,"ER_WRONG_FIELD_WITH_GROUP","","",8,null],[13,"ER_WRONG_GROUP_FIELD","","",8,null],[13,"ER_WRONG_SUM_SELECT","","",8,null],[13,"ER_WRONG_VALUE_COUNT","","",8,null],[13,"ER_TOO_LONG_IDENT","","",8,null],[13,"ER_DUP_FIELDNAME","","",8,null],[13,"ER_DUP_KEYNAME","","",8,null],[13,"ER_DUP_ENTRY","","",8,null],[13,"ER_WRONG_FIELD_SPEC","","",8,null],[13,"ER_PARSE_ERROR","","",8,null],[13,"ER_EMPTY_QUERY","","",8,null],[13,"ER_NONUNIQ_TABLE","","",8,null],[13,"ER_INVALID_DEFAULT","","",8,null],[13,"ER_MULTIPLE_PRI_KEY","","",8,null],[13,"ER_TOO_MANY_KEYS","","",8,null],[13,"ER_TOO_MANY_KEY_PARTS","","",8,null],[13,"ER_TOO_LONG_KEY","","",8,null],[13,"ER_KEY_COLUMN_DOES_NOT_EXITS","","",8,null],[13,"ER_BLOB_USED_AS_KEY","","",8,null],[13,"ER_TOO_BIG_FIELDLENGTH","","",8,null],[13,"ER_WRONG_AUTO_KEY","","",8,null],[13,"ER_READY","","",8,null],[13,"ER_NORMAL_SHUTDOWN","","",8,null],[13,"ER_GOT_SIGNAL","","",8,null],[13,"ER_SHUTDOWN_COMPLETE","","",8,null],[13,"ER_FORCING_CLOSE","","",8,null],[13,"ER_IPSOCK_ERROR","","",8,null],[13,"ER_NO_SUCH_INDEX","","",8,null],[13,"ER_WRONG_FIELD_TERMINATORS","","",8,null],[13,"ER_BLOBS_AND_NO_TERMINATED","","",8,null],[13,"ER_TEXTFILE_NOT_READABLE","","",8,null],[13,"ER_FILE_EXISTS_ERROR","","",8,null],[13,"ER_LOAD_INFO","","",8,null],[13,"ER_ALTER_INFO","","",8,null],[13,"ER_WRONG_SUB_KEY","","",8,null],[13,"ER_CANT_REMOVE_ALL_FIELDS","","",8,null],[13,"ER_CANT_DROP_FIELD_OR_KEY","","",8,null],[13,"ER_INSERT_INFO","","",8,null],[13,"ER_UPDATE_TABLE_USED","","",8,null],[13,"ER_NO_SUCH_THREAD","","",8,null],[13,"ER_KILL_DENIED_ERROR","","",8,null],[13,"ER_NO_TABLES_USED","","",8,null],[13,"ER_TOO_BIG_SET","","",8,null],[13,"ER_NO_UNIQUE_LOGFILE","","",8,null],[13,"ER_TABLE_NOT_LOCKED_FOR_WRITE","","",8,null],[13,"ER_TABLE_NOT_LOCKED","","",8,null],[13,"ER_BLOB_CANT_HAVE_DEFAULT","","",8,null],[13,"ER_WRONG_DB_NAME","","",8,null],[13,"ER_WRONG_TABLE_NAME","","",8,null],[13,"ER_TOO_BIG_SELECT","","",8,null],[13,"ER_UNKNOWN_ERROR","","",8,null],[13,"ER_UNKNOWN_PROCEDURE","","",8,null],[13,"ER_WRONG_PARAMCOUNT_TO_PROCEDURE","","",8,null],[13,"ER_WRONG_PARAMETERS_TO_PROCEDURE","","",8,null],[13,"ER_UNKNOWN_TABLE","","",8,null],[13,"ER_FIELD_SPECIFIED_TWICE","","",8,null],[13,"ER_INVALID_GROUP_FUNC_USE","","",8,null],[13,"ER_UNSUPPORTED_EXTENSION","","",8,null],[13,"ER_TABLE_MUST_HAVE_COLUMNS","","",8,null],[13,"ER_RECORD_FILE_FULL","","",8,null],[13,"ER_UNKNOWN_CHARACTER_SET","","",8,null],[13,"ER_TOO_MANY_TABLES","","",8,null],[13,"ER_TOO_MANY_FIELDS","","",8,null],[13,"ER_TOO_BIG_ROWSIZE","","",8,null],[13,"ER_STACK_OVERRUN","","",8,null],[13,"ER_WRONG_OUTER_JOIN","","",8,null],[13,"ER_NULL_COLUMN_IN_INDEX","","",8,null],[13,"ER_CANT_FIND_UDF","","",8,null],[13,"ER_CANT_INITIALIZE_UDF","","",8,null],[13,"ER_UDF_NO_PATHS","","",8,null],[13,"ER_UDF_EXISTS","","",8,null],[13,"ER_CANT_OPEN_LIBRARY","","",8,null],[13,"ER_CANT_FIND_DL_ENTRY","","",8,null],[13,"ER_FUNCTION_NOT_DEFINED","","",8,null],[13,"ER_HOST_IS_BLOCKED","","",8,null],[13,"ER_HOST_NOT_PRIVILEGED","","",8,null],[13,"ER_PASSWORD_ANONYMOUS_USER","","",8,null],[13,"ER_PASSWORD_NOT_ALLOWED","","",8,null],[13,"ER_PASSWORD_NO_MATCH","","",8,null],[13,"ER_UPDATE_INFO","","",8,null],[13,"ER_CANT_CREATE_THREAD","","",8,null],[13,"ER_WRONG_VALUE_COUNT_ON_ROW","","",8,null],[13,"ER_CANT_REOPEN_TABLE","","",8,null],[13,"ER_INVALID_USE_OF_NULL","","",8,null],[13,"ER_REGEXP_ERROR","","",8,null],[13,"ER_MIX_OF_GROUP_FUNC_AND_FIELDS","","",8,null],[13,"ER_NONEXISTING_GRANT","","",8,null],[13,"ER_TABLEACCESS_DENIED_ERROR","","",8,null],[13,"ER_COLUMNACCESS_DENIED_ERROR","","",8,null],[13,"ER_ILLEGAL_GRANT_FOR_TABLE","","",8,null],[13,"ER_GRANT_WRONG_HOST_OR_USER","","",8,null],[13,"ER_NO_SUCH_TABLE","","",8,null],[13,"ER_NONEXISTING_TABLE_GRANT","","",8,null],[13,"ER_NOT_ALLOWED_COMMAND","","",8,null],[13,"ER_SYNTAX_ERROR","","",8,null],[13,"ER_DELAYED_CANT_CHANGE_LOCK","","",8,null],[13,"ER_TOO_MANY_DELAYED_THREADS","","",8,null],[13,"ER_ABORTING_CONNECTION","","",8,null],[13,"ER_NET_PACKET_TOO_LARGE","","",8,null],[13,"ER_NET_READ_ERROR_FROM_PIPE","","",8,null],[13,"ER_NET_FCNTL_ERROR","","",8,null],[13,"ER_NET_PACKETS_OUT_OF_ORDER","","",8,null],[13,"ER_NET_UNCOMPRESS_ERROR","","",8,null],[13,"ER_NET_READ_ERROR","","",8,null],[13,"ER_NET_READ_INTERRUPTED","","",8,null],[13,"ER_NET_ERROR_ON_WRITE","","",8,null],[13,"ER_NET_WRITE_INTERRUPTED","","",8,null],[13,"ER_TOO_LONG_STRING","","",8,null],[13,"ER_TABLE_CANT_HANDLE_BLOB","","",8,null],[13,"ER_TABLE_CANT_HANDLE_AUTO_INCREMENT","","",8,null],[13,"ER_DELAYED_INSERT_TABLE_LOCKED","","",8,null],[13,"ER_WRONG_COLUMN_NAME","","",8,null],[13,"ER_WRONG_KEY_COLUMN","","",8,null],[13,"ER_WRONG_MRG_TABLE","","",8,null],[13,"ER_DUP_UNIQUE","","",8,null],[13,"ER_BLOB_KEY_WITHOUT_LENGTH","","",8,null],[13,"ER_PRIMARY_CANT_HAVE_NULL","","",8,null],[13,"ER_TOO_MANY_ROWS","","",8,null],[13,"ER_REQUIRES_PRIMARY_KEY","","",8,null],[13,"ER_NO_RAID_COMPILED","","",8,null],[13,"ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE","","",8,null],[13,"ER_KEY_DOES_NOT_EXITS","","",8,null],[13,"ER_CHECK_NO_SUCH_TABLE","","",8,null],[13,"ER_CHECK_NOT_IMPLEMENTED","","",8,null],[13,"ER_CANT_DO_THIS_DURING_AN_TRANSACTION","","",8,null],[13,"ER_ERROR_DURING_COMMIT","","",8,null],[13,"ER_ERROR_DURING_ROLLBACK","","",8,null],[13,"ER_ERROR_DURING_FLUSH_LOGS","","",8,null],[13,"ER_ERROR_DURING_CHECKPOINT","","",8,null],[13,"ER_NEW_ABORTING_CONNECTION","","",8,null],[13,"ER_DUMP_NOT_IMPLEMENTED","","",8,null],[13,"ER_FLUSH_MASTER_BINLOG_CLOSED","","",8,null],[13,"ER_INDEX_REBUILD","","",8,null],[13,"ER_MASTER","","",8,null],[13,"ER_MASTER_NET_READ","","",8,null],[13,"ER_MASTER_NET_WRITE","","",8,null],[13,"ER_FT_MATCHING_KEY_NOT_FOUND","","",8,null],[13,"ER_LOCK_OR_ACTIVE_TRANSACTION","","",8,null],[13,"ER_UNKNOWN_SYSTEM_VARIABLE","","",8,null],[13,"ER_CRASHED_ON_USAGE","","",8,null],[13,"ER_CRASHED_ON_REPAIR","","",8,null],[13,"ER_WARNING_NOT_COMPLETE_ROLLBACK","","",8,null],[13,"ER_TRANS_CACHE_FULL","","",8,null],[13,"ER_SLAVE_MUST_STOP","","",8,null],[13,"ER_SLAVE_NOT_RUNNING","","",8,null],[13,"ER_BAD_SLAVE","","",8,null],[13,"ER_MASTER_INFO","","",8,null],[13,"ER_SLAVE_THREAD","","",8,null],[13,"ER_TOO_MANY_USER_CONNECTIONS","","",8,null],[13,"ER_SET_CONSTANTS_ONLY","","",8,null],[13,"ER_LOCK_WAIT_TIMEOUT","","",8,null],[13,"ER_LOCK_TABLE_FULL","","",8,null],[13,"ER_READ_ONLY_TRANSACTION","","",8,null],[13,"ER_DROP_DB_WITH_READ_LOCK","","",8,null],[13,"ER_CREATE_DB_WITH_READ_LOCK","","",8,null],[13,"ER_WRONG_ARGUMENTS","","",8,null],[13,"ER_NO_PERMISSION_TO_CREATE_USER","","",8,null],[13,"ER_UNION_TABLES_IN_DIFFERENT_DIR","","",8,null],[13,"ER_LOCK_DEADLOCK","","",8,null],[13,"ER_TABLE_CANT_HANDLE_FT","","",8,null],[13,"ER_CANNOT_ADD_FOREIGN","","",8,null],[13,"ER_NO_REFERENCED_ROW","","",8,null],[13,"ER_ROW_IS_REFERENCED","","",8,null],[13,"ER_CONNECT_TO_MASTER","","",8,null],[13,"ER_QUERY_ON_MASTER","","",8,null],[13,"ER_ERROR_WHEN_EXECUTING_COMMAND","","",8,null],[13,"ER_WRONG_USAGE","","",8,null],[13,"ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT","","",8,null],[13,"ER_CANT_UPDATE_WITH_READLOCK","","",8,null],[13,"ER_MIXING_NOT_ALLOWED","","",8,null],[13,"ER_DUP_ARGUMENT","","",8,null],[13,"ER_USER_LIMIT_REACHED","","",8,null],[13,"ER_SPECIFIC_ACCESS_DENIED_ERROR","","",8,null],[13,"ER_LOCAL_VARIABLE","","",8,null],[13,"ER_GLOBAL_VARIABLE","","",8,null],[13,"ER_NO_DEFAULT","","",8,null],[13,"ER_WRONG_VALUE_FOR_VAR","","",8,null],[13,"ER_WRONG_TYPE_FOR_VAR","","",8,null],[13,"ER_VAR_CANT_BE_READ","","",8,null],[13,"ER_CANT_USE_OPTION_HERE","","",8,null],[13,"ER_NOT_SUPPORTED_YET","","",8,null],[13,"ER_MASTER_FATAL_ERROR_READING_BINLOG","","",8,null],[13,"ER_SLAVE_IGNORED_TABLE","","",8,null],[13,"ER_INCORRECT_GLOBAL_LOCAL_VAR","","",8,null],[13,"ER_WRONG_FK_DEF","","",8,null],[13,"ER_KEY_REF_DO_NOT_MATCH_TABLE_REF","","",8,null],[13,"ER_OPERAND_COLUMNS","","",8,null],[13,"ER_SUBQUERY_NO_1_ROW","","",8,null],[13,"ER_UNKNOWN_STMT_HANDLER","","",8,null],[13,"ER_CORRUPT_HELP_DB","","",8,null],[13,"ER_CYCLIC_REFERENCE","","",8,null],[13,"ER_AUTO_CONVERT","","",8,null],[13,"ER_ILLEGAL_REFERENCE","","",8,null],[13,"ER_DERIVED_MUST_HAVE_ALIAS","","",8,null],[13,"ER_SELECT_REDUCED","","",8,null],[13,"ER_TABLENAME_NOT_ALLOWED_HERE","","",8,null],[13,"ER_NOT_SUPPORTED_AUTH_MODE","","",8,null],[13,"ER_SPATIAL_CANT_HAVE_NULL","","",8,null],[13,"ER_COLLATION_CHARSET_MISMATCH","","",8,null],[13,"ER_SLAVE_WAS_RUNNING","","",8,null],[13,"ER_SLAVE_WAS_NOT_RUNNING","","",8,null],[13,"ER_TOO_BIG_FOR_UNCOMPRESS","","",8,null],[13,"ER_ZLIB_Z_MEM_ERROR","","",8,null],[13,"ER_ZLIB_Z_BUF_ERROR","","",8,null],[13,"ER_ZLIB_Z_DATA_ERROR","","",8,null],[13,"ER_CUT_VALUE_GROUP_CONCAT","","",8,null],[13,"ER_WARN_TOO_FEW_RECORDS","","",8,null],[13,"ER_WARN_TOO_MANY_RECORDS","","",8,null],[13,"ER_WARN_NULL_TO_NOTNULL","","",8,null],[13,"ER_WARN_DATA_OUT_OF_RANGE","","",8,null],[13,"WARN_DATA_TRUNCATED","","",8,null],[13,"ER_WARN_USING_OTHER_HANDLER","","",8,null],[13,"ER_CANT_AGGREGATE_2COLLATIONS","","",8,null],[13,"ER_DROP_USER","","",8,null],[13,"ER_REVOKE_GRANTS","","",8,null],[13,"ER_CANT_AGGREGATE_3COLLATIONS","","",8,null],[13,"ER_CANT_AGGREGATE_NCOLLATIONS","","",8,null],[13,"ER_VARIABLE_IS_NOT_STRUCT","","",8,null],[13,"ER_UNKNOWN_COLLATION","","",8,null],[13,"ER_SLAVE_IGNORED_SSL_PARAMS","","",8,null],[13,"ER_SERVER_IS_IN_SECURE_AUTH_MODE","","",8,null],[13,"ER_WARN_FIELD_RESOLVED","","",8,null],[13,"ER_BAD_SLAVE_UNTIL_COND","","",8,null],[13,"ER_MISSING_SKIP_SLAVE","","",8,null],[13,"ER_UNTIL_COND_IGNORED","","",8,null],[13,"ER_WRONG_NAME_FOR_INDEX","","",8,null],[13,"ER_WRONG_NAME_FOR_CATALOG","","",8,null],[13,"ER_WARN_QC_RESIZE","","",8,null],[13,"ER_BAD_FT_COLUMN","","",8,null],[13,"ER_UNKNOWN_KEY_CACHE","","",8,null],[13,"ER_WARN_HOSTNAME_WONT_WORK","","",8,null],[13,"ER_UNKNOWN_STORAGE_ENGINE","","",8,null],[13,"ER_WARN_DEPRECATED_SYNTAX","","",8,null],[13,"ER_NON_UPDATABLE_TABLE","","",8,null],[13,"ER_FEATURE_DISABLED","","",8,null],[13,"ER_OPTION_PREVENTS_STATEMENT","","",8,null],[13,"ER_DUPLICATED_VALUE_IN_TYPE","","",8,null],[13,"ER_TRUNCATED_WRONG_VALUE","","",8,null],[13,"ER_TOO_MUCH_AUTO_TIMESTAMP_COLS","","",8,null],[13,"ER_INVALID_ON_UPDATE","","",8,null],[13,"ER_UNSUPPORTED_PS","","",8,null],[13,"ER_GET_ERRMSG","","",8,null],[13,"ER_GET_TEMPORARY_ERRMSG","","",8,null],[13,"ER_UNKNOWN_TIME_ZONE","","",8,null],[13,"ER_WARN_INVALID_TIMESTAMP","","",8,null],[13,"ER_INVALID_CHARACTER_STRING","","",8,null],[13,"ER_WARN_ALLOWED_PACKET_OVERFLOWED","","",8,null],[13,"ER_CONFLICTING_DECLARATIONS","","",8,null],[13,"ER_SP_NO_RECURSIVE_CREATE","","",8,null],[13,"ER_SP_ALREADY_EXISTS","","",8,null],[13,"ER_SP_DOES_NOT_EXIST","","",8,null],[13,"ER_SP_DROP_FAILED","","",8,null],[13,"ER_SP_STORE_FAILED","","",8,null],[13,"ER_SP_LILABEL_MISMATCH","","",8,null],[13,"ER_SP_LABEL_REDEFINE","","",8,null],[13,"ER_SP_LABEL_MISMATCH","","",8,null],[13,"ER_SP_UNINIT_VAR","","",8,null],[13,"ER_SP_BADSELECT","","",8,null],[13,"ER_SP_BADRETURN","","",8,null],[13,"ER_SP_BADSTATEMENT","","",8,null],[13,"ER_UPDATE_LOG_DEPRECATED_IGNORED","","",8,null],[13,"ER_UPDATE_LOG_DEPRECATED_TRANSLATED","","",8,null],[13,"ER_QUERY_INTERRUPTED","","",8,null],[13,"ER_SP_WRONG_NO_OF_ARGS","","",8,null],[13,"ER_SP_COND_MISMATCH","","",8,null],[13,"ER_SP_NORETURN","","",8,null],[13,"ER_SP_NORETURNEND","","",8,null],[13,"ER_SP_BAD_CURSOR_QUERY","","",8,null],[13,"ER_SP_BAD_CURSOR_SELECT","","",8,null],[13,"ER_SP_CURSOR_MISMATCH","","",8,null],[13,"ER_SP_CURSOR_ALREADY_OPEN","","",8,null],[13,"ER_SP_CURSOR_NOT_OPEN","","",8,null],[13,"ER_SP_UNDECLARED_VAR","","",8,null],[13,"ER_SP_WRONG_NO_OF_FETCH_ARGS","","",8,null],[13,"ER_SP_FETCH_NO_DATA","","",8,null],[13,"ER_SP_DUP_PARAM","","",8,null],[13,"ER_SP_DUP_VAR","","",8,null],[13,"ER_SP_DUP_COND","","",8,null],[13,"ER_SP_DUP_CURS","","",8,null],[13,"ER_SP_CANT_ALTER","","",8,null],[13,"ER_SP_SUBSELECT_NYI","","",8,null],[13,"ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG","","",8,null],[13,"ER_SP_VARCOND_AFTER_CURSHNDLR","","",8,null],[13,"ER_SP_CURSOR_AFTER_HANDLER","","",8,null],[13,"ER_SP_CASE_NOT_FOUND","","",8,null],[13,"ER_FPARSER_TOO_BIG_FILE","","",8,null],[13,"ER_FPARSER_BAD_HEADER","","",8,null],[13,"ER_FPARSER_EOF_IN_COMMENT","","",8,null],[13,"ER_FPARSER_ERROR_IN_PARAMETER","","",8,null],[13,"ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER","","",8,null],[13,"ER_VIEW_NO_EXPLAIN","","",8,null],[13,"ER_FRM_UNKNOWN_TYPE","","",8,null],[13,"ER_WRONG_OBJECT","","",8,null],[13,"ER_NONUPDATEABLE_COLUMN","","",8,null],[13,"ER_VIEW_SELECT_DERIVED","","",8,null],[13,"ER_VIEW_SELECT_CLAUSE","","",8,null],[13,"ER_VIEW_SELECT_VARIABLE","","",8,null],[13,"ER_VIEW_SELECT_TMPTABLE","","",8,null],[13,"ER_VIEW_WRONG_LIST","","",8,null],[13,"ER_WARN_VIEW_MERGE","","",8,null],[13,"ER_WARN_VIEW_WITHOUT_KEY","","",8,null],[13,"ER_VIEW_INVALID","","",8,null],[13,"ER_SP_NO_DROP_SP","","",8,null],[13,"ER_SP_GOTO_IN_HNDLR","","",8,null],[13,"ER_TRG_ALREADY_EXISTS","","",8,null],[13,"ER_TRG_DOES_NOT_EXIST","","",8,null],[13,"ER_TRG_ON_VIEW_OR_TEMP_TABLE","","",8,null],[13,"ER_TRG_CANT_CHANGE_ROW","","",8,null],[13,"ER_TRG_NO_SUCH_ROW_IN_TRG","","",8,null],[13,"ER_NO_DEFAULT_FOR_FIELD","","",8,null],[13,"ER_DIVISION_BY_ZERO","","",8,null],[13,"ER_TRUNCATED_WRONG_VALUE_FOR_FIELD","","",8,null],[13,"ER_ILLEGAL_VALUE_FOR_TYPE","","",8,null],[13,"ER_VIEW_NONUPD_CHECK","","",8,null],[13,"ER_VIEW_CHECK_FAILED","","",8,null],[13,"ER_PROCACCESS_DENIED_ERROR","","",8,null],[13,"ER_RELAY_LOG_FAIL","","",8,null],[13,"ER_PASSWD_LENGTH","","",8,null],[13,"ER_UNKNOWN_TARGET_BINLOG","","",8,null],[13,"ER_IO_ERR_LOG_INDEX_READ","","",8,null],[13,"ER_BINLOG_PURGE_PROHIBITED","","",8,null],[13,"ER_FSEEK_FAIL","","",8,null],[13,"ER_BINLOG_PURGE_FATAL_ERR","","",8,null],[13,"ER_LOG_IN_USE","","",8,null],[13,"ER_LOG_PURGE_UNKNOWN_ERR","","",8,null],[13,"ER_RELAY_LOG_INIT","","",8,null],[13,"ER_NO_BINARY_LOGGING","","",8,null],[13,"ER_RESERVED_SYNTAX","","",8,null],[13,"ER_WSAS_FAILED","","",8,null],[13,"ER_DIFF_GROUPS_PROC","","",8,null],[13,"ER_NO_GROUP_FOR_PROC","","",8,null],[13,"ER_ORDER_WITH_PROC","","",8,null],[13,"ER_LOGGING_PROHIBIT_CHANGING_OF","","",8,null],[13,"ER_NO_FILE_MAPPING","","",8,null],[13,"ER_WRONG_MAGIC","","",8,null],[13,"ER_PS_MANY_PARAM","","",8,null],[13,"ER_KEY_PART_0","","",8,null],[13,"ER_VIEW_CHECKSUM","","",8,null],[13,"ER_VIEW_MULTIUPDATE","","",8,null],[13,"ER_VIEW_NO_INSERT_FIELD_LIST","","",8,null],[13,"ER_VIEW_DELETE_MERGE_VIEW","","",8,null],[13,"ER_CANNOT_USER","","",8,null],[13,"ER_XAER_NOTA","","",8,null],[13,"ER_XAER_INVAL","","",8,null],[13,"ER_XAER_RMFAIL","","",8,null],[13,"ER_XAER_OUTSIDE","","",8,null],[13,"ER_XAER_RMERR","","",8,null],[13,"ER_XA_RBROLLBACK","","",8,null],[13,"ER_NONEXISTING_PROC_GRANT","","",8,null],[13,"ER_PROC_AUTO_GRANT_FAIL","","",8,null],[13,"ER_PROC_AUTO_REVOKE_FAIL","","",8,null],[13,"ER_DATA_TOO_LONG","","",8,null],[13,"ER_SP_BAD_SQLSTATE","","",8,null],[13,"ER_STARTUP","","",8,null],[13,"ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR","","",8,null],[13,"ER_CANT_CREATE_USER_WITH_GRANT","","",8,null],[13,"ER_WRONG_VALUE_FOR_TYPE","","",8,null],[13,"ER_TABLE_DEF_CHANGED","","",8,null],[13,"ER_SP_DUP_HANDLER","","",8,null],[13,"ER_SP_NOT_VAR_ARG","","",8,null],[13,"ER_SP_NO_RETSET","","",8,null],[13,"ER_CANT_CREATE_GEOMETRY_OBJECT","","",8,null],[13,"ER_FAILED_ROUTINE_BREAK_BINLOG","","",8,null],[13,"ER_BINLOG_UNSAFE_ROUTINE","","",8,null],[13,"ER_BINLOG_CREATE_ROUTINE_NEED_SUPER","","",8,null],[13,"ER_EXEC_STMT_WITH_OPEN_CURSOR","","",8,null],[13,"ER_STMT_HAS_NO_OPEN_CURSOR","","",8,null],[13,"ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG","","",8,null],[13,"ER_NO_DEFAULT_FOR_VIEW_FIELD","","",8,null],[13,"ER_SP_NO_RECURSION","","",8,null],[13,"ER_TOO_BIG_SCALE","","",8,null],[13,"ER_TOO_BIG_PRECISION","","",8,null],[13,"ER_M_BIGGER_THAN_D","","",8,null],[13,"ER_WRONG_LOCK_OF_SYSTEM_TABLE","","",8,null],[13,"ER_CONNECT_TO_FOREIGN_DATA_SOURCE","","",8,null],[13,"ER_QUERY_ON_FOREIGN_DATA_SOURCE","","",8,null],[13,"ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST","","",8,null],[13,"ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE","","",8,null],[13,"ER_FOREIGN_DATA_STRING_INVALID","","",8,null],[13,"ER_CANT_CREATE_FEDERATED_TABLE","","",8,null],[13,"ER_TRG_IN_WRONG_SCHEMA","","",8,null],[13,"ER_STACK_OVERRUN_NEED_MORE","","",8,null],[13,"ER_TOO_LONG_BODY","","",8,null],[13,"ER_WARN_CANT_DROP_DEFAULT_KEYCACHE","","",8,null],[13,"ER_TOO_BIG_DISPLAYWIDTH","","",8,null],[13,"ER_XAER_DUPID","","",8,null],[13,"ER_DATETIME_FUNCTION_OVERFLOW","","",8,null],[13,"ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG","","",8,null],[13,"ER_VIEW_PREVENT_UPDATE","","",8,null],[13,"ER_PS_NO_RECURSION","","",8,null],[13,"ER_SP_CANT_SET_AUTOCOMMIT","","",8,null],[13,"ER_MALFORMED_DEFINER","","",8,null],[13,"ER_VIEW_FRM_NO_USER","","",8,null],[13,"ER_VIEW_OTHER_USER","","",8,null],[13,"ER_NO_SUCH_USER","","",8,null],[13,"ER_FORBID_SCHEMA_CHANGE","","",8,null],[13,"ER_ROW_IS_REFERENCED_2","","",8,null],[13,"ER_NO_REFERENCED_ROW_2","","",8,null],[13,"ER_SP_BAD_VAR_SHADOW","","",8,null],[13,"ER_TRG_NO_DEFINER","","",8,null],[13,"ER_OLD_FILE_FORMAT","","",8,null],[13,"ER_SP_RECURSION_LIMIT","","",8,null],[13,"ER_SP_PROC_TABLE_CORRUPT","","",8,null],[13,"ER_SP_WRONG_NAME","","",8,null],[13,"ER_TABLE_NEEDS_UPGRADE","","",8,null],[13,"ER_SP_NO_AGGREGATE","","",8,null],[13,"ER_MAX_PREPARED_STMT_COUNT_REACHED","","",8,null],[13,"ER_VIEW_RECURSIVE","","",8,null],[13,"ER_NON_GROUPING_FIELD_USED","","",8,null],[13,"ER_TABLE_CANT_HANDLE_SPKEYS","","",8,null],[13,"ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA","","",8,null],[13,"ER_REMOVED_SPACES","","",8,null],[13,"ER_AUTOINC_READ_FAILED","","",8,null],[13,"ER_USERNAME","","",8,null],[13,"ER_HOSTNAME","","",8,null],[13,"ER_WRONG_STRING_LENGTH","","",8,null],[13,"ER_NON_INSERTABLE_TABLE","","",8,null],[13,"ER_ADMIN_WRONG_MRG_TABLE","","",8,null],[13,"ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT","","",8,null],[13,"ER_NAME_BECOMES_EMPTY","","",8,null],[13,"ER_AMBIGUOUS_FIELD_TERM","","",8,null],[13,"ER_FOREIGN_SERVER_EXISTS","","",8,null],[13,"ER_FOREIGN_SERVER_DOESNT_EXIST","","",8,null],[13,"ER_ILLEGAL_HA_CREATE_OPTION","","",8,null],[13,"ER_PARTITION_REQUIRES_VALUES_ERROR","","",8,null],[13,"ER_PARTITION_WRONG_VALUES_ERROR","","",8,null],[13,"ER_PARTITION_MAXVALUE_ERROR","","",8,null],[13,"ER_PARTITION_SUBPARTITION_ERROR","","",8,null],[13,"ER_PARTITION_SUBPART_MIX_ERROR","","",8,null],[13,"ER_PARTITION_WRONG_NO_PART_ERROR","","",8,null],[13,"ER_PARTITION_WRONG_NO_SUBPART_ERROR","","",8,null],[13,"ER_CONST_EXPR_IN_PARTITION_FUNC_ERROR","","",8,null],[13,"ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR","","",8,null],[13,"ER_FIELD_NOT_FOUND_PART_ERROR","","",8,null],[13,"ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR","","",8,null],[13,"ER_INCONSISTENT_PARTITION_INFO_ERROR","","",8,null],[13,"ER_PARTITION_FUNC_NOT_ALLOWED_ERROR","","",8,null],[13,"ER_PARTITIONS_MUST_BE_DEFINED_ERROR","","",8,null],[13,"ER_RANGE_NOT_INCREASING_ERROR","","",8,null],[13,"ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR","","",8,null],[13,"ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR","","",8,null],[13,"ER_PARTITION_ENTRY_ERROR","","",8,null],[13,"ER_MIX_HANDLER_ERROR","","",8,null],[13,"ER_PARTITION_NOT_DEFINED_ERROR","","",8,null],[13,"ER_TOO_MANY_PARTITIONS_ERROR","","",8,null],[13,"ER_SUBPARTITION_ERROR","","",8,null],[13,"ER_CANT_CREATE_HANDLER_FILE","","",8,null],[13,"ER_BLOB_FIELD_IN_PART_FUNC_ERROR","","",8,null],[13,"ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF","","",8,null],[13,"ER_NO_PARTS_ERROR","","",8,null],[13,"ER_PARTITION_MGMT_ON_NONPARTITIONED","","",8,null],[13,"ER_FOREIGN_KEY_ON_PARTITIONED","","",8,null],[13,"ER_DROP_PARTITION_NON_EXISTENT","","",8,null],[13,"ER_DROP_LAST_PARTITION","","",8,null],[13,"ER_COALESCE_ONLY_ON_HASH_PARTITION","","",8,null],[13,"ER_REORG_HASH_ONLY_ON_SAME_NO","","",8,null],[13,"ER_REORG_NO_PARAM_ERROR","","",8,null],[13,"ER_ONLY_ON_RANGE_LIST_PARTITION","","",8,null],[13,"ER_ADD_PARTITION_SUBPART_ERROR","","",8,null],[13,"ER_ADD_PARTITION_NO_NEW_PARTITION","","",8,null],[13,"ER_COALESCE_PARTITION_NO_PARTITION","","",8,null],[13,"ER_REORG_PARTITION_NOT_EXIST","","",8,null],[13,"ER_SAME_NAME_PARTITION","","",8,null],[13,"ER_NO_BINLOG_ERROR","","",8,null],[13,"ER_CONSECUTIVE_REORG_PARTITIONS","","",8,null],[13,"ER_REORG_OUTSIDE_RANGE","","",8,null],[13,"ER_PARTITION_FUNCTION_FAILURE","","",8,null],[13,"ER_PART_STATE_ERROR","","",8,null],[13,"ER_LIMITED_PART_RANGE","","",8,null],[13,"ER_PLUGIN_IS_NOT_LOADED","","",8,null],[13,"ER_WRONG_VALUE","","",8,null],[13,"ER_NO_PARTITION_FOR_GIVEN_VALUE","","",8,null],[13,"ER_FILEGROUP_OPTION_ONLY_ONCE","","",8,null],[13,"ER_CREATE_FILEGROUP_FAILED","","",8,null],[13,"ER_DROP_FILEGROUP_FAILED","","",8,null],[13,"ER_TABLESPACE_AUTO_EXTEND_ERROR","","",8,null],[13,"ER_WRONG_SIZE_NUMBER","","",8,null],[13,"ER_SIZE_OVERFLOW_ERROR","","",8,null],[13,"ER_ALTER_FILEGROUP_FAILED","","",8,null],[13,"ER_BINLOG_ROW_LOGGING_FAILED","","",8,null],[13,"ER_BINLOG_ROW_WRONG_TABLE_DEF","","",8,null],[13,"ER_BINLOG_ROW_RBR_TO_SBR","","",8,null],[13,"ER_EVENT_ALREADY_EXISTS","","",8,null],[13,"ER_EVENT_STORE_FAILED","","",8,null],[13,"ER_EVENT_DOES_NOT_EXIST","","",8,null],[13,"ER_EVENT_CANT_ALTER","","",8,null],[13,"ER_EVENT_DROP_FAILED","","",8,null],[13,"ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG","","",8,null],[13,"ER_EVENT_ENDS_BEFORE_STARTS","","",8,null],[13,"ER_EVENT_EXEC_TIME_IN_THE_PAST","","",8,null],[13,"ER_EVENT_OPEN_TABLE_FAILED","","",8,null],[13,"ER_EVENT_NEITHER_M_EXPR_NOR_M_AT","","",8,null],[13,"ER_COL_COUNT_DOESNT_MATCH_CORRUPTED","","",8,null],[13,"ER_CANNOT_LOAD_FROM_TABLE","","",8,null],[13,"ER_EVENT_CANNOT_DELETE","","",8,null],[13,"ER_EVENT_COMPILE_ERROR","","",8,null],[13,"ER_EVENT_SAME_NAME","","",8,null],[13,"ER_EVENT_DATA_TOO_LONG","","",8,null],[13,"ER_DROP_INDEX_FK","","",8,null],[13,"ER_WARN_DEPRECATED_SYNTAX_WITH_VER","","",8,null],[13,"ER_CANT_WRITE_LOCK_LOG_TABLE","","",8,null],[13,"ER_CANT_LOCK_LOG_TABLE","","",8,null],[13,"ER_FOREIGN_DUPLICATE_KEY","","",8,null],[13,"ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE","","",8,null],[13,"ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR","","",8,null],[13,"ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT","","",8,null],[13,"ER_NDB_CANT_SWITCH_BINLOG_FORMAT","","",8,null],[13,"ER_PARTITION_NO_TEMPORARY","","",8,null],[13,"ER_PARTITION_CONST_DOMAIN_ERROR","","",8,null],[13,"ER_PARTITION_FUNCTION_IS_NOT_ALLOWED","","",8,null],[13,"ER_DDL_LOG_ERROR","","",8,null],[13,"ER_NULL_IN_VALUES_LESS_THAN","","",8,null],[13,"ER_WRONG_PARTITION_NAME","","",8,null],[13,"ER_CANT_CHANGE_TX_ISOLATION","","",8,null],[13,"ER_DUP_ENTRY_AUTOINCREMENT_CASE","","",8,null],[13,"ER_EVENT_MODIFY_QUEUE_ERROR","","",8,null],[13,"ER_EVENT_SET_VAR_ERROR","","",8,null],[13,"ER_PARTITION_MERGE_ERROR","","",8,null],[13,"ER_CANT_ACTIVATE_LOG","","",8,null],[13,"ER_RBR_NOT_AVAILABLE","","",8,null],[13,"ER_BASE64_DECODE_ERROR","","",8,null],[13,"ER_EVENT_RECURSION_FORBIDDEN","","",8,null],[13,"ER_EVENTS_DB_ERROR","","",8,null],[13,"ER_ONLY_INTEGERS_ALLOWED","","",8,null],[13,"ER_UNSUPORTED_LOG_ENGINE","","",8,null],[13,"ER_BAD_LOG_STATEMENT","","",8,null],[13,"ER_CANT_RENAME_LOG_TABLE","","",8,null],[13,"ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT","","",8,null],[13,"ER_WRONG_PARAMETERS_TO_NATIVE_FCT","","",8,null],[13,"ER_WRONG_PARAMETERS_TO_STORED_FCT","","",8,null],[13,"ER_NATIVE_FCT_NAME_COLLISION","","",8,null],[13,"ER_DUP_ENTRY_WITH_KEY_NAME","","",8,null],[13,"ER_BINLOG_PURGE_EMFILE","","",8,null],[13,"ER_EVENT_CANNOT_CREATE_IN_THE_PAST","","",8,null],[13,"ER_EVENT_CANNOT_ALTER_IN_THE_PAST","","",8,null],[13,"ER_SLAVE_INCIDENT","","",8,null],[13,"ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT","","",8,null],[13,"ER_BINLOG_UNSAFE_STATEMENT","","",8,null],[13,"ER_SLAVE_FATAL_ERROR","","",8,null],[13,"ER_SLAVE_RELAY_LOG_READ_FAILURE","","",8,null],[13,"ER_SLAVE_RELAY_LOG_WRITE_FAILURE","","",8,null],[13,"ER_SLAVE_CREATE_EVENT_FAILURE","","",8,null],[13,"ER_SLAVE_MASTER_COM_FAILURE","","",8,null],[13,"ER_BINLOG_LOGGING_IMPOSSIBLE","","",8,null],[13,"ER_VIEW_NO_CREATION_CTX","","",8,null],[13,"ER_VIEW_INVALID_CREATION_CTX","","",8,null],[13,"ER_SR_INVALID_CREATION_CTX","","",8,null],[13,"ER_TRG_CORRUPTED_FILE","","",8,null],[13,"ER_TRG_NO_CREATION_CTX","","",8,null],[13,"ER_TRG_INVALID_CREATION_CTX","","",8,null],[13,"ER_EVENT_INVALID_CREATION_CTX","","",8,null],[13,"ER_TRG_CANT_OPEN_TABLE","","",8,null],[13,"ER_CANT_CREATE_SROUTINE","","",8,null],[13,"ER_SLAVE_AMBIGOUS_EXEC_MODE","","",8,null],[13,"ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT","","",8,null],[13,"ER_SLAVE_CORRUPT_EVENT","","",8,null],[13,"ER_LOAD_DATA_INVALID_COLUMN","","",8,null],[13,"ER_LOG_PURGE_NO_FILE","","",8,null],[13,"ER_XA_RBTIMEOUT","","",8,null],[13,"ER_XA_RBDEADLOCK","","",8,null],[13,"ER_NEED_REPREPARE","","",8,null],[13,"ER_DELAYED_NOT_SUPPORTED","","",8,null],[13,"WARN_NO_MASTER_INFO","","",8,null],[13,"WARN_OPTION_IGNORED","","",8,null],[13,"WARN_PLUGIN_DELETE_BUILTIN","","",8,null],[13,"WARN_PLUGIN_BUSY","","",8,null],[13,"ER_VARIABLE_IS_READONLY","","",8,null],[13,"ER_WARN_ENGINE_TRANSACTION_ROLLBACK","","",8,null],[13,"ER_SLAVE_HEARTBEAT_FAILURE","","",8,null],[13,"ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE","","",8,null],[13,"ER_NDB_REPLICATION_SCHEMA_ERROR","","",8,null],[13,"ER_CONFLICT_FN_PARSE_ERROR","","",8,null],[13,"ER_EXCEPTIONS_WRITE_ERROR","","",8,null],[13,"ER_TOO_LONG_TABLE_COMMENT","","",8,null],[13,"ER_TOO_LONG_FIELD_COMMENT","","",8,null],[13,"ER_FUNC_INEXISTENT_NAME_COLLISION","","",8,null],[13,"ER_DATABASE_NAME","","",8,null],[13,"ER_TABLE_NAME","","",8,null],[13,"ER_PARTITION_NAME","","",8,null],[13,"ER_SUBPARTITION_NAME","","",8,null],[13,"ER_TEMPORARY_NAME","","",8,null],[13,"ER_RENAMED_NAME","","",8,null],[13,"ER_TOO_MANY_CONCURRENT_TRXS","","",8,null],[13,"WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED","","",8,null],[13,"ER_DEBUG_SYNC_TIMEOUT","","",8,null],[13,"ER_DEBUG_SYNC_HIT_LIMIT","","",8,null],[13,"ER_DUP_SIGNAL_SET","","",8,null],[13,"ER_SIGNAL_WARN","","",8,null],[13,"ER_SIGNAL_NOT_FOUND","","",8,null],[13,"ER_SIGNAL_EXCEPTION","","",8,null],[13,"ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER","","",8,null],[13,"ER_SIGNAL_BAD_CONDITION_TYPE","","",8,null],[13,"WARN_COND_ITEM_TRUNCATED","","",8,null],[13,"ER_COND_ITEM_TOO_LONG","","",8,null],[13,"ER_UNKNOWN_LOCALE","","",8,null],[13,"ER_SLAVE_IGNORE_SERVER_IDS","","",8,null],[13,"ER_QUERY_CACHE_DISABLED","","",8,null],[13,"ER_SAME_NAME_PARTITION_FIELD","","",8,null],[13,"ER_PARTITION_COLUMN_LIST_ERROR","","",8,null],[13,"ER_WRONG_TYPE_COLUMN_VALUE_ERROR","","",8,null],[13,"ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR","","",8,null],[13,"ER_MAXVALUE_IN_VALUES_IN","","",8,null],[13,"ER_TOO_MANY_VALUES_ERROR","","",8,null],[13,"ER_ROW_SINGLE_PARTITION_FIELD_ERROR","","",8,null],[13,"ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD","","",8,null],[13,"ER_PARTITION_FIELDS_TOO_LONG","","",8,null],[13,"ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE","","",8,null],[13,"ER_BINLOG_ROW_MODE_AND_STMT_ENGINE","","",8,null],[13,"ER_BINLOG_UNSAFE_AND_STMT_ENGINE","","",8,null],[13,"ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE","","",8,null],[13,"ER_BINLOG_STMT_MODE_AND_ROW_ENGINE","","",8,null],[13,"ER_BINLOG_ROW_INJECTION_AND_STMT_MODE","","",8,null],[13,"ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE","","",8,null],[13,"ER_BINLOG_UNSAFE_LIMIT","","",8,null],[13,"ER_BINLOG_UNSAFE_INSERT_DELAYED","","",8,null],[13,"ER_BINLOG_UNSAFE_SYSTEM_TABLE","","",8,null],[13,"ER_BINLOG_UNSAFE_AUTOINC_COLUMNS","","",8,null],[13,"ER_BINLOG_UNSAFE_UDF","","",8,null],[13,"ER_BINLOG_UNSAFE_SYSTEM_VARIABLE","","",8,null],[13,"ER_BINLOG_UNSAFE_SYSTEM_FUNCTION","","",8,null],[13,"ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS","","",8,null],[13,"ER_MESSAGE_AND_STATEMENT","","",8,null],[13,"ER_SLAVE_CONVERSION_FAILED","","",8,null],[13,"ER_SLAVE_CANT_CREATE_CONVERSION","","",8,null],[13,"ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT","","",8,null],[13,"ER_PATH_LENGTH","","",8,null],[13,"ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT","","",8,null],[13,"ER_WRONG_NATIVE_TABLE_STRUCTURE","","",8,null],[13,"ER_WRONG_PERFSCHEMA_USAGE","","",8,null],[13,"ER_WARN_I_S_SKIPPED_TABLE","","",8,null],[13,"ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT","","",8,null],[13,"ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT","","",8,null],[13,"ER_SPATIAL_MUST_HAVE_GEOM_COL","","",8,null],[13,"ER_TOO_LONG_INDEX_COMMENT","","",8,null],[13,"ER_LOCK_ABORTED","","",8,null],[13,"ER_DATA_OUT_OF_RANGE","","",8,null],[13,"ER_WRONG_SPVAR_TYPE_IN_LIMIT","","",8,null],[13,"ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE","","",8,null],[13,"ER_BINLOG_UNSAFE_MIXED_STATEMENT","","",8,null],[13,"ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN","","",8,null],[13,"ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN","","",8,null],[13,"ER_FAILED_READ_FROM_PAR_FILE","","",8,null],[13,"ER_VALUES_IS_NOT_INT_TYPE_ERROR","","",8,null],[13,"ER_ACCESS_DENIED_NO_PASSWORD_ERROR","","",8,null],[13,"ER_SET_PASSWORD_AUTH_PLUGIN","","",8,null],[13,"ER_GRANT_PLUGIN_USER_EXISTS","","",8,null],[13,"ER_TRUNCATE_ILLEGAL_FK","","",8,null],[13,"ER_PLUGIN_IS_PERMANENT","","",8,null],[13,"ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN","","",8,null],[13,"ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX","","",8,null],[13,"ER_STMT_CACHE_FULL","","",8,null],[13,"ER_MULTI_UPDATE_KEY_CONFLICT","","",8,null],[13,"ER_TABLE_NEEDS_REBUILD","","",8,null],[13,"WARN_OPTION_BELOW_LIMIT","","",8,null],[13,"ER_INDEX_COLUMN_TOO_LONG","","",8,null],[13,"ER_ERROR_IN_TRIGGER_BODY","","",8,null],[13,"ER_ERROR_IN_UNKNOWN_TRIGGER_BODY","","",8,null],[13,"ER_INDEX_CORRUPT","","",8,null],[13,"ER_UNDO_RECORD_TOO_BIG","","",8,null],[13,"ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT","","",8,null],[13,"ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE","","",8,null],[13,"ER_BINLOG_UNSAFE_REPLACE_SELECT","","",8,null],[13,"ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT","","",8,null],[13,"ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT","","",8,null],[13,"ER_BINLOG_UNSAFE_UPDATE_IGNORE","","",8,null],[13,"ER_PLUGIN_NO_UNINSTALL","","",8,null],[13,"ER_PLUGIN_NO_INSTALL","","",8,null],[13,"ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT","","",8,null],[13,"ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC","","",8,null],[13,"ER_BINLOG_UNSAFE_INSERT_TWO_KEYS","","",8,null],[13,"ER_TABLE_IN_FK_CHECK","","",8,null],[13,"ER_UNSUPPORTED_ENGINE","","",8,null],[13,"ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST","","",8,null],[6,"MyResult","","",null,null],[11,"description","","",6,{"inputs":[{"name":"myerror"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"myerror"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"myerror"},{"name":"error"}],"output":{"name":"myerror"}}],[11,"from","","",6,{"inputs":[{"name":"myerror"},{"name":"error"}],"output":{"name":"myerror"}}],[11,"from","","",6,{"inputs":[{"name":"myerror"},{"name":"drivererror"}],"output":{"name":"myerror"}}],[11,"from","","",6,{"inputs":[{"name":"myerror"},{"name":"sslerror"}],"output":{"name":"myerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"myerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"myerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"drivererror"}],"output":{"name":"drivererror"}}],[11,"eq","","",7,{"inputs":[{"name":"drivererror"},{"name":"drivererror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"drivererror"},{"name":"drivererror"}],"output":{"name":"bool"}}],[11,"description","","",7,{"inputs":[{"name":"drivererror"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"drivererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"drivererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"servererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"servererror"},{"name":"servererror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"servererror"},{"name":"servererror"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"servererror"}],"output":{"name":"servererror"}}],[11,"eq","","",5,{"inputs":[{"name":"errpacket"},{"name":"errpacket"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"errpacket"},{"name":"errpacket"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"errpacket"}],"output":{"name":"errpacket"}}],[11,"from_payload","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"errpacket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"errpacket"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"value","mysql","",null,null],[3,"SignedDuration","mysql::value","A way to store negativeness of mysql's time. `.0 == true` means negative.",null,null],[4,"Value","","`Value` enumerates possible values in mysql cells. Also `Value` used to fill\nprepared statements.",null,null],[13,"NULL","","",9,null],[13,"Bytes","","",9,null],[13,"Int","","",9,null],[13,"UInt","","",9,null],[13,"Float","","",9,null],[13,"Date","","year, month, day, hour, minutes, seconds, micro seconds",9,null],[13,"Time","","is negative, days, hours, minutes, seconds, micro seconds",9,null],[5,"from_row","","Will *panic* if could not convert `row` to `T`.",null,{"inputs":[{"name":"vec"}],"output":{"name":"t"}}],[5,"from_row_opt","","Will return `Err(row)` if could not convert `row` to `T`",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[5,"from_value","","Will panic if could not convert `v` to `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"t"}}],[5,"from_value_opt","","Will return `Err(v)` if could not convert `v` to `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[8,"FromRow","","Trait to convert `Vec<Value>` into tuple of `FromValue` implementors up to arity 12.",null,null],[10,"from_row","","Will *panic* if could not convert `row` to `Self`.",10,{"inputs":[{"name":"fromrow"},{"name":"vec"}],"output":{"name":"self"}}],[10,"from_row_opt","","Will return `Err(row)` if could not convert `row` to `Self`",10,{"inputs":[{"name":"fromrow"},{"name":"vec"}],"output":{"name":"result"}}],[8,"ToRow","","",null,null],[10,"to_row","","",11,{"inputs":[{"name":"torow"}],"output":{"name":"vec"}}],[8,"ToValue","","",null,null],[10,"to_value","","",12,{"inputs":[{"name":"tovalue"}],"output":{"name":"value"}}],[8,"IntoValue","","Implement this trait if you want to convert something to `Value`.",null,null],[10,"into_value","","",13,{"inputs":[{"name":"intovalue"}],"output":{"name":"value"}}],[8,"FromValue","","Implement this trait to convert value to something.",null,null],[10,"from_value","","Will panic if could not convert `v` to `Self`",14,{"inputs":[{"name":"fromvalue"},{"name":"value"}],"output":{"name":"self"}}],[10,"from_value_opt","","Will return `Err(v)` if could not convert `v` to `Self`",14,{"inputs":[{"name":"fromvalue"},{"name":"value"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"signedduration"}],"output":{"name":"signedduration"}}],[11,"eq","","",15,{"inputs":[{"name":"signedduration"},{"name":"signedduration"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"signedduration"},{"name":"signedduration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"signedduration"},{"name":"signedduration"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"signedduration"},{"name":"signedduration"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"signedduration"},{"name":"signedduration"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"signedduration"},{"name":"signedduration"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"signedduration"},{"name":"signedduration"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"signedduration"},{"name":"signedduration"}],"output":{"name":"ordering"}}],[11,"fmt","","",15,{"inputs":[{"name":"signedduration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"into_str","","Get correct string representation of a mysql value",9,{"inputs":[{"name":"value"}],"output":{"name":"string"}}],[11,"to_row","collections::vec","",16,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"into_value","core::option","",17,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"into_value","collections::vec","",16,{"inputs":[{"name":"vec"}],"output":{"name":"value"}}],[11,"into_value","collections::string","",18,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"into_value","time","",19,{"inputs":[{"name":"timespec"}],"output":{"name":"value"}}],[11,"into_value","std::time::duration","",20,{"inputs":[{"name":"duration"}],"output":{"name":"value"}}],[11,"into_value","mysql::value","",15,{"inputs":[{"name":"signedduration"}],"output":{"name":"value"}}],[11,"into_value","","",9,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"from_value","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"value"}}],[11,"from_value_opt","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"result"}}],[11,"from_value","core::option","",17,{"inputs":[{"name":"option"},{"name":"value"}],"output":{"name":"option"}}],[11,"from_value_opt","","",17,{"inputs":[{"name":"option"},{"name":"value"}],"output":{"name":"result"}}],[11,"from_value","collections::vec","",16,{"inputs":[{"name":"vec"},{"name":"value"}],"output":{"name":"vec"}}],[11,"from_value_opt","","",16,{"inputs":[{"name":"vec"},{"name":"value"}],"output":{"name":"result"}}],[11,"from_value","collections::string","",18,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"string"}}],[11,"from_value_opt","","",18,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"result"}}],[11,"from_value","time","",19,{"inputs":[{"name":"timespec"},{"name":"value"}],"output":{"name":"timespec"}}],[11,"from_value_opt","","",19,{"inputs":[{"name":"timespec"},{"name":"value"}],"output":{"name":"result"}}],[11,"from_value","mysql::value","",15,{"inputs":[{"name":"signedduration"},{"name":"value"}],"output":{"name":"signedduration"}}],[11,"from_value_opt","","",15,{"inputs":[{"name":"signedduration"},{"name":"value"}],"output":{"name":"result"}}],[0,"conn","mysql","",null,null],[3,"Transaction","mysql::conn","",null,null],[3,"Stmt","","Mysql\n[prepared statement](http://dev.mysql.com/doc/internals/en/prepared-statements.html).",null,null],[3,"Column","","Mysql\n[`Column`](http://dev.mysql.com/doc/internals/en/com-query-response.html#packet-Protocol::ColumnDefinition).",null,null],[12,"schema","","Schema name.",21,null],[12,"table","","Virtual table name.",21,null],[12,"org_table","","Phisical table name.",21,null],[12,"name","","Virtual column name.",21,null],[12,"org_name","","Phisical column name.",21,null],[12,"default_values","","Default values.",21,null],[12,"column_length","","Maximum length of the field.",21,null],[12,"character_set","","Column character set.",21,null],[12,"flags","","Flags.",21,null],[12,"column_type","","Column type.",21,null],[12,"decimals","","Max shown decimal digits",21,null],[3,"MyOpts","","Mysql connection options.",null,null],[12,"tcp_addr","","TCP address of mysql server (defaults to `127.0.0.1`).",22,null],[12,"tcp_port","","TCP port of mysql server (defaults to `3306`).",22,null],[12,"unix_addr","","Path to unix socket of mysql server (defaults to `None`).",22,null],[12,"user","","User (defaults to `None`).",22,null],[12,"pass","","Password (defaults to `None`).",22,null],[12,"db_name","","Database name (defaults to `None`).",22,null],[12,"prefer_socket","","Prefer socket connection (defaults to `true`).",22,null],[12,"init","","Commands to execute on each new database connection.",22,null],[12,"verify_peer","","#### Only available if `ssl` feature enabled.\nPerform or not ssl peer verification (defaults to `false`).\nOnly make sense if ssl_opts is not None.",22,null],[12,"ssl_opts","","#### Only available if `ssl` feature enabled.\nSSL certificates and keys in pem format.\nIf not None, then ssl connection implied.",22,null],[3,"MyConn","","Mysql connection.",null,null],[3,"QueryResult","","Mysql result set for text and binary protocols.",null,null],[4,"IsolationLevel","","",null,null],[13,"ReadUncommitted","","",23,null],[13,"ReadCommitted","","",23,null],[13,"RepeatableRead","","",23,null],[13,"Serializable","","",23,null],[0,"pool","","",null,null],[3,"MyPool","mysql::conn::pool","`MyPool` serves to provide you with a [`MyPooledConn`](struct.MyPooledConn.html)'s.\nHowever you can prepare statements directly on `MyPool` without\ninvoking [`MyPool::get_conn`](struct.MyPool.html#method.get_conn).",null,null],[3,"MyPooledConn","","Pooled mysql connection which will return to the pool on `drop`.",null,null],[11,"fmt","","",24,{"inputs":[{"name":"mypool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"mypool"}],"output":{"name":"mypool"}}],[11,"new","","Creates new pool with `min = 10` and `max = 100`.",24,{"inputs":[{"name":"mypool"},{"name":"myopts"}],"output":{"name":"myresult"}}],[11,"new_manual","","Same as `new` but you can set `min` and `max`.",24,{"inputs":[{"name":"mypool"},{"name":"usize"},{"name":"usize"},{"name":"myopts"}],"output":{"name":"myresult"}}],[11,"get_conn","","Gives you a [`MyPooledConn`](struct.MyPooledConn.html).",24,{"inputs":[{"name":"mypool"}],"output":{"name":"myresult"}}],[11,"prepare","","Will prepare statement.",24,{"inputs":[{"name":"mypool"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"prep_exec","","Shortcut for `try!(pool.get_conn()).prep_exec(..)`.",24,{"inputs":[{"name":"mypool"},{"name":"a"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"start_transaction","","Shortcut for `try!(pool.get_conn()).start_transaction(..)`.",24,{"inputs":[{"name":"mypool"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"myresult"}}],[11,"fmt","","",25,{"inputs":[{"name":"mypooledconn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",25,{"inputs":[{"name":"mypooledconn"}],"output":null}],[11,"query","","Redirects to\n[`MyConn#query`](../struct.MyConn.html#method.query).",25,{"inputs":[{"name":"mypooledconn"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"prepare","","Redirects to\n[`MyConn#prepare`](../struct.MyConn.html#method.prepare).",25,{"inputs":[{"name":"mypooledconn"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"prep_exec","","Redirects to\n[`MyConn#prep_exec`](../struct.MyConn.html#method.prep_exec).",25,{"inputs":[{"name":"mypooledconn"},{"name":"a"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"start_transaction","","Redirects to\n[`MyConn#start_transaction`](../struct.MyConn.html#method.start_transaction)",25,{"inputs":[{"name":"mypooledconn"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"myresult"}}],[11,"as_mut","","Gives mutable reference to the wrapped\n[`MyConn`](../struct.MyConn.html).",25,{"inputs":[{"name":"mypooledconn"}],"output":{"name":"myconn"}}],[11,"as_ref","","Gives reference to the wrapped\n[`MyConn`](../struct.MyConn.html).",25,{"inputs":[{"name":"mypooledconn"}],"output":{"name":"myconn"}}],[11,"unwrap","","Unwraps wrapped [`MyConn`](../struct.MyConn.html).",25,{"inputs":[{"name":"mypooledconn"}],"output":{"name":"myconn"}}],[11,"fmt","mysql::conn","",23,{"inputs":[{"name":"isolationlevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"isolationlevel"}],"output":{"name":"isolationlevel"}}],[11,"eq","","",23,{"inputs":[{"name":"isolationlevel"},{"name":"isolationlevel"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"isolationlevel"},{"name":"isolationlevel"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"isolationlevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","See [`MyConn#query`](struct.MyConn.html#method.query).",26,{"inputs":[{"name":"transaction"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"prepare","","See [`MyConn#prepare`](struct.MyConn.html#method.prepare).",26,{"inputs":[{"name":"transaction"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"prep_exec","","See [`MyConn#prep_exec`](struct.MyConn.html#method.prep_exec).",26,{"inputs":[{"name":"transaction"},{"name":"a"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"commit","","Will consume and commit transaction.",26,{"inputs":[{"name":"transaction"}],"output":{"name":"myresult"}}],[11,"rollback","","Will consume and rollback transaction. You also can rely on `Drop` implementation but it\nwill swallow errors.",26,{"inputs":[{"name":"transaction"}],"output":{"name":"myresult"}}],[11,"drop","","Will rollback transaction.",26,{"inputs":[{"name":"transaction"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"stmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"params_ref","","Returns a slice of a [`Column`s](struct.Column.html) which represents\n`Stmt`'s params if any.",27,{"inputs":[{"name":"stmt"}],"output":{"name":"option"}}],[11,"columns_ref","","Returns a slice of a [`Column`s](struct.Column.html) which represents\n`Stmt`'s columns if any.",27,{"inputs":[{"name":"stmt"}],"output":{"name":"option"}}],[11,"column_index","","Returns index of a `Stmt`'s column by name.",27,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"option"}}],[11,"execute","","Executes prepared statement with an arguments passed as a\n[`ToRow`](../value/trait.ToRow.html) implementor.",27,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"fmt","","",21,{"inputs":[{"name":"column"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"column"},{"name":"column"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"column"},{"name":"column"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"column"}],"output":{"name":"column"}}],[11,"fmt","","",22,{"inputs":[{"name":"myopts"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"myopts"},{"name":"myopts"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"myopts"},{"name":"myopts"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"myopts"}],"output":{"name":"myopts"}}],[11,"default","","",22,{"inputs":[{"name":"myopts"}],"output":{"name":"myopts"}}],[11,"fmt","","",28,{"inputs":[{"name":"myconn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new `MyConn`.",28,{"inputs":[{"name":"myconn"},{"name":"myopts"}],"output":{"name":"myresult"}}],[11,"reset","","Resets `MyConn` (drops state then reconnects).",28,{"inputs":[{"name":"myconn"}],"output":{"name":"myresult"}}],[11,"ping","","Executes [`COM_PING`](http://dev.mysql.com/doc/internals/en/com-ping.html)\non `MyConn`. Return `true` on success or `false` on error.",28,{"inputs":[{"name":"myconn"}],"output":{"name":"bool"}}],[11,"start_transaction","","Starts new transaction with provided options.\n`readonly` is only available since MySQL 5.6.5.",28,{"inputs":[{"name":"myconn"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"myresult"}}],[11,"query","","Implements text protocol of mysql server.",28,{"inputs":[{"name":"myconn"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"prepare","","Implements binary protocol of mysql server.",28,{"inputs":[{"name":"myconn"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"prep_exec","","Prepares and executes statement in one call.",28,{"inputs":[{"name":"myconn"},{"name":"a"},{"name":"t"}],"output":{"name":"myresult"}}],[11,"drop","","",28,{"inputs":[{"name":"myconn"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"queryresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"affected_rows","","Returns\n[`OkPacket`'s](http://dev.mysql.com/doc/internals/en/packet-OK_Packet.html)\naffected rows.",29,{"inputs":[{"name":"queryresult"}],"output":{"name":"u64"}}],[11,"last_insert_id","","Returns\n[`OkPacket`'s](http://dev.mysql.com/doc/internals/en/packet-OK_Packet.html)\nlast insert id.",29,{"inputs":[{"name":"queryresult"}],"output":{"name":"u64"}}],[11,"warnings","","Returns\n[`OkPacket`'s](http://dev.mysql.com/doc/internals/en/packet-OK_Packet.html)\nwarnings count.",29,{"inputs":[{"name":"queryresult"}],"output":{"name":"u16"}}],[11,"info","","Returns\n[`OkPacket`'s](http://dev.mysql.com/doc/internals/en/packet-OK_Packet.html)\ninfo.",29,{"inputs":[{"name":"queryresult"}],"output":{"name":"vec"}}],[11,"column_index","","Returns index of a `QueryResult`'s column by name.",29,{"inputs":[{"name":"queryresult"},{"name":"t"}],"output":{"name":"option"}}],[11,"columns_ref","","Returns a slice of a [`Column`s](struct.Column.html) which represents\n`QueryResult`'s columns if any.",29,null],[11,"more_results_exists","","This predicate will help you if you are expecting multiple result sets.",29,{"inputs":[{"name":"queryresult"}],"output":{"name":"bool"}}],[11,"next","","",29,{"inputs":[{"name":"queryresult"}],"output":{"name":"option"}}],[11,"drop","","",29,{"inputs":[{"name":"queryresult"}],"output":null}]],"paths":[[4,"Command"],[4,"ColumnType"],[3,"StatusFlags"],[3,"CapabilityFlags"],[3,"ColumnFlags"],[3,"ErrPacket"],[4,"MyError"],[4,"DriverError"],[4,"ServerError"],[4,"Value"],[8,"FromRow"],[8,"ToRow"],[8,"ToValue"],[8,"IntoValue"],[8,"FromValue"],[3,"SignedDuration"],[3,"Vec"],[4,"Option"],[3,"String"],[3,"Timespec"],[3,"Duration"],[3,"Column"],[3,"MyOpts"],[4,"IsolationLevel"],[3,"MyPool"],[3,"MyPooledConn"],[3,"Transaction"],[3,"Stmt"],[3,"MyConn"],[3,"QueryResult"]]};
searchIndex['phf_codegen'] = {"items":[[0,"","phf_codegen","A set of builders to generate Rust source for PHF data structures at\ncompile time.",null,null],[3,"Map","","A builder for the `phf::Map` type.",null,null],[3,"Set","","A builder for the `phf::Set` type.",null,null],[3,"OrderedMap","","A builder for the `phf::OrderedMap` type.",null,null],[3,"OrderedSet","","A builder for the `phf::OrderedSet` type.",null,null],[11,"new","","Creates a new `phf::Map` builder.",0,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"entry","","Adds an entry to the builder.",0,{"inputs":[{"name":"map"},{"name":"k"},{"name":"str"}],"output":{"name":"map"}}],[11,"build","","Constructs a `phf::Map`, outputting Rust source to the provided writer.",0,{"inputs":[{"name":"map"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `phf::Set` builder.",1,{"inputs":[{"name":"set"}],"output":{"name":"set"}}],[11,"entry","","Adds an entry to the builder.",1,{"inputs":[{"name":"set"},{"name":"t"}],"output":{"name":"set"}}],[11,"build","","Constructs a `phf::Set`, outputting Rust source to the provided writer.",1,{"inputs":[{"name":"set"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Constructs a enw `phf::OrderedMap` builder.",2,{"inputs":[{"name":"orderedmap"}],"output":{"name":"orderedmap"}}],[11,"entry","","Adds an entry to the builder.",2,{"inputs":[{"name":"orderedmap"},{"name":"k"},{"name":"str"}],"output":{"name":"orderedmap"}}],[11,"build","","Constructs a `phf::OrderedMap`, outputting Rust source to the provided\nwriter.",2,{"inputs":[{"name":"orderedmap"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `phf::OrderedSet` builder.",3,{"inputs":[{"name":"orderedset"}],"output":{"name":"orderedset"}}],[11,"entry","","Adds an entry to the builder.",3,{"inputs":[{"name":"orderedset"},{"name":"t"}],"output":{"name":"orderedset"}}],[11,"build","","Constructs a `phf::OrderedSet`, outputting Rust source to the provided\nwriter.",3,{"inputs":[{"name":"orderedset"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"Map"],[3,"Set"],[3,"OrderedMap"],[3,"OrderedSet"]]};
searchIndex['docopt'] = {"items":[[0,"","docopt","Docopt for Rust. This implementation conforms to the\n[official description of Docopt](http://docopt.org/) and\n[passes its test suite](https://github.com/docopt/docopt/pull/201).",null,null],[3,"ArgvMap","","A map containing matched values from command line arguments.",null,null],[3,"Decoder","","Decoder for `ArgvMap` into your own `Decodable` types.",null,null],[3,"Docopt","","The main Docopt type, which is constructed with a Docopt usage string.",null,null],[4,"Error","","Represents the different types of Docopt errors.",null,null],[13,"Usage","","Parsing the usage string failed.",0,null],[13,"Argv","","Parsing the argv specified failed.",0,null],[13,"NoMatch","","The given argv parsed successfully, but it did not match any example\nusage of the program.",0,null],[13,"Decode","","This indicates a problem decoding a successful argv match into a\ndecodable value.",0,null],[13,"WithProgramUsage","","Parsing failed, and the program usage should be printed next to the\nfailure message. Typically this wraps `Argv` and `NoMatch` errors.",0,null],[13,"Help","","Decoding or parsing failed because the command line specified that the\nhelp message should be printed.",0,null],[13,"Version","","Decoding or parsing failed because the command line specified that the\nversion should be printed",0,null],[4,"Value","","A matched command line value.",null,null],[13,"Switch","","A boolean value from a flag that has no argument.",1,null],[13,"Counted","","The number of occurrences of a repeated flag.",1,null],[13,"Plain","","A positional or flag argument.",1,null],[13,"List","","A List of positional or flag arguments.",1,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fatal","","Return whether this was a fatal error or not.",0,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"exit","","Print this error and immediately exit the program.",0,{"inputs":[{"name":"error"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"docopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"docopt"}],"output":{"name":"docopt"}}],[11,"new","","Parse the Docopt usage string given.",2,{"inputs":[{"name":"docopt"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","Parse and decode the given argv.",2,{"inputs":[{"name":"docopt"}],"output":{"name":"result"}}],[11,"parse","","Parse command line arguments and try to match them against a usage\npattern specified in the Docopt string.",2,{"inputs":[{"name":"docopt"}],"output":{"name":"result"}}],[11,"argv","","Set the argv to be used for Docopt parsing.",2,{"inputs":[{"name":"docopt"},{"name":"i"}],"output":{"name":"docopt"}}],[11,"options_first","","Enables the \"options first\" Docopt behavior.",2,{"inputs":[{"name":"docopt"},{"name":"bool"}],"output":{"name":"docopt"}}],[11,"help","","Enables automatic handling of `--help`.",2,{"inputs":[{"name":"docopt"},{"name":"bool"}],"output":{"name":"docopt"}}],[11,"version","","Enables automatic handling of `--version`.",2,{"inputs":[{"name":"docopt"},{"name":"option"}],"output":{"name":"docopt"}}],[11,"clone","","",3,{"inputs":[{"name":"argvmap"}],"output":{"name":"argvmap"}}],[11,"decode","","Tries to decode the map of values into a struct.",3,{"inputs":[{"name":"argvmap"}],"output":{"name":"result"}}],[11,"get_bool","","Finds the value corresponding to `key` and calls `as_bool()` on it.\nIf the key does not exist, `false` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"bool"}}],[11,"get_count","","Finds the value corresponding to `key` and calls `as_count()` on it.\nIf the key does not exist, `0` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"u64"}}],[11,"get_str","","Finds the value corresponding to `key` and calls `as_str()` on it.\nIf the key does not exist, `\"\"` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"str"}}],[11,"get_vec","","Finds the value corresponding to `key` and calls `as_vec()` on it.\nIf the key does not exist, `vec!()` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"vec"}}],[11,"find","","Return the raw value corresponding to some `key`.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"option"}}],[11,"len","","Return the number of values, not including synonyms.",3,{"inputs":[{"name":"argvmap"}],"output":{"name":"usize"}}],[11,"fmt","","",3,{"inputs":[{"name":"argvmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_bool","","Returns the value as a bool.",1,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_count","","Returns the value as a count of the number of times it occurred.",1,{"inputs":[{"name":"value"}],"output":{"name":"u64"}}],[11,"as_str","","Returns the value as a string.",1,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"as_vec","","Returns the value as a list of strings.",1,{"inputs":[{"name":"value"}],"output":{"name":"vec"}}],[11,"error","","",4,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[11,"read_nil","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",4,null],[11,"read_enum_variant_arg","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",4,null],[11,"read_enum_struct_variant_field","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",4,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",4,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",4,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[4,"Value"],[3,"Docopt"],[3,"ArgvMap"],[3,"Decoder"]]};
searchIndex['env_logger'] = {"items":[[0,"","env_logger","A logger configured via an environment variable.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}]],"paths":[]};
searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>",null,null],[3,"Ipv6Address","","A 128 bit IPv6 address",null,null],[12,"pieces","","",0,null],[3,"Url","","The parsed representation of an absolute URL.",null,null],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1,null],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1,null],[12,"query","","The query string of the URL.",1,null],[12,"fragment","","The fragment identifier of the URL.",1,null],[3,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP.",null,null],[12,"username","","The username of the URL, as a possibly empty, percent-encoded string.",2,null],[12,"password","","The password of the URL.",2,null],[12,"host","","The host of the URL, either a domain name or an IPv4 address",2,null],[12,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2,null],[12,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",2,null],[12,"path","","The path of the URL, as vector of percent-encoded strings.",2,null],[3,"UrlParser","","A set of optional parameters for URL parsing.",null,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A (DNS) domain name or an IPv4 address.",3,null],[13,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",4,null],[13,"InvalidScheme","","",4,null],[13,"InvalidPort","","",4,null],[13,"InvalidIpv6Address","","",4,null],[13,"InvalidDomainCharacter","","",4,null],[13,"InvalidCharacter","","",4,null],[13,"InvalidBackslash","","",4,null],[13,"InvalidPercentEncoded","","",4,null],[13,"InvalidAtSymbolInUser","","",4,null],[13,"ExpectedTwoSlashes","","",4,null],[13,"ExpectedInitialSlash","","",4,null],[13,"NonUrlCodePoint","","",4,null],[13,"RelativeUrlWithScheme","","",4,null],[13,"RelativeUrlWithoutBase","","",4,null],[13,"RelativeUrlWithNonRelativeBase","","",4,null],[13,"NonAsciiDomainsNotSupportedYet","","",4,null],[13,"CannotSetJavascriptFragment","","",4,null],[13,"CannotSetPortWithFileLikeScheme","","",4,null],[13,"CannotSetUsernameWithNonRelativeScheme","","",4,null],[13,"CannotSetPasswordWithNonRelativeScheme","","",4,null],[13,"CannotSetHostPortWithNonRelativeScheme","","",4,null],[13,"CannotSetHostWithNonRelativeScheme","","",4,null],[13,"CannotSetPortWithNonRelativeScheme","","",4,null],[13,"CannotSetPathWithNonRelativeScheme","","",4,null],[4,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*.",null,null],[13,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5,null],[13,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5,null],[4,"SchemeType","","Determines the behavior of the URL parser for a given scheme.",null,null],[13,"NonRelative","","Indicate that the scheme is *non-relative*.",6,null],[13,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6,null],[13,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6,null],[5,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme",null,{"inputs":[{"name":"str"}],"output":{"name":"schemetype"}}],[11,"cmp","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"eq","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"ipv6address"}],"output":{"name":"ipv6address"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3,{"inputs":[{"name":"host"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"serialize","","Serialize the host as a string.",3,{"inputs":[{"name":"host"}],"output":{"name":"string"}}],[11,"fmt","","",3,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse an IPv6 address, without the [] square brackets.",0,{"inputs":[{"name":"ipv6address"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"serialize","","Serialize the IPv6 address to a string.",0,{"inputs":[{"name":"ipv6address"}],"output":{"name":"string"}}],[11,"fmt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",4,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"urlutils","","These methods are not meant for use in Rust code,\nonly to help implement the JavaScript URLUtils API: http://url.spec.whatwg.org/#urlutils",null,null],[3,"UrlUtilsWrapper","url::urlutils","",null,null],[12,"url","","",7,null],[12,"parser","","",7,null],[0,"percent_encoding","url","",null,null],[3,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded.",null,null],[5,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`.",null,null],[5,"percent_encode","","Percent-encode the given bytes.",null,null],[5,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`.",null,{"inputs":[{"name":"str"},{"name":"encodeset"},{"name":"string"}],"output":null}],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"encodeset"}],"output":{"name":"string"}}],[5,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`.",null,null],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[5,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8.",null,null],[5,"from_hex","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[7,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data.",null,null],[7,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[7,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[7,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords.",null,null],[7,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL.",null,null],[7,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL.",null,null],[7,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization.",null,null],[11,"clone","","",8,{"inputs":[{"name":"encodeset"}],"output":{"name":"encodeset"}}],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms.",null,null],[5,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs.",null,null],[5,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format.",null,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.",null,null],[5,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"format","url","Formatting utilities for URLs.",null,null],[3,"PathFormatter","url::format","Formatter and serializer for URL path data.",null,null],[12,"path","","The path as a slice of string-like objects (String or &str).",9,null],[3,"UserInfoFormatter","","Formatter and serializer for URL username and password data.",null,null],[12,"username","","URL username as a string slice.",10,null],[12,"password","","URL password as an optional string slice.",10,null],[3,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field.",null,null],[12,"url","","",11,null],[11,"fmt","","",9,{"inputs":[{"name":"pathformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"userinfoformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"urlnofragmentformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"ErrorHandler","url","This is called on non-fatal parse errors.",null,null],[6,"ParseResult","","",null,null],[11,"cmp","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"eq","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"schemedata"}],"output":{"name":"schemedata"}}],[11,"eq","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"relativeschemedata"}}],[11,"eq","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"from_str","","",1,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"new","","Return a new UrlParser with default parameters.",12,{"inputs":[{"name":"urlparser"}],"output":{"name":"urlparser"}}],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",12,{"inputs":[{"name":"urlparser"},{"name":"url"}],"output":{"name":"urlparser"}}],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",12,{"inputs":[{"name":"urlparser"},{"name":"errorhandler"}],"output":{"name":"urlparser"}}],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",12,null],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",12,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",12,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"schemetype"}}],[11,"fmt","","",6,{"inputs":[{"name":"schemetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"default_port","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"option"}}],[11,"same_as","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"parse","","Parse an URL with the default `UrlParser` parameters.",1,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"serialize","","Return the serialization of this URL as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username","","If the URL is in a *relative scheme*, return its username.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_userinfo","","Serialize the URL's username and password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path","","If the URL is in a *relative scheme*, return its path components.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",1,{"inputs":[{"name":"url"},{"name":"i"}],"output":null}],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"encode","","",1,{"inputs":[{"name":"url"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"url"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"result"}}],[11,"domain","","If the host is a domain, return the domain as a string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"serialize_path","","Serialize the path as a string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"serialize_userinfo","","Serialize the userinfo as a string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Ipv6Address"],[3,"Url"],[3,"RelativeSchemeData"],[4,"Host"],[4,"ParseError"],[4,"SchemeData"],[4,"SchemeType"],[3,"UrlUtilsWrapper"],[3,"EncodeSet"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[3,"UrlParser"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"RadixFmt","","",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"hash","","",5,{"inputs":[{"name":"biguint"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",7,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,{"inputs":[{"name":"bigint"},{"name":"h"}],"output":null}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",8,null],[12,"im","","Imaginary portion of the complex number",8,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",8,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",8,null],[11,"from_polar","","Convert a polar representation into a complex number.",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",14,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",15,null],[13,"Invalid","","",15,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",16,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",16,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",17,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",17,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",18,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",19,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",22,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",23,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",24,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",25,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",29,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",30,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",30,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",30,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",30,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",30,null],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",31,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",31,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",31,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",31,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"RadixFmt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['toml'] = {"items":[[0,"","toml","A TOML-parsing library",null,null],[3,"Parser","","Parser for converting a string to a TOML `Value` instance.",null,null],[12,"errors","","A list of all errors which have occurred during parsing.",0,null],[3,"ParserError","","A structure representing a parse error.",null,null],[12,"lo","","The low byte at which this error is pointing at.",1,null],[12,"hi","","One byte beyond the last character at which this error is pointing at.",1,null],[12,"desc","","A human-readable description explaining what the error is.",1,null],[3,"Encoder","","A structure to transform Rust values into TOML values.",null,null],[12,"toml","","Output TOML that is emitted. The current version of this encoder forces\nthe top-level representation of a structure to be a table.",2,null],[3,"Decoder","","A structure to transform TOML values into Rust values.",null,null],[12,"toml","","The TOML value left over after decoding. This can be used to inspect\nwhether fields were decoded or not.",3,null],[3,"DecodeError","","Description for errors which can occur while decoding a type.",null,null],[12,"field","","Field that this error applies to.",4,null],[12,"kind","","The type of error which occurred while decoding,",4,null],[4,"Error","","Enumeration of errors which can occur while encoding a rust value into a\nTOML value.",null,null],[13,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key\nwas previously emitted.",5,null],[13,"NoValue","","Indication that a key was emitted, but not value was emitted.",5,null],[13,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid\nlocation.",5,null],[13,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a\nmap key type.",5,null],[4,"DecodeErrorKind","","Enumeration of possible errors which can occur while decoding a structure.",null,null],[13,"ApplicationError","","An error flagged by the application, e.g. value out of range",6,null],[13,"ExpectedField","","A field was expected, but none was found.",6,null],[13,"UnknownField","","A field was found, but it was not an expected one.",6,null],[13,"ExpectedType","","A field was found, but it had the wrong type.",6,null],[13,"ExpectedMapKey","","The nth map key was expected, but none was found.",6,null],[13,"ExpectedMapElement","","The nth map element was expected, but none was found.",6,null],[13,"NoEnumVariants","","An enum decoding was requested, but no variants were supplied",6,null],[13,"NilTooLong","","The unit type was being decoded, but a non-zero length string was found",6,null],[13,"SyntaxError","","There was an error with the syntactical structure of the TOML.",6,null],[13,"EndOfStream","","The end of the TOML input was reached too soon",6,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","",7,null],[13,"Integer","","",7,null],[13,"Float","","",7,null],[13,"Boolean","","",7,null],[13,"Datetime","","",7,null],[13,"Array","","",7,null],[13,"Table","","",7,null],[5,"encode","","Encodes an encodable value into a TOML value.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"encode_str","","Encodes an encodable value into a TOML string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decodes a TOML value into a decodable type.",null,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[5,"decode_str","","Decodes a string into a toml-encoded value.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new parser for a string.",0,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"parser"}}],[11,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0,null],[11,"parse","","Executes the parser, parsing the string contained within.",0,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"emit_nil","","",2,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_usize","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u8","","",2,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_u16","","",2,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u32","","",2,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u64","","",2,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_isize","","",2,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i8","","",2,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_i16","","",2,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i32","","",2,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i64","","",2,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_bool","","",2,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f32","","",2,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_f64","","",2,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_char","","",2,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",2,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",2,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",2,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_option_some","","",2,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"value"},{"name":"e"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new encoder which will emit to the given output stream.",2,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"read_nil","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",3,null],[11,"read_enum_variant_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",3,null],[11,"read_enum_struct_variant_field","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"error","","",3,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodeerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"decodeerror"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"decodeerror"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"decodeerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"decodeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new decoder, consuming the TOML value to decode.",3,{"inputs":[{"name":"decoder"},{"name":"value"}],"output":{"name":"decoder"}}],[11,"fmt","","",4,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"decodeerror"}],"output":{"name":"str"}}],[6,"Array","","Type representing a TOML array, payload of the Value::Array variant",null,null],[6,"Table","","Type representing a TOML table, payload of the Value::Table variant",null,null],[11,"fmt","","",7,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"eq","","",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"same_type","","Tests whether this and another value have the same type.",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"type_str","","Returns a human-readable representation of the type of this value.",7,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"as_str","","Extracts the string of this value if it is a string.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_integer","","Extracts the integer value if it is an integer.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_float","","Extracts the float value if it is a float.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_bool","","Extracts the boolean value if it is a boolean.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_slice","","Extracts the array value if it is an array.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_table","","Extracts the table value if it is a table.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"lookup","","Lookups for value at specified path.",7,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"from_str","","",7,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Parser"],[3,"ParserError"],[3,"Encoder"],[3,"Decoder"],[3,"DecodeError"],[4,"Error"],[4,"DecodeErrorKind"],[4,"Value"]]};
searchIndex['uuid'] = {"items":[[0,"","uuid","Generate and parse UUIDs",null,null],[3,"Uuid","","A Universally Unique Identifier (UUID)",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID",null,null],[11,"clone","","",0,{"inputs":[{"name":"uuidversion"}],"output":{"name":"uuidversion"}}],[11,"eq","","",0,{"inputs":[{"name":"uuidversion"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"uuidversion"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"uuidvariant"}],"output":{"name":"uuidvariant"}}],[11,"eq","","",1,{"inputs":[{"name":"uuidvariant"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"uuidvariant"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"fmt","","",3,{"inputs":[{"name":"uuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,{"inputs":[{"name":"uuid"},{"name":"s"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","","Returns a nil or empty UUID (containing all zeroes)",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"new","","Create a new UUID of the specified version",3,{"inputs":[{"name":"uuid"},{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"new_v4","","Creates a new random UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a UUID using the supplied field values",3,null],[11,"from_bytes","","Creates a UUID using the supplied bytes",3,null],[11,"get_variant","","Returns the variant of the UUID structure",3,{"inputs":[{"name":"uuid"}],"output":{"name":"option"}}],[11,"get_version_num","","Returns the version number of the UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"to_simple_string","","Returns the UUID as a string of 16 hexadecimal digits",3,{"inputs":[{"name":"uuid"}],"output":{"name":"string"}}],[11,"to_hyphenated_string","","Returns a string of hexadecimal digits, separated into groups with a hyphen.",3,{"inputs":[{"name":"uuid"}],"output":{"name":"string"}}],[11,"to_urn_string","","Returns the UUID formatted as a full URN string",3,{"inputs":[{"name":"uuid"}],"output":{"name":"string"}}],[11,"parse_str","","Parses a UUID from a string of hexadecimal digits with optional hyphens",3,{"inputs":[{"name":"uuid"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"uuid"}],"output":{"name":"bool"}}],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a UUID",3,{"inputs":[{"name":"uuid"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"uuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"encode","","Encode a UUID as a hyphenated string",3,{"inputs":[{"name":"uuid"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","Decode a UUID from a string",3,{"inputs":[{"name":"uuid"},{"name":"d"}],"output":{"name":"result"}}],[11,"rand","","",3,{"inputs":[{"name":"uuid"},{"name":"r"}],"output":{"name":"uuid"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"]]};
searchIndex['phf_generator'] = {"items":[[0,"","phf_generator","",null,null],[3,"HashState","","",null,null],[12,"key","","",0,null],[12,"disps","","",0,null],[12,"map","","",0,null],[5,"generate_hash","","",null,null]],"paths":[[3,"HashState"]]};
searchIndex['r2d2'] = {"items":[[0,"","r2d2","A generic connection pool.",null,null],[3,"Config","","A struct specifying the runtime configuration of a pool.",null,null],[3,"NopErrorHandler","","A `HandleError` implementation which does nothing.",null,null],[3,"LoggingErrorHandler","","A `HandleError` implementation which logs at the error level.",null,null],[3,"NopConnectionCustomizer","","A `CustomizeConnection` which does nothing.",null,null],[3,"Pool","","A generic connection pool.",null,null],[3,"InitializationError","","An error returned by `Pool::new` if it fails to initialize connections.",null,null],[3,"GetTimeout","","An error returned by `Pool::get` if it times out without retrieving a connection.",null,null],[3,"PooledConnection","","A smart pointer wrapping a connection.",null,null],[0,"config","","Pool configuration.",null,null],[3,"Builder","r2d2::config","A builder for `Config`.",null,null],[3,"Config","","A struct specifying the runtime configuration of a pool.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"builder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Builder`.",0,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"pool_size","","Sets `pool_size`.",0,{"inputs":[{"name":"builder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"helper_threads","","Sets `helper_threads`.",0,{"inputs":[{"name":"builder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"test_on_check_out","","Sets `test_on_check_out`.",0,{"inputs":[{"name":"builder"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"initialization_fail_fast","","Sets `initialization_fail_fast`.",0,{"inputs":[{"name":"builder"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"connection_timeout_ms","","Sets `connection_timeout_ms` to the specified number of milliseconds.",0,{"inputs":[{"name":"builder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"error_handler","","Sets the `error_handler`.",0,{"inputs":[{"name":"builder"},{"name":"box"}],"output":{"name":"builder"}}],[11,"connection_customizer","","Sets the `connection_customizer`.",0,{"inputs":[{"name":"builder"},{"name":"box"}],"output":{"name":"builder"}}],[11,"build","","Consumes the `Builder`, turning it into a `Config`.",0,{"inputs":[{"name":"builder"}],"output":{"name":"config"}}],[11,"fmt","","",1,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"builder","","Creates a new `Builder` which can be used to construct a customized\n`Config`.",1,{"inputs":[{"name":"config"}],"output":{"name":"builder"}}],[11,"pool_size","","The number of connections managed by the pool.",1,{"inputs":[{"name":"config"}],"output":{"name":"u32"}}],[11,"helper_threads","","The number of threads that the pool will use for asynchronous\noperations such as connection creation and health checks.",1,{"inputs":[{"name":"config"}],"output":{"name":"u32"}}],[11,"test_on_check_out","","If true, the health of a connection will be verified via a call to\n`ConnectionManager::is_valid` before it is checked out of the pool.",1,{"inputs":[{"name":"config"}],"output":{"name":"bool"}}],[11,"initialization_fail_fast","","If true, `Pool::new` will synchronously initialize its connections,\nreturning an error if they could not be created.",1,{"inputs":[{"name":"config"}],"output":{"name":"bool"}}],[11,"connection_timeout_ms","","Calls to `Pool::get` will wait this many milliseconds for a connection\nto become available before returning an error.",1,{"inputs":[{"name":"config"}],"output":{"name":"u32"}}],[11,"error_handler","","The handler for error reported in the pool.",1,{"inputs":[{"name":"config"}],"output":{"name":"handleerror"}}],[11,"connection_customizer","","The connection customizer used by the pool.",1,{"inputs":[{"name":"config"}],"output":{"name":"customizeconnection"}}],[8,"ManageConnection","r2d2","A trait which provides connection-specific functionality.",null,null],[16,"Connection","","The connection type this manager deals with.",2,null],[16,"Error","","The error type returned by `Connection`s.",2,null],[10,"connect","","Attempts to create a new connection.",2,{"inputs":[{"name":"manageconnection"}],"output":{"name":"result"}}],[10,"is_valid","","Determines if the connection is still connected to the database.",2,{"inputs":[{"name":"manageconnection"},{"name":"connection"}],"output":{"name":"result"}}],[10,"has_broken","","*Quickly* determines if the connection is no longer usable.",2,{"inputs":[{"name":"manageconnection"},{"name":"connection"}],"output":{"name":"bool"}}],[8,"HandleError","","A trait which handles errors reported by the `ManageConnection`.",null,null],[10,"handle_error","","Handles an error.",3,{"inputs":[{"name":"handleerror"},{"name":"e"}],"output":null}],[8,"CustomizeConnection","","A trait which allows for customization of connections.",null,null],[11,"on_acquire","","Called with connections immediately after they are returned from\n`ManageConnection::connect`.",4,{"inputs":[{"name":"customizeconnection"},{"name":"c"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"noperrorhandler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"noperrorhandler"}],"output":{"name":"noperrorhandler"}}],[11,"handle_error","","",5,{"inputs":[{"name":"noperrorhandler"},{"name":"e"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"loggingerrorhandler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"loggingerrorhandler"}],"output":{"name":"loggingerrorhandler"}}],[11,"handle_error","","",6,{"inputs":[{"name":"loggingerrorhandler"},{"name":"e"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"nopconnectioncustomizer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"nopconnectioncustomizer"}],"output":{"name":"nopconnectioncustomizer"}}],[11,"drop","","",8,{"inputs":[{"name":"pool"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"pool"}],"output":{"name":"pool"}}],[11,"fmt","","",8,{"inputs":[{"name":"pool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"initializationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"initializationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"initializationerror"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"gettimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"gettimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"gettimeout"}],"output":{"name":"str"}}],[11,"new","","Creates a new connection pool.",8,{"inputs":[{"name":"pool"},{"name":"config"},{"name":"m"}],"output":{"name":"result"}}],[11,"get","","Retrieves a connection from the pool.",8,{"inputs":[{"name":"pool"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"pooledconnection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"pooledconnection"}],"output":null}],[11,"deref","","",11,{"inputs":[{"name":"pooledconnection"}],"output":{"name":"connection"}}],[11,"deref_mut","","",11,{"inputs":[{"name":"pooledconnection"}],"output":{"name":"connection"}}]],"paths":[[3,"Builder"],[3,"Config"],[8,"ManageConnection"],[8,"HandleError"],[8,"CustomizeConnection"],[3,"NopErrorHandler"],[3,"LoggingErrorHandler"],[3,"NopConnectionCustomizer"],[3,"Pool"],[3,"InitializationError"],[3,"GetTimeout"],[3,"PooledConnection"]]};
searchIndex['openssl'] = {"items":[[0,"","openssl","",null,null],[0,"asn1","","",null,null],[3,"Asn1Time","openssl::asn1","",null,null],[11,"new","","Wraps existing ASN1_TIME and takes ownership",0,null],[11,"days_from_now","","Creates a new time on specified interval in days from now",0,{"inputs":[{"name":"asn1time"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_handle","","Returns raw handle",0,null],[11,"drop","","",0,{"inputs":[{"name":"asn1time"}],"output":null}],[0,"bn","openssl","",null,null],[3,"BigNum","openssl::bn","",null,null],[4,"RNGProperty","","",null,null],[13,"MsbMaybeZero","","",1,null],[13,"MsbOne","","",1,null],[13,"TwoMsbOne","","",1,null],[0,"unchecked","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"neg","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"clone","","",1,{"inputs":[{"name":"rngproperty"}],"output":{"name":"rngproperty"}}],[11,"new","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"new_from","","",2,{"inputs":[{"name":"bignum"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_dec_str","","",2,{"inputs":[{"name":"bignum"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_hex_str","","",2,{"inputs":[{"name":"bignum"},{"name":"str"}],"output":{"name":"result"}}],[11,"new_from_slice","","",2,null],[11,"checked_sqr","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_nnmod","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_add","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_sub","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_mul","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_sqr","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_exp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_exp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_inv","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"add_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"sub_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"mul_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"div_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"mod_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"checked_gcd","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_generate_prime","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"is_prime","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_prime_fast","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_new_random","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"rngproperty"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_new_pseudo_random","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"rngproperty"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_rand_in_range","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_pseudo_rand_in_range","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"set_bit","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"clear_bit","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_bit_set","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"mask_bits","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"checked_shl1","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_shr1","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_add","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_div","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_shl","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"checked_shr","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"negate","","",2,{"inputs":[{"name":"bignum"}],"output":null}],[11,"abs_cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"is_negative","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bool"}}],[11,"num_bits","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"i32"}}],[11,"num_bytes","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"i32"}}],[11,"to_vec","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"vec"}}],[11,"to_dec_str","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"string"}}],[11,"to_hex_str","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"bignum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"bignum"}],"output":null}],[0,"bio","openssl","",null,null],[3,"MemBio","openssl::bio","",null,null],[11,"drop","","",3,{"inputs":[{"name":"membio"}],"output":null}],[11,"new","","Creates a new owned memory based BIO",3,{"inputs":[{"name":"membio"}],"output":{"name":"result"}}],[11,"borrowed","","Returns a \"borrow\", i.e. it has no ownership",3,null],[11,"unwrap","","Consumes current bio and returns wrapped value\nNote that data ownership is lost and\nshould be managed manually",3,null],[11,"get_handle","","Temporarily gets wrapped value",3,null],[11,"set_eof","","Sets the BIO's EOF state.",3,{"inputs":[{"name":"membio"},{"name":"bool"}],"output":null}],[11,"read","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"membio"}],"output":{"name":"result"}}],[0,"crypto","openssl","",null,null],[0,"hash","openssl::crypto","",null,null],[3,"Hasher","openssl::crypto::hash","Provides message digest (hash) computation.",null,null],[4,"Type","","Message digest (hash) type.",null,null],[13,"MD5","","",4,null],[13,"SHA1","","",4,null],[13,"SHA224","","",4,null],[13,"SHA256","","",4,null],[13,"SHA384","","",4,null],[13,"SHA512","","",4,null],[13,"RIPEMD160","","",4,null],[5,"hash","","Computes the hash of the `data` with the hash `t`.",null,null],[11,"clone","","",4,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"md_len","","Returns the length of the message digest.",4,{"inputs":[{"name":"type"}],"output":{"name":"usize"}}],[11,"evp_md","","Internal interface subject to removal.",4,null],[11,"new","","Creates a new `Hasher` with the specified hash type.",5,{"inputs":[{"name":"hasher"},{"name":"type"}],"output":{"name":"hasher"}}],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",5,{"inputs":[{"name":"hasher"}],"output":{"name":"vec"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"hasher"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"hasher"}],"output":{"name":"hasher"}}],[11,"drop","","",5,{"inputs":[{"name":"hasher"}],"output":null}],[0,"hmac","openssl::crypto","",null,null],[3,"HMAC","openssl::crypto::hmac","Provides HMAC computation.",null,null],[5,"hmac","","Computes the HMAC of the `data` with the hash `t` and `key`.",null,null],[11,"new","","Creates a new `HMAC` with the specified hash type using the `key`.",6,null],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",6,{"inputs":[{"name":"hmac"}],"output":{"name":"vec"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"hmac"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"hmac"}],"output":{"name":"hmac"}}],[11,"drop","","",6,{"inputs":[{"name":"hmac"}],"output":null}],[0,"pkcs5","openssl::crypto","",null,null],[3,"KeyIvPair","openssl::crypto::pkcs5","",null,null],[12,"key","","",7,null],[12,"iv","","",7,null],[5,"evp_bytes_to_key_pbkdf1_compatible","","Derives a key and an IV from various parameters.",null,null],[5,"pbkdf2_hmac_sha1","","Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"keyivpair"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"keyivpair"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"keyivpair"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"keyivpair"}],"output":{"name":"keyivpair"}}],[0,"pkey","openssl::crypto","",null,null],[3,"PKey","openssl::crypto::pkey","",null,null],[4,"Parts","","",null,null],[13,"Neither","","",8,null],[13,"Public","","",8,null],[13,"Both","","",8,null],[4,"Role","","Represents a role an asymmetric key might be appropriate for.",null,null],[13,"Encrypt","","",9,null],[13,"Decrypt","","",9,null],[13,"Sign","","",9,null],[13,"Verify","","",9,null],[4,"EncryptionPadding","","Type of encryption padding to use.",null,null],[13,"OAEP","","",10,null],[13,"PKCS1v15","","",10,null],[11,"clone","","",8,{"inputs":[{"name":"parts"}],"output":{"name":"parts"}}],[11,"clone","","",9,{"inputs":[{"name":"role"}],"output":{"name":"role"}}],[11,"clone","","",10,{"inputs":[{"name":"encryptionpadding"}],"output":{"name":"encryptionpadding"}}],[11,"new","","",11,{"inputs":[{"name":"pkey"}],"output":{"name":"pkey"}}],[11,"from_handle","","",11,null],[11,"private_key_from_pem","","Reads private key from PEM, takes ownership of handle",11,{"inputs":[{"name":"pkey"},{"name":"r"}],"output":{"name":"result"}}],[11,"gen","","",11,{"inputs":[{"name":"pkey"},{"name":"usize"}],"output":null}],[11,"save_pub","","Returns a serialized form of the public key, suitable for load_pub().",11,{"inputs":[{"name":"pkey"}],"output":{"name":"vec"}}],[11,"load_pub","","Loads a serialized form of the public key, as produced by save_pub().",11,null],[11,"save_priv","","Returns a serialized form of the public and private keys, suitable for\nload_priv().",11,{"inputs":[{"name":"pkey"}],"output":{"name":"vec"}}],[11,"load_priv","","Loads a serialized form of the public and private keys, as produced by\nsave_priv().",11,null],[11,"write_pem","","Stores private key as a PEM",11,{"inputs":[{"name":"pkey"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_pub_pem","","Stores public key as a PEM",11,{"inputs":[{"name":"pkey"},{"name":"w"}],"output":{"name":"result"}}],[11,"size","","Returns the size of the public key modulus.",11,{"inputs":[{"name":"pkey"}],"output":{"name":"usize"}}],[11,"can","","Returns whether this pkey object can perform the specified role.",11,{"inputs":[{"name":"pkey"},{"name":"role"}],"output":{"name":"bool"}}],[11,"max_data","","Returns the maximum amount of data that can be encrypted by an encrypt()\ncall.",11,{"inputs":[{"name":"pkey"}],"output":{"name":"usize"}}],[11,"encrypt_with_padding","","",11,null],[11,"decrypt_with_padding","","",11,null],[11,"encrypt","","Encrypts data using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",11,null],[11,"decrypt","","Decrypts data, expecting OAEP padding, returning the decrypted data.",11,null],[11,"sign","","Signs data, using OpenSSL's default scheme and adding sha256 ASN.1 information to the\nsignature.\nThe bytes to sign must be the result of a sha256 hashing;\nreturns the signature.",11,null],[11,"verify","","Verifies a signature s (using OpenSSL's default scheme and sha256) on the SHA256 hash of a\nmessage.\nReturns true if the signature is valid, and false otherwise.",11,null],[11,"sign_with_hash","","Signs data, using OpenSSL's default scheme and add ASN.1 information for the given hash type to the\nsignature.\nThe bytes to sign must be the result of this type of hashing;\nreturns the signature.",11,null],[11,"verify_with_hash","","",11,null],[11,"get_handle","","",11,null],[11,"public_eq","","",11,{"inputs":[{"name":"pkey"},{"name":"pkey"}],"output":{"name":"bool"}}],[11,"drop","","",11,{"inputs":[{"name":"pkey"}],"output":null}],[0,"rand","openssl::crypto","",null,null],[5,"rand_bytes","openssl::crypto::rand","",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[0,"symm","openssl::crypto","",null,null],[3,"Crypter","openssl::crypto::symm","Represents a symmetric cipher context.",null,null],[4,"Mode","","",null,null],[13,"Encrypt","","",12,null],[13,"Decrypt","","",12,null],[4,"Type","","",null,null],[13,"AES_128_ECB","","",13,null],[13,"AES_128_CBC","","",13,null],[13,"AES_256_ECB","","",13,null],[13,"AES_256_CBC","","",13,null],[13,"RC4_128","","",13,null],[5,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the\nspecified key and iv; returns the resulting (encrypted) data.",null,null],[5,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the\nspecified key and iv; returns the resulting (decrypted) data.",null,null],[11,"clone","","",12,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"clone","","",13,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"new","","",14,{"inputs":[{"name":"crypter"},{"name":"type"}],"output":{"name":"crypter"}}],[11,"pad","","Enables or disables padding. If padding is disabled, total amount of\ndata encrypted must be a multiple of block size.",14,{"inputs":[{"name":"crypter"},{"name":"bool"}],"output":null}],[11,"init","","Initializes this crypter.",14,null],[11,"update","","Update this crypter with more data to encrypt or decrypt. Returns\nencrypted or decrypted bytes.",14,null],[11,"finalize","","Finish crypting. Returns the remaining partial block of output, if any.",14,{"inputs":[{"name":"crypter"}],"output":{"name":"vec"}}],[11,"drop","","",14,{"inputs":[{"name":"crypter"}],"output":null}],[0,"memcmp","openssl::crypto","",null,null],[5,"eq","openssl::crypto::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",null,null],[0,"ssl","openssl","",null,null],[3,"SslContextOptions","openssl::ssl","",null,null],[3,"SslVerifyMode","","",null,null],[3,"SslContext","","An SSL context object",null,null],[3,"Ssl","","",null,null],[3,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream.",null,null],[4,"SslMethod","","Determines the SSL method supported",null,null],[13,"Sslv23","","Support the SSLv2, SSLv3 and TLSv1 protocols.",15,null],[13,"Sslv3","","Only support the SSLv3 protocol.",15,null],[13,"Tlsv1","","Only support the TLSv1 protocol.",15,null],[4,"MaybeSslStream","","A utility type to help in cases where the use of SSL is decided at runtime.",null,null],[13,"Ssl","","A connection using SSL",16,null],[13,"Normal","","A connection not using SSL",16,null],[5,"init","","Manually initialize SSL.\nIt is optional to call this function and safe to do so more than once.",null,{"inputs":[],"output":null}],[0,"error","","",null,null],[4,"SslError","openssl::ssl::error","An SSL error",null,null],[13,"StreamError","","The underlying stream reported an error",17,null],[13,"SslSessionClosed","","The SSL session has been closed by the other end",17,null],[13,"OpenSslErrors","","An error in the OpenSSL library",17,null],[4,"OpensslError","","An error from the OpenSSL library",null,null],[13,"UnknownError","","An unknown error",18,null],[12,"library","openssl::ssl::error::OpensslError","The library reporting the error",18,null],[12,"function","","The function reporting the error",18,null],[12,"reason","","The reason for the error",18,null],[11,"fmt","openssl::ssl::error","",17,{"inputs":[{"name":"sslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"sslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"sslerror"}],"output":{"name":"str"}}],[11,"cause","","",17,{"inputs":[{"name":"sslerror"}],"output":{"name":"option"}}],[11,"eq","","",18,{"inputs":[{"name":"opensslerror"},{"name":"opensslerror"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"opensslerror"},{"name":"opensslerror"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"opensslerror"}],"output":{"name":"opensslerror"}}],[11,"fmt","","",18,{"inputs":[{"name":"opensslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Creates a new `OpenSslErrors` with the current contents of the error\nstack.",17,{"inputs":[{"name":"sslerror"}],"output":{"name":"sslerror"}}],[11,"from_error","","Creates an `SslError` from the raw numeric error code.",17,{"inputs":[{"name":"sslerror"},{"name":"c_ulong"}],"output":{"name":"sslerror"}}],[6,"VerifyCallback","openssl::ssl","The signature of functions that can be used to manually verify certificates",null,null],[6,"VerifyCallbackData","","The signature of functions that can be used to manually verify certificates\nwhen user-data should be carried for all verification process",null,null],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_TLSEXT_PADDING","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLV2","","",null,null],[17,"SSL_OP_NO_SSLV3","","",null,null],[17,"SSL_OP_NO_DTLSV1","","",null,null],[17,"SSL_OP_NO_TLSV1","","",null,null],[17,"SSL_OP_NO_DTLSV1_2","","",null,null],[17,"SSL_OP_NO_TLSV1_2","","",null,null],[17,"SSL_OP_NO_TLSV1_1","","",null,null],[17,"SSL_OP_NETSCAPE_CA_DN_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",null,null],[17,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG","","",null,null],[17,"SSL_OP_MSIE_SSLV2_RSA_PADDING","","",null,null],[17,"SSL_OP_PKCS1_CHECK_1","","",null,null],[17,"SSL_OP_PKCS1_CHECK_2","","",null,null],[17,"SSL_OP_EPHEMERAL_RSA","","",null,null],[17,"SSL_OP_ALL","","",null,null],[17,"SSL_OP_NO_SSL_MASK","","",null,null],[17,"SSL_VERIFY_PEER","","Verify that the server's certificate is trusted",null,null],[17,"SSL_VERIFY_NONE","","Do not verify the server's certificate",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","Terminate handshake if client did not return a certificate.\nUse together with SSL_VERIFY_PEER.",null,null],[8,"IntoSsl","","",null,null],[10,"into_ssl","","",19,{"inputs":[{"name":"intossl"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"eq","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"u64"}],"output":{"name":"sslcontextoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"from_iter","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"t"}],"output":{"name":"sslcontextoptions"}}],[11,"eq","","",15,{"inputs":[{"name":"sslmethod"},{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"sslmethod"},{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"sslmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"sslmethod"}],"output":{"name":"sslmethod"}}],[11,"is_dtls","","",15,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"is_dtlsv1","","",15,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"is_dtlsv1_2","","",15,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"cmp","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"eq","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"sslverifymode"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",21,{"inputs":[{"name":"sslverifymode"},{"name":"i32"}],"output":{"name":"sslverifymode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"not","","Returns the complement of this set of flags.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"from_iter","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"t"}],"output":{"name":"sslverifymode"}}],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",22,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",22,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",22,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",22,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"from","alloc::boxed","",23,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",23,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",23,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",23,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",24,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",25,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",26,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","","",27,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",28,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",29,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","openssl","Returns true if the boxed type is the same as `T`",30,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",30,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",30,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",30,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"into_ascii_uppercase","collections::string","",31,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"into_ascii_lowercase","","",31,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"into_ascii_uppercase","collections::vec","",32,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"into_ascii_lowercase","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"next","std::ascii","",33,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next_back","","",33,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",34,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",34,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",34,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"clone","std::thread::local","",35,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",35,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",36,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",36,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::imp","",37,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",37,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",38,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",38,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",38,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",39,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",39,null],[11,"get","","",39,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",40,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",40,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",40,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",40,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"scoped","","Spawns a new child thread that must be joined within a given\nscope, and returns a `JoinGuard`.",40,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",41,null],[11,"name","","Gets the thread's name.",41,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",41,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",41,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",42,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",42,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"thread","","Extracts a handle to the thread this guard will join on.",43,{"inputs":[{"name":"joinguard"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish, returning the result of the\nthread's calculation.",43,{"inputs":[{"name":"joinguard"}],"output":{"name":"t"}}],[11,"drop","","",43,null],[11,"clone","std::collections::hash::table","",44,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",45,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",46,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",46,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",46,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",47,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",47,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",47,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",48,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",48,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",45,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",45,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",45,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",45,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",45,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",45,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",45,null],[11,"next","","",48,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",48,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",48,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",48,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",47,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",47,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",47,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",47,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",47,null],[11,"take","","Removes this bucket's key and value from the hashtable.",47,null],[11,"replace","","",47,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",47,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",47,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",47,null],[11,"expect_full","","",49,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",50,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",50,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",51,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",51,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",51,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",51,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",51,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",51,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",51,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",52,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",52,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",53,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",54,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"len","","",54,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",55,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"len","","",55,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"len","","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",57,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"len","","",57,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",57,null],[11,"clone","","",51,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",51,null],[11,"clone","std::collections::hash::map","",58,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",59,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",59,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",59,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",59,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",59,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",59,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",59,null],[11,"get","","Returns a reference to the value corresponding to the key.",59,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",59,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",59,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",59,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",59,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",59,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",59,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",61,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",62,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",59,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"len","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"len","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"len","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",61,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"len","","",61,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",62,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"len","","",62,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",65,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"len","","",65,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",66,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",66,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",66,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",67,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",67,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",67,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",67,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",67,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",68,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",59,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",59,null],[11,"clone","","",69,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",69,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",69,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",69,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",70,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",70,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",70,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",70,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",70,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",70,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",70,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",70,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",70,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",70,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",70,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",70,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",70,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",70,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",70,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",70,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",70,null],[11,"contains","","Returns `true` if the set contains a value.",70,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",70,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",70,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",70,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",70,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",70,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",70,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",70,null],[11,"default","","",70,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",70,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"len","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"len","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"len","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",74,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",74,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"clone","","",75,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",75,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",76,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",76,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"clone","","",77,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",77,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"hasher","std::collections::hash::state","",78,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",78,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",78,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"default","","",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",79,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",79,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",79,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",79,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",79,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",79,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",79,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",79,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",79,null],[11,"drop","","",80,null],[11,"clone","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",82,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",79,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",79,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",79,null],[11,"extend","","",79,null],[11,"default","collections::vec_map","",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone","","",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",84,null],[11,"hash","","",84,null],[11,"new","","Creates an empty `VecMap`.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",84,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",84,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",84,null],[11,"split_off","","Splits the collection into two at the given key.",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",84,null],[11,"get","","Returns a reference to the value corresponding to the key.",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",84,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",85,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",85,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",85,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",86,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",87,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",87,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",87,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",87,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",87,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"eq","","",84,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"ordering"}}],[11,"fmt","","",84,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",84,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",84,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",84,null],[11,"extend","","",84,null],[11,"index","","",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",84,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",91,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",92,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",90,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",93,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","collections::linked_list","",94,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",95,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",96,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",96,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",97,null],[11,"iter","","Provides a forward iterator.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",97,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",97,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",97,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",97,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",97,null],[11,"next","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",98,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",98,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",98,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",97,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",97,null],[11,"extend","","",97,null],[11,"eq","","",97,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",97,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",97,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",97,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"clone","collections::vec_deque","",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",99,null],[11,"default","","",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",99,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",99,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",99,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",99,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",99,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",99,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",99,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",99,null],[11,"iter","","Returns a front-to-back iterator.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",99,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",99,null],[11,"len","","Returns the number of elements in the `VecDeque`.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",99,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",99,null],[11,"push_back","","Appends an element to the back of a buffer",99,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",99,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",99,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",99,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",99,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",99,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",99,null],[11,"retain","","Retains only the elements specified by the predicate.",99,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",99,null],[11,"clone","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",100,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",102,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",103,null],[11,"next","","",103,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",99,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",99,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",99,null],[11,"index","","",99,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",99,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",99,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",99,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",99,null],[11,"extend","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",104,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",104,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",104,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",104,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",104,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",104,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",104,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",105,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next","","",106,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"clone","","",107,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",107,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",107,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",108,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"fmt","","",109,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",109,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",110,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"len","","",110,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",111,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"len","","",111,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",112,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",112,null],[11,"cmp","","",112,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",113,null],[11,"fmt","","",114,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",112,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",112,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_ptr","","Retakes ownership of a CString that was transferred to C.",112,null],[11,"into_ptr","","Transfers ownership of the string to a C caller.",112,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",112,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",112,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",113,null],[11,"as_ptr","","Returns the inner pointer to this C string.",113,null],[11,"to_bytes","","Converts this C string to a byte slice.",113,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",113,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",113,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",113,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",112,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",112,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",112,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",114,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",114,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",114,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",114,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",115,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"eq","std::ffi::c_str","",113,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",113,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",113,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"clone","std::ffi::os_str","",116,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",116,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",116,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",116,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",116,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",116,null],[11,"from","","",116,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",116,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",116,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",117,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",117,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",117,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",117,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",117,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",117,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",116,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",116,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",116,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",116,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",116,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",116,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",116,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",116,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",116,null],[11,"eq","","",117,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",117,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",117,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",117,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",117,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",117,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",117,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",117,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",117,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",117,null],[11,"fmt","","",117,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",116,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",117,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",117,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",116,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",31,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",118,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",119,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",120,null],[11,"eq","","",120,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",121,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",121,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",121,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",121,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",121,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",121,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",121,null],[11,"read_to_end","","",121,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",121,null],[11,"flush","","",121,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",121,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",118,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",118,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",118,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",118,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",118,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",118,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",118,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",122,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",122,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",122,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",122,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",122,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",119,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",119,null],[11,"is_dir","","Test whether this file type represents a directory.",120,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",120,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",120,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",123,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",124,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",124,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",124,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",124,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",125,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"metadata","std::path","",126,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","",126,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","",126,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","",126,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","",126,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","",126,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","",126,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","",126,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"new","std::fs","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",127,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",127,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",127,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",128,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",128,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",128,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",128,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",128,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",128,null],[11,"fill_buf","","",128,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",128,null],[11,"fmt","","",128,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",128,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",130,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",130,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",130,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",130,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",130,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",130,null],[11,"flush","","",130,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",130,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",130,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",129,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",129,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",115,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",129,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",129,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",131,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",131,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",131,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",131,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",131,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",131,null],[11,"flush","","",131,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",132,null],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",133,{"inputs":[{"name":"bufstream"},{"name":"usize"},{"name":"usize"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",133,{"inputs":[{"name":"bufstream"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"get_ref","","Gets a reference to the underlying stream.",133,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"get_mut","","Gets a mutable reference to the underlying stream.",133,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"into_inner","","Unwraps this `BufStream`, returning the underlying stream.",133,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"fill_buf","","",133,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"consume","","",133,null],[11,"read","","",133,null],[11,"write","","",133,null],[11,"flush","","",133,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"bufstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",134,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",134,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",134,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",134,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",134,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",134,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",134,null],[11,"seek","","",134,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",134,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",134,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",134,null],[11,"read","","",134,null],[11,"read","","",134,null],[11,"fill_buf","","",134,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",134,null],[11,"fill_buf","","",134,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",134,null],[11,"fill_buf","","",134,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",134,null],[11,"write","","",134,null],[11,"flush","","",134,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",134,null],[11,"flush","","",134,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",115,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",136,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",115,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",115,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",115,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",115,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",115,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",115,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",115,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",115,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",137,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",115,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",115,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",23,null],[11,"read_to_end","","",23,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",23,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",23,null],[11,"write_fmt","","",23,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",23,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",23,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",23,null],[11,"read_until","","",23,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",23,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",32,null],[11,"write_all","","",32,null],[11,"flush","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",138,null],[11,"get","","",138,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",139,null],[11,"fill_buf","","",139,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",139,null],[11,"read","","",140,null],[11,"write","","",141,null],[11,"flush","","",141,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",142,null],[11,"write","","",143,null],[11,"flush","","",143,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",144,null],[11,"flush","","",144,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",145,null],[11,"flush","","",145,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",145,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",146,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",146,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",146,null],[11,"read_to_end","","",146,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",146,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",147,null],[11,"read_to_end","","",147,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",147,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",147,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",148,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",148,null],[11,"flush","","",148,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",148,null],[11,"write_fmt","","",148,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",149,null],[11,"flush","","",149,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",150,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",150,null],[11,"flush","","",150,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",150,null],[11,"write_fmt","","",150,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",151,null],[11,"flush","","",151,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",152,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",152,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",153,null],[11,"flush","","",153,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",154,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",155,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",155,null],[11,"fill_buf","","",155,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",155,null],[11,"read","","",156,null],[11,"next","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",158,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",159,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",158,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",158,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",158,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",160,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",161,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",162,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",162,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",162,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",162,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",162,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",162,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",162,null],[11,"fmt","","",162,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",163,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",163,null],[11,"clone","","",163,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",163,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",164,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",164,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",162,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",164,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",164,null],[11,"partial_cmp","","",164,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",164,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",164,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",165,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",165,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",165,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",165,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",165,null],[11,"partial_cmp","","",165,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",165,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",166,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",166,null],[11,"eq","","",166,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",166,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",166,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",166,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",167,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",167,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",167,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",168,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",168,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",168,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns scope ID associated with this address, corresponding to the\n`sin6_flowinfo` field in C.",168,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns scope ID associated with this address, corresponding to the\n`sin6_scope_id` field in C.",168,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",166,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",168,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",167,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",168,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",167,null],[11,"hash","","",168,null],[11,"to_socket_addrs","","",166,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",167,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",168,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",169,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",169,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",169,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",169,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",169,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified.",169,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",169,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",169,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",169,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",169,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",169,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",169,null],[11,"read_to_end","","",169,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",169,null],[11,"flush","","",169,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",170,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",170,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",170,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",170,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",170,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",171,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",170,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",172,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",172,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",172,null],[11,"local_addr","","Returns the socket address that this socket was created from.",172,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",172,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the broadcast flag on or off.",172,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","Sets the multicast loop flag to the specified value.",172,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it).",172,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it).",172,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","Sets the multicast TTL.",172,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_time_to_live","","Sets this socket's TTL.",172,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",172,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",172,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",172,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",172,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",162,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",164,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",165,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",166,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",173,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",173,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::net","",174,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",175,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"as_raw_fd","std::fs","",121,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",121,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",121,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",169,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",170,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",172,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",169,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",170,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",172,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",169,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",170,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",172,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",116,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",116,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",117,null],[11,"as_bytes","","",117,null],[11,"mode","std::fs","",119,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",119,null],[11,"from_mode","","",119,{"inputs":[{"name":"permissions"},{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",118,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"dev","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blocks","","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",120,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",120,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",120,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",120,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",124,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",127,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",176,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",176,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"signal","","",177,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",178,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",179,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",180,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",181,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",179,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",180,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",181,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"eq","std::path","",182,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",182,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",182,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",182,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",182,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",182,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",182,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",182,null],[11,"fmt","","",182,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",182,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",183,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",183,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",183,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",183,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",183,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",183,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",183,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",184,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",184,null],[11,"clone","","",184,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",184,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",184,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",184,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",184,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",184,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"fmt","","",185,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",185,null],[11,"cmp","","",185,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",185,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",185,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",185,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",185,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",185,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",185,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",185,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",185,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",186,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",187,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",186,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",186,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",186,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",186,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",187,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",187,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",187,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",187,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",187,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",186,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",186,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",186,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",186,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",186,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"hash","","",188,null],[11,"clone","","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",188,null],[11,"pop","","Truncate `self` to `self.parent()`.",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",188,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",188,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",188,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",188,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",188,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",188,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",188,null],[11,"fmt","","",188,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",126,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",126,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",126,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",126,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",126,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",126,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",126,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",126,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",126,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",126,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",126,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",126,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",126,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",126,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",126,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",126,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",126,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",126,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",126,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",126,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",126,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",126,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"deref","","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","","",126,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",188,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",188,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",188,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"hash","","",126,null],[11,"as_ref","","",126,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",126,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",126,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",126,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",117,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",116,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",31,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"write","std::process","",179,null],[11,"flush","","",179,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",180,null],[11,"read","","",181,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",176,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",176,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",176,null],[11,"env","","Inserts or updates an environment variable mapping.",176,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",176,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",176,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",176,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",176,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",176,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",176,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",176,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",176,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",176,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",176,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",190,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",178,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",178,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",178,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",177,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",177,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",177,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",177,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",177,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",191,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",191,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",191,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",191,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",192,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",192,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",192,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",192,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",193,null],[11,"new","std::sync::mpsc::oneshot","",194,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",194,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",194,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",194,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",194,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",194,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",194,null],[11,"drop_port","","",194,null],[11,"can_recv","","",194,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",194,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",194,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",194,null],[11,"eq","std::sync::mpsc::select","",195,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",196,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",196,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",196,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",197,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",197,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",197,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",197,null],[11,"drop","","",196,null],[11,"drop","","",197,null],[11,"next","","",198,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",199,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",199,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",199,null],[11,"send","","",199,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",199,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",199,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",199,null],[11,"drop_chan","","",199,null],[11,"drop_port","","",199,null],[11,"can_recv","","",199,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",199,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",199,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",199,null],[11,"new","std::sync::mpsc::stream","",200,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",200,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",200,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",200,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",200,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",200,null],[11,"drop_port","","",200,null],[11,"can_recv","","",200,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",200,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",200,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",200,null],[11,"fmt","std::sync::mpsc::sync","",201,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",202,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",202,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",202,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",202,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",202,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",202,null],[11,"drop_chan","","",202,null],[11,"drop_port","","",202,null],[11,"can_recv","","",202,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",202,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",202,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",202,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",203,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",203,null],[11,"pop","","Pops some data from this queue.",203,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",203,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",204,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",204,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",204,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",204,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",204,null],[11,"clone","std::sync::mpsc","",205,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",205,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",206,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",206,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",206,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",207,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",207,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",208,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",208,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",209,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",209,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",209,null],[11,"send","","Sends a value on this synchronous channel.",210,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",210,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",210,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",210,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",211,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",211,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",211,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",212,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",213,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",211,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",211,null],[11,"fmt","","",205,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",205,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",205,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",208,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",208,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",208,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",206,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",206,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",206,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",207,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",207,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",207,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",214,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",214,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",215,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"new","std::sync::condvar","Creates a new condition variable which is ready to be waited on and\nnotified.",216,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",216,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",216,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",216,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",216,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",216,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",216,null],[11,"drop","","",216,null],[11,"new","","Creates a new condition variable",217,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",217,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",217,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",217,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",217,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",217,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",217,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",217,null],[11,"get","std::sync::future","Get the value of the future.",218,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"into_inner","","Gets the value from this future, forcing evaluation.",218,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",218,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"from_value","","Create a future from a value.",218,{"inputs":[{"name":"future"},{"name":"a"}],"output":{"name":"future"}}],[11,"from_fn","","Create a future from a function.",218,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"from_receiver","","Create a future from a port",218,{"inputs":[{"name":"future"},{"name":"receiver"}],"output":{"name":"future"}}],[11,"spawn","","Create a future from a unique closure.",218,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"drop","std::sync::mutex","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",219,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",219,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",219,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",219,null],[11,"deref","","",220,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",220,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",220,null],[11,"new","std::sync::once","Creates a new `Once` value.",221,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",221,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",222,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",222,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",222,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",222,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",222,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",222,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"drop","","",222,null],[11,"fmt","","",222,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",223,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",223,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",223,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",223,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",223,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",223,null],[11,"deref","","",224,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",225,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",225,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",224,null],[11,"drop","","",225,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",226,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",226,null],[11,"release","","Release a resource from this semaphore.",226,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",226,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",227,null],[11,"default","core::atomic","",228,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",229,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",230,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",231,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",232,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",228,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",228,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",228,null],[11,"swap","","Stores a value into the bool, returning the old value.",228,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",228,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",228,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",228,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",228,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",228,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",229,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",229,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",229,null],[11,"swap","","Stores a value into the isize, returning the old value.",229,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",229,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",229,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",229,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",229,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",229,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",229,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",230,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",230,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",230,null],[11,"swap","","Stores a value into the usize, returning the old value.",230,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",230,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",230,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",230,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",230,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",230,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",230,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",231,null],[11,"load","","Loads a value from the pointer.",231,null],[11,"store","","Stores a value into the pointer.",231,null],[11,"swap","","Stores a value into the pointer, returning the old value.",231,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",231,null],[11,"fmt","","",230,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::time::duration","",233,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",233,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Crates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",233,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",233,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",233,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",233,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",233,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"secs","","Returns the number of whole seconds represented by this duration.",233,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",233,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"extra_nanos","","Returns the nanosecond precision represented by this duration.",233,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",233,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",233,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",233,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",234,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",234,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",234,null],[11,"wait","","Waits for a signal on the specified mutex.",234,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",234,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",234,null],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",235,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",235,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",235,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",235,null],[11,"destroy","","Deallocates all resources associated with this mutex.",235,null],[11,"next","std::sys_common::net","",236,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",236,null],[11,"connect","","",237,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",237,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",237,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_nodelay","","",237,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",237,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",237,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",237,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",237,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",237,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",237,null],[11,"write","","",237,null],[11,"peer_addr","","",237,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",237,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",237,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",237,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",238,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",238,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",238,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",238,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",238,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",238,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",238,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",239,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",239,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",239,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",239,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",239,null],[11,"send_to","","",239,null],[11,"set_broadcast","","",239,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",239,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",239,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",239,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"multicast_time_to_live","","",239,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"time_to_live","","",239,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"duplicate","","",239,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",239,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",239,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",239,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",239,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",239,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",240,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",240,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",240,null],[11,"get","","",240,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",241,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",241,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",241,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",241,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",241,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",241,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",242,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",242,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",242,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",242,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",242,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",243,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",243,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",243,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",243,null],[11,"fmt","","",243,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",244,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",244,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",245,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",245,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",245,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",245,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",245,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",245,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",245,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",245,null],[11,"new","std::sys_common::thread_local","",246,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",246,null],[11,"set","","Sets this TLS key to a new value.",246,null],[11,"destroy","","Deallocates this OS TLS key.",246,null],[11,"new","","Creates a new managed OS TLS key.",247,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",247,null],[11,"set","","See StaticKey::set",247,null],[11,"drop","","",247,null],[11,"clone","std::sys_common::wtf8","",248,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",248,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",248,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",248,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",248,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",248,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",248,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",248,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",248,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",248,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",248,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",248,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",248,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",248,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",248,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",248,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",249,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",250,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",250,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",250,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",250,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",250,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",250,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",250,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",249,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an new, empty WTF-8 string.",249,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",249,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",249,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",249,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",249,null],[11,"as_slice","","",249,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",249,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",249,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",249,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",249,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",249,null],[11,"push","","Append a code point at the end of the string.",249,null],[11,"truncate","","Shortens a string to the specified length.",249,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",249,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",249,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",249,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",249,null],[11,"eq","","",250,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",250,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",250,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",250,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",250,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",250,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",250,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",250,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",250,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",250,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",250,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",250,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",251,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",251,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",251,null],[11,"clone","","",252,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",252,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",252,null],[11,"hash","","",248,null],[11,"hash","","",249,null],[11,"hash","","",250,null],[11,"is_ascii","","",250,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",250,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",250,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",250,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",250,null],[11,"make_ascii_lowercase","","",250,null],[11,"new","std::sys::condvar","",253,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",253,null],[11,"notify_all","","",253,null],[11,"wait","","",253,null],[11,"wait_timeout","","",253,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",253,null],[11,"new","std::sys::fd","",254,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",254,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",254,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",254,null],[11,"write","","",254,null],[11,"set_cloexec","","",254,null],[11,"drop","","",254,null],[11,"clone","std::sys::fs","",255,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",256,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",256,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",256,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",256,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",257,null],[11,"eq","","",257,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",257,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",257,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",258,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",258,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",258,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",122,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",256,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",256,null],[11,"mode","","",256,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",257,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",257,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",257,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",257,{"inputs":[{"name":"filetype"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"next","","",259,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",260,null],[11,"path","","",261,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",261,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",261,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",261,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",261,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",255,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",255,null],[11,"write","","",255,null],[11,"append","","",255,null],[11,"truncate","","",255,null],[11,"create","","",255,null],[11,"mode","","",255,null],[11,"open","","",262,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",262,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",262,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",262,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",262,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",262,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",262,null],[11,"write","","",262,null],[11,"flush","","",262,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",262,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",262,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",262,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",263,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",263,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",263,null],[11,"fmt","","",262,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",264,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",264,null],[11,"unlock","","",264,null],[11,"try_lock","","",264,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",264,null],[11,"uninitialized","","",265,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",265,null],[11,"lock","","",265,null],[11,"try_lock","","",265,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",265,null],[11,"destroy","","",265,null],[11,"new","std::sys::net","",266,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",266,null],[11,"duplicate","","",266,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",266,null],[11,"set_timeout","","",266,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",266,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"next","std::sys::os","",267,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",267,null],[11,"fmt","","",268,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",268,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",268,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",269,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"len","","",269,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",270,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[11,"hash","std::sys::os_str","",271,null],[11,"clone","","",271,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",272,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",271,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",271,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",271,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",271,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",271,null],[11,"from_str","","",272,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",272,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",272,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",272,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",273,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",273,null],[11,"write","","",273,null],[11,"raw","","",273,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",273,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",273,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",274,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",274,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",274,null],[11,"args","","",274,null],[11,"env","","",274,null],[11,"env_remove","","",274,null],[11,"env_clear","","",274,null],[11,"cwd","","",274,null],[11,"fmt","","",275,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",275,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",275,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",275,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",275,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",275,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",275,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",276,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",276,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",276,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",276,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",276,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",277,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",277,null],[11,"try_read","","",277,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",277,null],[11,"try_write","","",277,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",277,null],[11,"write_unlock","","",277,null],[11,"destroy","","",277,null],[11,"new","std::sys::stack_overflow","",278,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",278,null],[11,"new","std::sys::thread","",279,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",279,null],[11,"set_name","","",279,null],[11,"sleep","","",279,null],[11,"join","","",279,null],[11,"drop","","",279,null],[11,"now","std::sys::time::inner","",280,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"new","std::sys::stdio","",281,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",281,null],[11,"new","","",282,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",282,null],[11,"new","","",283,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",283,null],[11,"write","","",283,null],[11,"flush","","",283,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::rt::libunwind","",284,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",285,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"clone","std::rt::dwarf::eh","",286,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::rt::dwarf","",287,null],[11,"read","","",287,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",287,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",287,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",288,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",288,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",288,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",288,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",289,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",289,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",289,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",289,null],[11,"clone","std::rand","",290,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",290,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",290,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",290,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",290,null],[11,"from_seed","","",290,null],[11,"reseed","","",291,null],[11,"clone","","",292,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",292,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",292,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",292,null],[11,"hash","core::option","",293,null],[11,"fmt","","",293,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",293,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",293,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",293,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",293,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",293,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",293,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",293,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",293,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",293,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",293,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",293,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",293,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",293,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",293,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",293,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",293,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",293,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",293,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",293,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",293,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",293,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",293,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",293,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",293,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",293,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",293,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",294,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",294,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",294,null],[11,"next_back","","",294,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",295,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",295,null],[11,"next_back","","",295,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",295,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",296,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",296,null],[11,"next_back","","",296,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",297,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",297,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",297,null],[11,"next_back","","",297,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",293,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::iter","",298,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",298,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",298,null],[11,"next_back","","",298,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"indexable","","",298,{"inputs":[{"name":"rev"}],"output":{"name":"usize"}}],[11,"idx","","",298,{"inputs":[{"name":"rev"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","","",299,{"inputs":[{"name":"minmaxresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",299,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",299,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"clone","","",299,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"minmaxresult"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x,y)` is returned where `x <= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",299,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"option"}}],[11,"clone","","",300,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",300,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",300,null],[11,"next_back","","",300,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"indexable","","",300,{"inputs":[{"name":"cloned"}],"output":{"name":"usize"}}],[11,"idx","","",300,{"inputs":[{"name":"cloned"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",301,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",301,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",301,null],[11,"indexable","","",301,{"inputs":[{"name":"cycle"}],"output":{"name":"usize"}}],[11,"idx","","",301,{"inputs":[{"name":"cycle"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",302,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",302,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",302,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",302,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",302,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",302,null],[11,"next_back","","",302,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"indexable","","",302,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"idx","","",302,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",303,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",303,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",303,null],[11,"next_back","","",303,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"indexable","","",303,{"inputs":[{"name":"zip"}],"output":{"name":"usize"}}],[11,"idx","","",303,{"inputs":[{"name":"zip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",304,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",304,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",304,null],[11,"next_back","","",304,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"indexable","","",304,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"idx","","",304,{"inputs":[{"name":"map"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",305,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",305,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",305,null],[11,"next_back","","",305,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",306,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",306,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",306,null],[11,"next_back","","",306,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",307,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",307,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",307,null],[11,"nth","","",307,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",307,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",307,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"indexable","","",307,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"idx","","",307,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",308,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",308,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",308,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",308,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",308,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",308,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",308,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",308,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",309,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",309,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",309,null],[11,"clone","","",310,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",310,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",310,null],[11,"clone","","",311,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",311,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",311,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",311,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",311,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",311,null],[11,"indexable","","",311,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"idx","","",311,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",312,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",312,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",312,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",312,null],[11,"indexable","","",312,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"idx","","",312,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",313,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",313,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",313,null],[11,"clone","","",314,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",314,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",314,null],[11,"next_back","","",314,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",315,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",315,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",315,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",315,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",315,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",315,null],[11,"next_back","","",315,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"indexable","","",315,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"idx","","",315,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"reset_fuse","","Resets the `Fuse` such that the next call to `.next()` or\n`.next_back()` will call the underlying iterator again even if it\npreviously returned `None`.",315,null],[11,"clone","","",316,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",316,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",316,null],[11,"next_back","","",316,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"indexable","","",316,{"inputs":[{"name":"inspect"}],"output":{"name":"usize"}}],[11,"idx","","",316,{"inputs":[{"name":"inspect"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",317,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",317,{"inputs":[{"name":"unfold"},{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",317,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",317,null],[11,"clone","","",318,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",319,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",320,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",318,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",318,null],[11,"clone","","",321,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",321,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",321,null],[11,"next_back","","",321,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",318,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",318,null],[11,"next","core::ops","",320,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",320,null],[11,"next_back","","",320,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",319,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",322,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",322,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",322,null],[11,"next_back","","",322,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"indexable","","",322,{"inputs":[{"name":"repeat"}],"output":{"name":"usize"}}],[11,"idx","","",322,{"inputs":[{"name":"repeat"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",323,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",323,null],[11,"next_back","","",323,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",323,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",323,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",323,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",324,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",324,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",324,null],[11,"next_back","","",324,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",324,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",325,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",325,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",325,null],[11,"finish","","",325,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",325,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",325,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"clone","core::fmt::rt::v1","",326,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",327,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",328,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",328,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",328,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",329,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",330,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","openssl","",331,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",331,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",331,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",331,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",331,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",331,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",331,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",331,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",332,null],[11,"fmt","","",332,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",332,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",332,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",332,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",332,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"clone","alloc::boxed","",333,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",334,null],[11,"make_place","","",334,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",334,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",23,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",333,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",334,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",23,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",23,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",23,null],[11,"default","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",23,null],[11,"clone","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",23,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",23,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",23,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",23,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",23,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next_back","","",23,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",23,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",23,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",335,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",335,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",335,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",335,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",335,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",335,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",335,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",336,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",336,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",336,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",336,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",337,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",337,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",337,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",337,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",337,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",337,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",337,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",337,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",337,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",338,null],[11,"clone","","",338,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",339,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",339,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",339,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",339,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",340,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",340,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",341,null],[11,"deref","","",340,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",340,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",342,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",342,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",342,null],[11,"cmp","core::marker","",343,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",343,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"option"}}],[11,"lt","","",343,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"le","","",343,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"gt","","",343,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ge","","",343,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"eq","","",343,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ne","","",343,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"clone","","",343,{"inputs":[{"name":"nocopy"}],"output":{"name":"nocopy"}}],[11,"hash","","",344,null],[11,"eq","","",344,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",344,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",344,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",344,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"borrow","alloc::boxed","",23,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",23,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow","alloc::rc","",345,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","alloc::arc","",346,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",347,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",347,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",347,null],[11,"into_owned","","Extracts the owned data.",347,null],[11,"deref","","",347,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",347,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",347,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",347,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",347,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",347,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",347,null],[11,"into_cow","","",347,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",347,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"fmt","core::simd","",348,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",348,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",349,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",349,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",350,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",350,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",351,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",351,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",352,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",352,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",353,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",353,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",354,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",354,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",355,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",355,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",356,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",356,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",357,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",357,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"clone","collections::slice","",358,{"inputs":[{"name":"elementswaps"}],"output":{"name":"elementswaps"}}],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",358,{"inputs":[{"name":"elementswaps"},{"name":"usize"}],"output":{"name":"elementswaps"}}],[11,"borrow","collections::vec","",32,null],[11,"borrow_mut","","",32,null],[11,"clone","collections::slice","",359,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"clone","","",360,{"inputs":[{"name":"sizedirection"}],"output":{"name":"sizedirection"}}],[11,"next","","",358,{"inputs":[{"name":"elementswaps"}],"output":{"name":"option"}}],[11,"size_hint","","",358,null],[11,"next","","",361,{"inputs":[{"name":"permutations"}],"output":{"name":"option"}}],[11,"size_hint","","",361,null],[11,"cmp","collections::string","",31,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",28,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",31,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",31,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_str","","Creates a new string buffer from the given string.",31,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",31,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",31,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",31,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",31,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",31,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",31,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",31,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",31,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",31,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",31,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",31,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",31,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",31,null],[11,"push","","Adds the given character to the end of the string.",31,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",31,null],[11,"truncate","","Shortens a string to the specified length.",31,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",31,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",31,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",31,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",31,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",31,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",31,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",31,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",31,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",31,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",28,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",28,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",28,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",31,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",31,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",31,null],[11,"extend","","",31,null],[11,"extend","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",347,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",347,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",347,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",347,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",31,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",347,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",347,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",31,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",31,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"add","","",31,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",31,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",31,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",31,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",31,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",31,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",31,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",31,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",31,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",31,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"eq","","",362,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",362,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",362,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",362,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",31,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",31,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",31,null],[11,"from","","",31,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",347,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",347,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",31,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",31,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",31,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",31,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",363,null],[11,"next","","",363,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",363,null],[11,"next_back","","",363,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"fmt","core::cmp","",364,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",364,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",364,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",364,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",364,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",364,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",364,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"hash","core::result","",365,null],[11,"fmt","","",365,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",365,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",365,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",365,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",365,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",365,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",365,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",365,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",365,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",365,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",365,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",365,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",365,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",365,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",365,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",365,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",365,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",365,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",365,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",365,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",365,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",365,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",366,null],[11,"next_back","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",367,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",367,null],[11,"next_back","","",367,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",368,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next_back","","",368,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",365,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",345,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",345,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is\nunique.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",345,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",345,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",345,null],[11,"clone","","Makes a clone of the `Rc<T>`.",345,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",345,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",345,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",345,null],[11,"fmt","","",345,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",345,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",345,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",369,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",369,null],[11,"clone","","Makes a clone of the `Weak<T>`.",369,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",369,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",32,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",32,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",32,null],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",32,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",32,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",32,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",32,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",32,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",32,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",32,null],[11,"as_slice","","Extracts a slice containing the entire vector.",32,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",32,null],[11,"set_len","","Sets the length of a vector.",32,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",32,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",32,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",32,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",32,null],[11,"push","","Appends an element to the back of a collection.",32,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",32,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",32,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",32,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",32,null],[11,"len","","Returns the number of elements in the vector.",32,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",32,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",32,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"split_off","","Splits the collection into two at the given index.",32,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",32,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",32,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",32,null],[11,"clone","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",32,null],[11,"hash","","",32,null],[11,"index","","",32,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",32,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",32,null],[11,"index","","",32,null],[11,"index","","",32,null],[11,"index","","",32,null],[11,"index_mut","","",32,null],[11,"index_mut","","",32,null],[11,"index_mut","","",32,null],[11,"index_mut","","",32,null],[11,"deref","","",32,null],[11,"deref_mut","","",32,null],[11,"from_iter","","",32,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",32,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",32,null],[11,"extend","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","collections::borrow","",347,null],[11,"ne","","",347,null],[11,"eq","","",347,null],[11,"ne","","",347,null],[11,"eq","","",347,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",347,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"partial_cmp","","",32,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",32,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",32,null],[11,"default","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",32,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",32,null],[11,"from","","",32,null],[11,"from","","",32,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",347,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",32,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",370,{"inputs":[{"name":"intoiter"}],"output":{"name":"vec"}}],[11,"next","","",370,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"count","","",370,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",370,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",370,null],[11,"next","","",371,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"next_back","","",371,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",371,null],[11,"drop","","",372,null],[11,"drop","","",373,null],[11,"clone","collections::str","",374,{"inputs":[{"name":"decompositiontype"}],"output":{"name":"decompositiontype"}}],[11,"clone","","",375,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",375,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",375,null],[11,"clone","","",376,{"inputs":[{"name":"recompositionstate"}],"output":{"name":"recompositionstate"}}],[11,"clone","","",377,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",377,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[11,"clone","","",378,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",378,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",378,null],[11,"borrow","collections::string","",31,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",379,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",379,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",379,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",379,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",380,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",381,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",380,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",380,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",380,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",382,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",382,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",382,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",382,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",382,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",382,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",382,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",382,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",383,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",383,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",383,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",383,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",383,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",383,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",383,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",383,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",384,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",384,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",384,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",384,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",384,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",384,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",384,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",384,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",385,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",385,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",386,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",386,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",387,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",387,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",385,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",385,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",385,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",385,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",385,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",388,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",388,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",389,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",389,null],[11,"matching","","",389,null],[11,"use_early_reject","","",390,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",390,null],[11,"matching","","",390,null],[11,"next","rustc_unicode::char","",391,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",392,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",393,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"new","core::ptr","Creates a new `Unique`.",394,null],[11,"get","","Dereferences the content.",394,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",394,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",394,null],[11,"fmt","","",394,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::ops","",395,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",395,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",395,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",395,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",320,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",320,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",320,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",320,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",319,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",319,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",319,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",319,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",396,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",396,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",396,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",396,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",397,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",398,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"fmt","openssl::ssl","",399,{"inputs":[{"name":"sslcontext"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",399,{"inputs":[{"name":"sslcontext"}],"output":null}],[11,"new","","Creates a new SSL context.",399,{"inputs":[{"name":"sslcontext"},{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"set_verify","","Configures the certificate verification method for new connections.",399,{"inputs":[{"name":"sslcontext"},{"name":"sslverifymode"},{"name":"option"}],"output":null}],[11,"set_verify_with_data","","Configures the certificate verification method for new connections also\ncarrying supplied data.",399,{"inputs":[{"name":"sslcontext"},{"name":"sslverifymode"},{"name":"verifycallbackdata"},{"name":"t"}],"output":null}],[11,"set_verify_depth","","Sets verification depth",399,{"inputs":[{"name":"sslcontext"},{"name":"u32"}],"output":null}],[11,"set_read_ahead","","",399,{"inputs":[{"name":"sslcontext"},{"name":"u32"}],"output":null}],[11,"set_CA_file","","Specifies the file that contains trusted CA certificates.",399,{"inputs":[{"name":"sslcontext"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_certificate_file","","Specifies the file that contains certificate",399,{"inputs":[{"name":"sslcontext"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_certificate","","Specifies the certificate",399,{"inputs":[{"name":"sslcontext"},{"name":"x509"}],"output":{"name":"result"}}],[11,"add_extra_chain_cert","","Adds a certificate to the certificate chain presented together with the\ncertificate specified using set_certificate()",399,{"inputs":[{"name":"sslcontext"},{"name":"x509"}],"output":{"name":"result"}}],[11,"set_private_key_file","","Specifies the file that contains private key",399,{"inputs":[{"name":"sslcontext"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_private_key","","Specifies the private key",399,{"inputs":[{"name":"sslcontext"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"check_private_key","","Check consistency of private key and certificate",399,{"inputs":[{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"set_cipher_list","","",399,{"inputs":[{"name":"sslcontext"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_options","","",399,{"inputs":[{"name":"sslcontext"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"get_options","","",399,{"inputs":[{"name":"sslcontext"}],"output":{"name":"sslcontextoptions"}}],[11,"clear_options","","",399,{"inputs":[{"name":"sslcontext"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"fmt","","",400,{"inputs":[{"name":"ssl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",400,{"inputs":[{"name":"ssl"}],"output":null}],[11,"new","","",400,{"inputs":[{"name":"ssl"},{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"get_state_string","","",400,{"inputs":[{"name":"ssl"}],"output":{"name":"str"}}],[11,"get_state_string_long","","",400,{"inputs":[{"name":"ssl"}],"output":{"name":"str"}}],[11,"set_hostname","","Set the host name to be used with SNI (Server Name Indication).",400,{"inputs":[{"name":"ssl"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_peer_certificate","","",400,{"inputs":[{"name":"ssl"}],"output":{"name":"option"}}],[11,"pending","","pending() takes into account only bytes from the TLS/SSL record that is currently being processed (if any).",400,{"inputs":[{"name":"ssl"}],"output":{"name":"usize"}}],[11,"get_ssl_method","","",400,{"inputs":[{"name":"ssl"}],"output":{"name":"option"}}],[11,"clone","","",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"sslstream"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"fmt","","",401,{"inputs":[{"name":"sslstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Creates an SSL/TLS client operating over the provided stream.",401,{"inputs":[{"name":"sslstream"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept","","Creates an SSL/TLS server operating over the provided stream.",401,{"inputs":[{"name":"sslstream"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"connect_generic","","Creates an SSL/TLS client operating over the provided stream.",401,{"inputs":[{"name":"sslstream"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept_generic","","Creates an SSL/TLS server operating over the provided stream.",401,{"inputs":[{"name":"sslstream"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_server","","# Deprecated",401,{"inputs":[{"name":"sslstream"},{"name":"sslcontext"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_server_from","","# Deprecated",401,{"inputs":[{"name":"sslstream"},{"name":"ssl"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_from","","# Deprecated",401,{"inputs":[{"name":"sslstream"},{"name":"ssl"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","# Deprecated",401,{"inputs":[{"name":"sslstream"},{"name":"sslcontext"},{"name":"s"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"s"}}],[11,"get_peer_certificate","","Return the certificate of the peer",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"s"}}],[11,"get_compression","","Get the compression currently in use.  The result will be\neither None, indicating no compression is in use, or a string\nwith the compression name.",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"option"}}],[11,"pending","","pending() takes into account only bytes from the TLS/SSL record that is currently being processed (if any).",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"usize"}}],[11,"get_state_string","","",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"str"}}],[11,"get_state_string_long","","",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"str"}}],[11,"read","","",401,null],[11,"write","","",401,null],[11,"flush","","",401,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"into_ssl","","",400,{"inputs":[{"name":"ssl"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"maybesslstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",16,null],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",16,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",16,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"s"}}],[0,"x509","openssl","",null,null],[3,"SslString","openssl::x509","",null,null],[3,"X509StoreContext","","",null,null],[3,"X509Generator","","Generator of private key/certificate pairs",null,null],[3,"X509","","A public key certificate",null,null],[3,"X509Name","","",null,null],[3,"X509NameEntry","","",null,null],[3,"X509Req","","A certificate signing request",null,null],[4,"X509FileType","","",null,null],[13,"PEM","","",402,null],[13,"ASN1","","",402,null],[13,"Default","","",402,null],[4,"X509ValidationError","","",null,null],[13,"X509UnableToGetIssuerCert","","",403,null],[13,"X509UnableToGetCrl","","",403,null],[13,"X509UnableToDecryptCertSignature","","",403,null],[13,"X509UnableToDecryptCrlSignature","","",403,null],[13,"X509UnableToDecodeIssuerPublicKey","","",403,null],[13,"X509CertSignatureFailure","","",403,null],[13,"X509CrlSignatureFailure","","",403,null],[13,"X509CertNotYetValid","","",403,null],[13,"X509CertHasExpired","","",403,null],[13,"X509CrlNotYetValid","","",403,null],[13,"X509CrlHasExpired","","",403,null],[13,"X509ErrorInCertNotBeforeField","","",403,null],[13,"X509ErrorInCertNotAfterField","","",403,null],[13,"X509ErrorInCrlLastUpdateField","","",403,null],[13,"X509ErrorInCrlNextUpdateField","","",403,null],[13,"X509OutOfMem","","",403,null],[13,"X509DepthZeroSelfSignedCert","","",403,null],[13,"X509SelfSignedCertInChain","","",403,null],[13,"X509UnableToGetIssuerCertLocally","","",403,null],[13,"X509UnableToVerifyLeafSignature","","",403,null],[13,"X509CertChainTooLong","","",403,null],[13,"X509CertRevoked","","",403,null],[13,"X509InvalidCA","","",403,null],[13,"X509PathLengthExceeded","","",403,null],[13,"X509InvalidPurpose","","",403,null],[13,"X509CertUntrusted","","",403,null],[13,"X509CertRejected","","",403,null],[13,"X509SubjectIssuerMismatch","","",403,null],[13,"X509AkidSkidMismatch","","",403,null],[13,"X509AkidIssuerSerialMismatch","","",403,null],[13,"X509KeyusageNoCertsign","","",403,null],[13,"X509UnableToGetCrlIssuer","","",403,null],[13,"X509UnhandledCriticalExtension","","",403,null],[13,"X509KeyusageNoCrlSign","","",403,null],[13,"X509UnhandledCriticalCrlExtension","","",403,null],[13,"X509InvalidNonCA","","",403,null],[13,"X509ProxyPathLengthExceeded","","",403,null],[13,"X509KeyusageNoDigitalSignature","","",403,null],[13,"X509ProxyCertificatesNotAllowed","","",403,null],[13,"X509InvalidExtension","","",403,null],[13,"X509InavlidPolicyExtension","","",403,null],[13,"X509NoExplicitPolicy","","",403,null],[13,"X509DifferentCrlScope","","",403,null],[13,"X509UnsupportedExtensionFeature","","",403,null],[13,"X509UnnestedResource","","",403,null],[13,"X509PermittedVolation","","",403,null],[13,"X509ExcludedViolation","","",403,null],[13,"X509SubtreeMinmax","","",403,null],[13,"X509UnsupportedConstraintType","","",403,null],[13,"X509UnsupportedConstraintSyntax","","",403,null],[13,"X509UnsupportedNameSyntax","","",403,null],[13,"X509CrlPathValidationError","","",403,null],[13,"X509ApplicationVerification","","",403,null],[13,"X509UnknownError","","",403,null],[0,"extension","","",null,null],[4,"ExtensionType","openssl::x509::extension","Type-only version of the `Extension` enum.",null,null],[13,"KeyUsage","","",404,null],[13,"ExtKeyUsage","","",404,null],[13,"SubjectAltName","","",404,null],[13,"IssuerAltName","","",404,null],[13,"OtherNid","","",404,null],[13,"OtherStr","","",404,null],[4,"Extension","","A X.509 v3 certificate extension.",null,null],[13,"KeyUsage","","The purposes of the key contained in the certificate",405,null],[13,"ExtKeyUsage","","The extended purposes of the key contained in the certificate",405,null],[13,"SubjectAltName","","Subject Alternative Names",405,null],[13,"IssuerAltName","","Issuer Alternative Names",405,null],[13,"OtherNid","","Arbitrary extensions by NID. See `man x509v3_config` for value syntax.",405,null],[13,"OtherStr","","Arbitrary extensions by OID string. See `man ASN1_generate_nconf` for value syntax.",405,null],[4,"KeyUsageOption","","",null,null],[13,"DigitalSignature","","",406,null],[13,"NonRepudiation","","",406,null],[13,"KeyEncipherment","","",406,null],[13,"DataEncipherment","","",406,null],[13,"KeyAgreement","","",406,null],[13,"KeyCertSign","","",406,null],[13,"CRLSign","","",406,null],[13,"EncipherOnly","","",406,null],[13,"DecipherOnly","","",406,null],[4,"ExtKeyUsageOption","","",null,null],[13,"ServerAuth","","",407,null],[13,"ClientAuth","","",407,null],[13,"CodeSigning","","",407,null],[13,"EmailProtection","","",407,null],[13,"TimeStamping","","",407,null],[13,"MsCodeInd","","",407,null],[13,"MsCodeCom","","",407,null],[13,"MsCtlSign","","",407,null],[13,"MsSgc","","",407,null],[13,"MsEfs","","",407,null],[13,"NsSgc","","",407,null],[13,"Other","","An arbitrary key usage by OID.",407,null],[4,"AltNameOption","","",null,null],[13,"Other","","The value is specified as OID;content. See `man ASN1_generate_nconf` for more information on the content syntax.",408,null],[13,"Email","","",408,null],[13,"DNS","","",408,null],[13,"Directory","","",408,null],[13,"URI","","",408,null],[13,"IPAddress","","",408,null],[13,"RegisteredID","","",408,null],[11,"eq","","",404,{"inputs":[{"name":"extensiontype"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"ne","","",404,{"inputs":[{"name":"extensiontype"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"hash","","",404,null],[11,"clone","","",404,{"inputs":[{"name":"extensiontype"}],"output":{"name":"extensiontype"}}],[11,"clone","","",405,{"inputs":[{"name":"extension"}],"output":{"name":"extension"}}],[11,"get_type","","",405,{"inputs":[{"name":"extension"}],"output":{"name":"extensiontype"}}],[11,"get_nid","","",404,{"inputs":[{"name":"extensiontype"}],"output":{"name":"option"}}],[11,"get_name","","",404,{"inputs":[{"name":"extensiontype"}],"output":{"name":"option"}}],[11,"to_string","","",405,{"inputs":[{"name":"extension"}],"output":{"name":"string"}}],[11,"clone","","",406,{"inputs":[{"name":"keyusageoption"}],"output":{"name":"keyusageoption"}}],[11,"fmt","","",406,{"inputs":[{"name":"keyusageoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",407,{"inputs":[{"name":"extkeyusageoption"}],"output":{"name":"extkeyusageoption"}}],[11,"fmt","","",407,{"inputs":[{"name":"extkeyusageoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",408,{"inputs":[{"name":"altnameoption"}],"output":{"name":"altnameoption"}}],[11,"fmt","","",408,{"inputs":[{"name":"altnameoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","openssl::x509","",409,{"inputs":[{"name":"sslstring"}],"output":null}],[11,"deref","","",409,{"inputs":[{"name":"sslstring"}],"output":{"name":"str"}}],[11,"fmt","","",409,{"inputs":[{"name":"sslstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",409,{"inputs":[{"name":"sslstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",402,{"inputs":[{"name":"x509filetype"}],"output":{"name":"x509filetype"}}],[11,"new","","",410,null],[11,"get_error","","",410,{"inputs":[{"name":"x509storecontext"}],"output":{"name":"option"}}],[11,"get_current_cert","","",410,{"inputs":[{"name":"x509storecontext"}],"output":{"name":"option"}}],[11,"new","","Creates a new generator with the following defaults:",411,{"inputs":[{"name":"x509generator"}],"output":{"name":"x509generator"}}],[11,"set_bitlength","","Sets desired bit length",411,{"inputs":[{"name":"x509generator"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"set_valid_period","","Sets certificate validity period in days since today",411,{"inputs":[{"name":"x509generator"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"set_CN","","(deprecated) Sets Common Name of certificate",411,{"inputs":[{"name":"x509generator"},{"name":"str"}],"output":{"name":"x509generator"}}],[11,"add_name","","Add attribute to the name of the certificate",411,{"inputs":[{"name":"x509generator"},{"name":"string"},{"name":"string"}],"output":{"name":"x509generator"}}],[11,"add_names","","Add multiple attributes to the name of the certificate",411,{"inputs":[{"name":"x509generator"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"set_usage","","(deprecated) Sets what for certificate could be used",411,null],[11,"set_ext_usage","","(deprecated) Sets allowed extended usage of certificate",411,null],[11,"add_extension","","Add an extension to a certificate",411,{"inputs":[{"name":"x509generator"},{"name":"extension"}],"output":{"name":"x509generator"}}],[11,"add_extensions","","Add multiple extensions to a certificate",411,{"inputs":[{"name":"x509generator"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"set_sign_hash","","",411,{"inputs":[{"name":"x509generator"},{"name":"type"}],"output":{"name":"x509generator"}}],[11,"generate","","Generates a private key and a self-signed certificate and returns them",411,{"inputs":[{"name":"x509generator"}],"output":{"name":"result"}}],[11,"sign","","Sets the certificate public-key, then self-sign and return it\nNote: That the bit-length of the private key is used (set_bitlength is ignored)",411,{"inputs":[{"name":"x509generator"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"request","","Obtain a certificate signing request (CSR)",411,{"inputs":[{"name":"x509generator"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"new","","Creates new from handle with desired ownership.",412,null],[11,"new_in_ctx","","Creates a new certificate from context. Doesn't take ownership\nof handle.",412,null],[11,"from_pem","","Reads certificate from PEM, takes ownership of handle",412,{"inputs":[{"name":"x509"},{"name":"r"}],"output":{"name":"result"}}],[11,"get_handle","","",412,null],[11,"subject_name","","",412,{"inputs":[{"name":"x509"}],"output":{"name":"x509name"}}],[11,"public_key","","",412,{"inputs":[{"name":"x509"}],"output":{"name":"pkey"}}],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",412,{"inputs":[{"name":"x509"},{"name":"type"}],"output":{"name":"option"}}],[11,"write_pem","","Writes certificate as PEM",412,{"inputs":[{"name":"x509"},{"name":"w"}],"output":{"name":"result"}}],[11,"drop","","",412,{"inputs":[{"name":"x509"}],"output":null}],[11,"text_by_nid","","",413,{"inputs":[{"name":"x509name"},{"name":"nid"}],"output":{"name":"option"}}],[11,"new","","Creates new from handle",414,null],[11,"from_pem","","Reads CSR from PEM",414,{"inputs":[{"name":"x509req"},{"name":"r"}],"output":{"name":"result"}}],[11,"write_pem","","Writes CSR as PEM",414,{"inputs":[{"name":"x509req"},{"name":"w"}],"output":{"name":"result"}}],[11,"drop","","",414,{"inputs":[{"name":"x509req"}],"output":null}],[11,"clone","","",403,{"inputs":[{"name":"x509validationerror"}],"output":{"name":"x509validationerror"}}],[0,"nid","openssl","",null,null],[4,"Nid","openssl::nid","",null,null],[13,"Undefined","","",415,null],[13,"Rsadsi","","",415,null],[13,"Pkcs","","",415,null],[13,"MD2","","",415,null],[13,"MD4","","",415,null],[13,"MD5","","",415,null],[13,"RC4","","",415,null],[13,"RsaEncryption","","",415,null],[13,"RSA_MD2","","",415,null],[13,"RSA_MD5","","",415,null],[13,"PBE_MD2_DES","","",415,null],[13,"X500","","",415,null],[13,"x509","","",415,null],[13,"CN","","",415,null],[13,"C","","",415,null],[13,"L","","",415,null],[13,"ST","","",415,null],[13,"O","","",415,null],[13,"OU","","",415,null],[13,"RSA","","",415,null],[13,"Pkcs7","","",415,null],[13,"Pkcs7_data","","",415,null],[13,"Pkcs7_signedData","","",415,null],[13,"Pkcs7_envelopedData","","",415,null],[13,"Pkcs7_signedAndEnvelopedData","","",415,null],[13,"Pkcs7_digestData","","",415,null],[13,"Pkcs7_encryptedData","","",415,null],[13,"Pkcs3","","",415,null],[13,"DhKeyAgreement","","",415,null],[13,"DES_ECB","","",415,null],[13,"DES_CFB","","",415,null],[13,"DES_CBC","","",415,null],[13,"DES_EDE","","",415,null],[13,"DES_EDE3","","",415,null],[13,"IDEA_CBC","","",415,null],[13,"IDEA_CFB","","",415,null],[13,"IDEA_ECB","","",415,null],[13,"RC2_CBC","","",415,null],[13,"RC2_ECB","","",415,null],[13,"RC2_CFB","","",415,null],[13,"RC2_OFB","","",415,null],[13,"SHA","","",415,null],[13,"RSA_SHA","","",415,null],[13,"DES_EDE_CBC","","",415,null],[13,"DES_EDE3_CBC","","",415,null],[13,"DES_OFB","","",415,null],[13,"IDEA_OFB","","",415,null],[13,"Pkcs9","","",415,null],[13,"Email","","",415,null],[13,"UnstructuredName","","",415,null],[13,"ContentType","","",415,null],[13,"MessageDigest","","",415,null],[13,"SigningTime","","",415,null],[13,"CounterSignature","","",415,null],[13,"ChallengePassword","","",415,null],[13,"UnstructuredAddress","","",415,null],[13,"ExtendedCertificateAttributes","","",415,null],[13,"Netscape","","",415,null],[13,"NetscapeCertExtention","","",415,null],[13,"NetscapeDatatype","","",415,null],[13,"DES_EDE_CFB64","","",415,null],[13,"DES_EDE3_CFB64","","",415,null],[13,"DES_EDE_OFB64","","",415,null],[13,"DES_EDE3_OFB64","","",415,null],[13,"SHA1","","",415,null],[13,"RSA_SHA1","","",415,null],[13,"DSA_SHA","","",415,null],[13,"DSA_OLD","","",415,null],[13,"PBE_SHA1_RC2_64","","",415,null],[13,"PBKDF2","","",415,null],[13,"DSA_SHA1_OLD","","",415,null],[13,"NetscapeCertType","","",415,null],[13,"NetscapeBaseUrl","","",415,null],[13,"NetscapeRevocationUrl","","",415,null],[13,"NetscapeCARevocationUrl","","",415,null],[13,"NetscapeRenewalUrl","","",415,null],[13,"NetscapeCAPolicyUrl","","",415,null],[13,"NetscapeSSLServerName","","",415,null],[13,"NetscapeComment","","",415,null],[13,"NetscapeCertSequence","","",415,null],[13,"DESX_CBC","","",415,null],[13,"ID_CE","","",415,null],[13,"SubjectKeyIdentifier","","",415,null],[13,"KeyUsage","","",415,null],[13,"PrivateKeyUsagePeriod","","",415,null],[13,"SubjectAltName","","",415,null],[13,"IssuerAltName","","",415,null],[13,"BasicConstraints","","",415,null],[13,"CrlNumber","","",415,null],[13,"CertificatePolicies","","",415,null],[13,"AuthorityKeyIdentifier","","",415,null],[13,"BF_CBC","","",415,null],[13,"BF_ECB","","",415,null],[13,"BF_CFB","","",415,null],[13,"BF_OFB","","",415,null],[13,"MDC2","","",415,null],[13,"RSA_MDC2","","",415,null],[13,"RC4_40","","",415,null],[13,"RC2_40_CBC","","",415,null],[13,"G","","",415,null],[13,"S","","",415,null],[13,"I","","",415,null],[13,"UID","","",415,null],[13,"CrlDistributionPoints","","",415,null],[13,"RSA_NP_MD5","","",415,null],[13,"SN","","",415,null],[13,"T","","",415,null],[13,"D","","",415,null],[13,"CAST5_CBC","","",415,null],[13,"CAST5_ECB","","",415,null],[13,"CAST5_CFB","","",415,null],[13,"CAST5_OFB","","",415,null],[13,"PbeWithMD5AndCast5CBC","","",415,null],[13,"DSA_SHA1","","",415,null],[13,"MD5_SHA1","","",415,null],[13,"RSA_SHA1_2","","",415,null],[13,"DSA","","",415,null],[13,"RIPEMD160","","",415,null],[13,"RSA_RIPEMD160","","",415,null],[13,"RC5_CBC","","",415,null],[13,"RC5_ECB","","",415,null],[13,"RC5_CFB","","",415,null],[13,"RC5_OFB","","",415,null],[13,"RLE","","",415,null],[13,"ZLIB","","",415,null],[13,"ExtendedKeyUsage","","",415,null],[13,"PKIX","","",415,null],[13,"ID_KP","","",415,null],[13,"ServerAuth","","",415,null],[13,"ClientAuth","","",415,null],[13,"CodeSigning","","",415,null],[13,"EmailProtection","","",415,null],[13,"TimeStamping","","",415,null],[13,"MsCodeInd","","",415,null],[13,"MsCodeCom","","",415,null],[13,"MsCtlSigh","","",415,null],[13,"MsSGC","","",415,null],[13,"MsEFS","","",415,null],[13,"NsSGC","","",415,null],[13,"DeltaCRL","","",415,null],[13,"CRLReason","","",415,null],[13,"InvalidityDate","","",415,null],[13,"SXNetID","","",415,null],[13,"PBE_SHA1_RC4_128","","",415,null],[13,"PBE_SHA1_RC4_40","","",415,null],[13,"PBE_SHA1_3DES","","",415,null],[13,"PBE_SHA1_2DES","","",415,null],[13,"PBE_SHA1_RC2_128","","",415,null],[13,"PBE_SHA1_RC2_40","","",415,null],[13,"KeyBag","","",415,null],[13,"Pkcs8ShroudedKeyBag","","",415,null],[13,"CertBag","","",415,null],[13,"CrlBag","","",415,null],[13,"SecretBag","","",415,null],[13,"SafeContentsBag","","",415,null],[13,"FriendlyName","","",415,null],[13,"LocalKeyID","","",415,null],[13,"X509Certificate","","",415,null],[13,"SdsiCertificate","","",415,null],[13,"X509Crl","","",415,null],[13,"PBES2","","",415,null],[13,"PBMAC1","","",415,null],[13,"HmacWithSha1","","",415,null],[13,"ID_QT_CPS","","",415,null],[13,"ID_QT_UNOTICE","","",415,null],[13,"RC2_64_CBC","","",415,null],[13,"SMIMECaps","","",415,null],[11,"eq","","",415,{"inputs":[{"name":"nid"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"ne","","",415,{"inputs":[{"name":"nid"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"hash","","",415,null],[11,"clone","","",415,{"inputs":[{"name":"nid"}],"output":{"name":"nid"}}]],"paths":[[3,"Asn1Time"],[4,"RNGProperty"],[3,"BigNum"],[3,"MemBio"],[4,"Type"],[3,"Hasher"],[3,"HMAC"],[3,"KeyIvPair"],[4,"Parts"],[4,"Role"],[4,"EncryptionPadding"],[3,"PKey"],[4,"Mode"],[4,"Type"],[3,"Crypter"],[4,"SslMethod"],[4,"MaybeSslStream"],[4,"SslError"],[4,"OpensslError"],[8,"IntoSsl"],[3,"SslContextOptions"],[3,"SslVerifyMode"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"String"],[3,"Vec"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"JoinGuard"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"Metadata"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"Path"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"InternalBufWriter"],[3,"BufStream"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Future"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Condvar"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"FileAttr"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[4,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"SteadyTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"EHContext"],[3,"DwarfReader"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"SipHasher"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[8,"Any"],[3,"TypeId"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"NoCopy"],[3,"PhantomData"],[3,"Rc"],[3,"Arc"],[4,"Cow"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"ElementSwaps"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[3,"ParseError"],[3,"Drain"],[4,"Ordering"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Weak"],[3,"IntoIter"],[3,"Drain"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"Unique"],[3,"RangeFull"],[3,"RangeTo"],[3,"Slice"],[3,"TraitObject"],[3,"SslContext"],[3,"Ssl"],[3,"SslStream"],[4,"X509FileType"],[4,"X509ValidationError"],[4,"ExtensionType"],[4,"Extension"],[4,"KeyUsageOption"],[4,"ExtKeyUsageOption"],[4,"AltNameOption"],[3,"SslString"],[3,"X509StoreContext"],[3,"X509Generator"],[3,"X509"],[3,"X509Name"],[3,"X509Req"],[4,"Nid"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Regex","","A compiled regular expression",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",0,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",0,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",1,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a dynamic regular expression with the given size limit.",1,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"as_str","","Returns the original string of this regex.",1,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"reg_replace","","",2,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",2,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",5,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",11,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",11,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",11,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}]],"paths":[[4,"Error"],[4,"Regex"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex['time'] = {"items":[[0,"","time","Simple time handling.",null,null],[3,"Duration","","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",5,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['openssl_sys'] = {"items":[[0,"","openssl_sys","",null,null],[3,"EVP_MD_CTX","","",null,null],[3,"HMAC_CTX","","",null,null],[3,"X509V3_CTX","","",null,null],[3,"BIGNUM","","",null,null],[12,"d","","",0,null],[12,"top","","",0,null],[12,"dmax","","",0,null],[12,"neg","","",0,null],[12,"flags","","",0,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"SSL_CTX_set_options","","",null,null],[5,"SSL_CTX_get_options","","",null,null],[5,"SSL_CTX_clear_options","","",null,null],[5,"ASN1_INTEGER_set","","",null,null],[5,"ASN1_STRING_type_new","","",null,null],[5,"ASN1_TIME_free","","",null,null],[5,"BIO_ctrl","","",null,null],[5,"BIO_free_all","","",null,null],[5,"BIO_new","","",null,null],[5,"BIO_new_socket","","",null,null],[5,"BIO_read","","",null,null],[5,"BIO_write","","",null,null],[5,"BIO_s_mem","","",null,null],[5,"BN_new","","",null,null],[5,"BN_dup","","",null,null],[5,"BN_clear_free","","",null,null],[5,"BN_CTX_new","","",null,null],[5,"BN_CTX_free","","",null,null],[5,"BN_num_bits","","",null,null],[5,"BN_set_negative","","",null,null],[5,"BN_set_word","","",null,null],[5,"BN_add","","",null,null],[5,"BN_div","","",null,null],[5,"BN_exp","","",null,null],[5,"BN_gcd","","",null,null],[5,"BN_mod_add","","",null,null],[5,"BN_mod_exp","","",null,null],[5,"BN_mod_inverse","","",null,null],[5,"BN_mod_mul","","",null,null],[5,"BN_mod_sqr","","",null,null],[5,"BN_mod_sub","","",null,null],[5,"BN_mul","","",null,null],[5,"BN_nnmod","","",null,null],[5,"BN_add_word","","",null,null],[5,"BN_sub_word","","",null,null],[5,"BN_mul_word","","",null,null],[5,"BN_div_word","","",null,null],[5,"BN_mod_word","","",null,null],[5,"BN_sqr","","",null,null],[5,"BN_sub","","",null,null],[5,"BN_clear_bit","","",null,null],[5,"BN_is_bit_set","","",null,null],[5,"BN_lshift","","",null,null],[5,"BN_lshift1","","",null,null],[5,"BN_mask_bits","","",null,null],[5,"BN_rshift","","",null,null],[5,"BN_set_bit","","",null,null],[5,"BN_rshift1","","",null,null],[5,"BN_cmp","","",null,null],[5,"BN_ucmp","","",null,null],[5,"BN_generate_prime_ex","","",null,null],[5,"BN_is_prime_ex","","",null,null],[5,"BN_is_prime_fasttest_ex","","",null,null],[5,"BN_rand","","",null,null],[5,"BN_pseudo_rand","","",null,null],[5,"BN_rand_range","","",null,null],[5,"BN_pseudo_rand_range","","",null,null],[5,"BN_bin2bn","","",null,null],[5,"BN_bn2bin","","",null,null],[5,"BN_dec2bn","","",null,null],[5,"BN_bn2dec","","",null,null],[5,"BN_hex2bn","","",null,null],[5,"BN_bn2hex","","",null,null],[5,"CRYPTO_num_locks","","",null,null],[5,"CRYPTO_set_locking_callback","","",null,null],[5,"CRYPTO_free","","",null,null],[5,"CRYPTO_memcmp","","",null,null],[5,"ERR_get_error","","",null,null],[5,"ERR_lib_error_string","","",null,null],[5,"ERR_func_error_string","","",null,null],[5,"ERR_reason_error_string","","",null,null],[5,"ERR_load_crypto_strings","","",null,null],[5,"EVP_md5","","",null,null],[5,"EVP_ripemd160","","",null,null],[5,"EVP_sha1","","",null,null],[5,"EVP_sha224","","",null,null],[5,"EVP_sha256","","",null,null],[5,"EVP_sha384","","",null,null],[5,"EVP_sha512","","",null,null],[5,"EVP_aes_128_cbc","","",null,null],[5,"EVP_aes_128_ecb","","",null,null],[5,"EVP_aes_256_cbc","","",null,null],[5,"EVP_aes_256_ecb","","",null,null],[5,"EVP_rc4","","",null,null],[5,"EVP_BytesToKey","","",null,null],[5,"EVP_CIPHER_CTX_new","","",null,null],[5,"EVP_CIPHER_CTX_set_padding","","",null,null],[5,"EVP_CIPHER_CTX_free","","",null,null],[5,"EVP_CipherInit","","",null,null],[5,"EVP_CipherUpdate","","",null,null],[5,"EVP_CipherFinal","","",null,null],[5,"EVP_DigestInit","","",null,null],[5,"EVP_DigestInit_ex","","",null,null],[5,"EVP_DigestUpdate","","",null,null],[5,"EVP_DigestFinal","","",null,null],[5,"EVP_DigestFinal_ex","","",null,null],[5,"EVP_MD_CTX_create","","",null,null],[5,"EVP_MD_CTX_copy_ex","","",null,null],[5,"EVP_MD_CTX_destroy","","",null,null],[5,"EVP_PKEY_new","","",null,null],[5,"EVP_PKEY_free","","",null,null],[5,"EVP_PKEY_assign","","",null,null],[5,"EVP_PKEY_get1_RSA","","",null,null],[5,"EVP_PKEY_set1_RSA","","",null,null],[5,"EVP_PKEY_cmp","","",null,null],[5,"HMAC_CTX_init","","",null,null],[5,"HMAC_CTX_cleanup","","",null,null],[5,"HMAC_CTX_copy","","",null,null],[5,"HMAC_Init_ex","","",null,null],[5,"HMAC_Final","","",null,null],[5,"HMAC_Update","","",null,null],[5,"HMAC_Init_ex_shim","","Deprecated - use the non \"_shim\" version",null,null],[5,"HMAC_Final_shim","","Deprecated - use the non \"_shim\" version",null,null],[5,"HMAC_Update_shim","","Deprecated - use the non \"_shim\" version",null,null],[5,"PEM_read_bio_X509","","",null,null],[5,"PEM_read_bio_X509_REQ","","",null,null],[5,"PEM_read_bio_PrivateKey","","",null,null],[5,"PEM_write_bio_PrivateKey","","",null,null],[5,"PEM_write_bio_PUBKEY","","",null,null],[5,"PEM_write_bio_X509","","",null,null],[5,"PEM_write_bio_X509_REQ","","",null,null],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",null,null],[5,"RAND_bytes","","",null,null],[5,"RSA_generate_key","","",null,null],[5,"RSA_private_decrypt","","",null,null],[5,"RSA_public_encrypt","","",null,null],[5,"RSA_sign","","",null,null],[5,"RSA_size","","",null,null],[5,"RSA_verify","","",null,null],[5,"SSL_library_init","","",null,null],[5,"SSL_load_error_strings","","",null,null],[5,"SSLv3_method","","",null,null],[5,"TLSv1_method","","",null,null],[5,"SSLv23_method","","",null,null],[5,"SSL_new","","",null,null],[5,"SSL_pending","","",null,null],[5,"SSL_free","","",null,null],[5,"SSL_set_bio","","",null,null],[5,"SSL_get_rbio","","",null,null],[5,"SSL_get_wbio","","",null,null],[5,"SSL_accept","","",null,null],[5,"SSL_connect","","",null,null],[5,"SSL_ctrl","","",null,null],[5,"SSL_get_error","","",null,null],[5,"SSL_read","","",null,null],[5,"SSL_write","","",null,null],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",null,null],[5,"SSL_get_SSL_CTX","","",null,null],[5,"SSL_get_current_compression","","",null,null],[5,"SSL_get_peer_certificate","","",null,null],[5,"SSL_get_ssl_method","","",null,null],[5,"SSL_state_string","","",null,null],[5,"SSL_state_string_long","","",null,null],[5,"SSL_COMP_get_name","","",null,null],[5,"SSL_CTX_new","","",null,null],[5,"SSL_CTX_free","","",null,null],[5,"SSL_CTX_set_verify","","",null,null],[5,"SSL_CTX_set_verify_depth","","",null,null],[5,"SSL_CTX_load_verify_locations","","",null,null],[5,"SSL_CTX_get_ex_new_index","","",null,null],[5,"SSL_CTX_set_ex_data","","",null,null],[5,"SSL_CTX_get_ex_data","","",null,null],[5,"SSL_CTX_use_certificate_file","","",null,null],[5,"SSL_CTX_use_certificate","","",null,null],[5,"SSL_CTX_use_PrivateKey_file","","",null,null],[5,"SSL_CTX_use_PrivateKey","","",null,null],[5,"SSL_CTX_check_private_key","","",null,null],[5,"SSL_CTX_set_cipher_list","","",null,null],[5,"SSL_CTX_ctrl","","",null,null],[5,"X509_add_ext","","",null,null],[5,"X509_digest","","",null,null],[5,"X509_free","","",null,null],[5,"X509_REQ_free","","",null,null],[5,"X509_get_serialNumber","","",null,null],[5,"X509_get_subject_name","","",null,null],[5,"X509_gmtime_adj","","",null,null],[5,"X509_new","","",null,null],[5,"X509_set_issuer_name","","",null,null],[5,"X509_set_notAfter","","",null,null],[5,"X509_set_notBefore","","",null,null],[5,"X509_set_version","","",null,null],[5,"X509_set_pubkey","","",null,null],[5,"X509_sign","","",null,null],[5,"X509_get_pubkey","","",null,null],[5,"X509_to_X509_REQ","","",null,null],[5,"X509_EXTENSION_free","","",null,null],[5,"X509_NAME_add_entry_by_txt","","",null,null],[5,"X509_NAME_get_index_by_NID","","",null,null],[5,"X509_NAME_get_entry","","",null,null],[5,"X509_NAME_ENTRY_get_data","","",null,null],[5,"ASN1_STRING_to_UTF8","","",null,null],[5,"X509_STORE_CTX_get_current_cert","","",null,null],[5,"X509_STORE_CTX_get_error","","",null,null],[5,"X509_STORE_CTX_get_ex_data","","",null,null],[5,"X509V3_EXT_conf_nid","","",null,null],[5,"X509V3_EXT_conf","","",null,null],[5,"X509V3_set_ctx","","",null,null],[5,"X509_REQ_add_extensions","","",null,null],[5,"X509_REQ_sign","","",null,null],[5,"i2d_RSA_PUBKEY","","",null,null],[5,"d2i_RSA_PUBKEY","","",null,null],[5,"i2d_RSAPrivateKey","","",null,null],[5,"d2i_RSAPrivateKey","","",null,null],[5,"BIO_eof","","",null,null],[5,"BIO_set_mem_eof_return","","",null,null],[5,"SSL_CTX_set_options_shim","","",null,null],[5,"SSL_CTX_get_options_shim","","",null,null],[5,"SSL_CTX_clear_options_shim","","",null,null],[5,"SSL_CTX_add_extra_chain_cert","","",null,null],[5,"SSL_CTX_set_read_ahead","","",null,null],[5,"SSL_set_tlsext_host_name","","",null,null],[5,"X509_get_extensions","","",null,null],[0,"probe","","",null,null],[3,"ProbeResult","openssl_sys::probe","",null,null],[12,"cert_file","","",1,null],[12,"cert_dir","","",1,null],[5,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be\nfound.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"init_ssl_cert_env_vars","","",null,{"inputs":[],"output":null}],[5,"probe","","",null,{"inputs":[],"output":{"name":"proberesult"}}],[6,"ASN1_INTEGER","openssl_sys","",null,null],[6,"ASN1_STRING","","",null,null],[6,"ASN1_TIME","","",null,null],[6,"BIO","","",null,null],[6,"BIO_METHOD","","",null,null],[6,"BN_CTX","","",null,null],[6,"COMP_METHOD","","",null,null],[6,"CRYPTO_EX_DATA","","",null,null],[6,"ENGINE","","",null,null],[6,"EVP_CIPHER","","",null,null],[6,"EVP_CIPHER_CTX","","",null,null],[6,"EVP_MD","","",null,null],[6,"EVP_PKEY","","",null,null],[6,"EVP_PKEY_CTX","","",null,null],[6,"RSA","","",null,null],[6,"SSL","","",null,null],[6,"SSL_CTX","","",null,null],[6,"SSL_METHOD","","",null,null],[6,"X509","","",null,null],[6,"X509_CRL","","",null,null],[6,"X509_EXTENSION","","",null,null],[6,"X509_NAME","","",null,null],[6,"X509_NAME_ENTRY","","",null,null],[6,"X509_REQ","","",null,null],[6,"X509_STORE_CTX","","",null,null],[6,"stack_st_X509_EXTENSION","","",null,null],[6,"CRYPTO_EX_new","","",null,null],[6,"CRYPTO_EX_dup","","",null,null],[6,"CRYPTO_EX_free","","",null,null],[6,"PasswordCallback","","",null,null],[17,"BIO_CTRL_EOF","","",null,null],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",null,null],[17,"CRYPTO_LOCK","","",null,null],[17,"MBSTRING_ASC","","",null,null],[17,"MBSTRING_BMP","","",null,null],[17,"MBSTRING_FLAG","","",null,null],[17,"MBSTRING_UNIV","","",null,null],[17,"MBSTRING_UTF8","","",null,null],[17,"NID_ext_key_usage","","",null,null],[17,"NID_key_usage","","",null,null],[17,"PKCS5_SALT_LEN","","",null,null],[17,"SSL_CTRL_OPTIONS","","",null,null],[17,"SSL_CTRL_CLEAR_OPTIONS","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",null,null],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",null,null],[17,"SSL_CTRL_SET_READ_AHEAD","","",null,null],[17,"SSL_ERROR_NONE","","",null,null],[17,"SSL_ERROR_SSL","","",null,null],[17,"SSL_ERROR_SYSCALL","","",null,null],[17,"SSL_ERROR_WANT_ACCEPT","","",null,null],[17,"SSL_ERROR_WANT_CONNECT","","",null,null],[17,"SSL_ERROR_WANT_READ","","",null,null],[17,"SSL_ERROR_WANT_WRITE","","",null,null],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",null,null],[17,"SSL_ERROR_ZERO_RETURN","","",null,null],[17,"SSL_VERIFY_NONE","","",null,null],[17,"SSL_VERIFY_PEER","","",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",null,null],[17,"TLSEXT_NAMETYPE_host_name","","",null,null],[17,"SSL_TLSEXT_ERR_OK","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",null,null],[17,"SSL_TLSEXT_ERR_NOACK","","",null,null],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_TLSEXT_PADDING","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLv2","","",null,null],[17,"SSL_OP_NO_SSLv3","","",null,null],[17,"SSL_OP_NO_DTLSv1","","",null,null],[17,"SSL_OP_NO_TLSv1","","",null,null],[17,"SSL_OP_NO_DTLSv1_2","","",null,null],[17,"SSL_OP_NO_TLSv1_2","","",null,null],[17,"SSL_OP_NO_TLSv1_1","","",null,null],[17,"SSL_OP_NETSCAPE_CA_DN_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",null,null],[17,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG","","",null,null],[17,"SSL_OP_MSIE_SSLV2_RSA_PADDING","","",null,null],[17,"SSL_OP_PKCS1_CHECK_1","","",null,null],[17,"SSL_OP_PKCS1_CHECK_2","","",null,null],[17,"SSL_OP_EPHEMERAL_RSA","","",null,null],[17,"V_ASN1_GENERALIZEDTIME","","",null,null],[17,"V_ASN1_UTCTIME","","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[17,"X509_FILETYPE_PEM","","",null,null],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",null,null],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",null,null],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",null,null],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",null,null],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CERT_REJECTED","","",null,null],[17,"X509_V_ERR_CERT_REVOKED","","",null,null],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_CERT_UNTRUSTED","","",null,null],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",null,null],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",null,null],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",null,null],[17,"X509_V_ERR_INVALID_CA","","",null,null],[17,"X509_V_ERR_INVALID_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_NON_CA","","",null,null],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_PURPOSE","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",null,null],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",null,null],[17,"X509_V_ERR_OUT_OF_MEM","","",null,null],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",null,null],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",null,null],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",null,null],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",null,null],[17,"X509_V_ERR_SUBTREE_MINMAX","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",null,null],[17,"X509_V_OK","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"evp_md_ctx"}],"output":{"name":"evp_md_ctx"}}],[11,"clone","","",3,{"inputs":[{"name":"hmac_ctx"}],"output":{"name":"hmac_ctx"}}],[11,"clone","","",4,{"inputs":[{"name":"x509v3_ctx"}],"output":{"name":"x509v3_ctx"}}],[11,"clone","","",0,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}]],"paths":[[3,"BIGNUM"],[3,"ProbeResult"],[3,"EVP_MD_CTX"],[3,"HMAC_CTX"],[3,"X509V3_CTX"]]};
searchIndex['aho_corasick'] = {"items":[[0,"","aho_corasick","An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).",null,null],[3,"Match","","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"fmt","","",1,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"streammatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"streammatches"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"matchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"matchesoverlapping"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"streammatchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"streammatchesoverlapping"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"fullacautomaton"},{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"skip_to","","",5,null],[11,"is_skippable","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"bool"}}],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"patidx"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"patidx"},{"name":"usize"}],"output":{"name":"match"}}],[10,"skip_to","","Attempt to skip through the input.",6,null],[10,"is_skippable","","Returns true if and only if this automaton can skip through the input.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"automaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"str"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"str"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"transitions"},{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"transitions"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"transitions"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"skip_to","","",8,null],[11,"is_skippable","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"bool"}}],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"acautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",9,{"inputs":[{"name":"dense"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"dense"}}],[11,"new","","",9,{"inputs":[{"name":"dense"},{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"sparse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"sparse"}}],[11,"new","","",10,{"inputs":[{"name":"sparse"},{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"acautomaton"},{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"acautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"str"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"str"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['advapi32'] = {"items":[],"paths":[]};
searchIndex['unix_socket'] = {"items":[[0,"","unix_socket","Support for Unix domain socket clients and servers.",null,null],[3,"SocketAddr","","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[4,"AddressKind","","The kind of an address associated with a Unix socket.",null,null],[13,"Unnamed","","An unnamed address.",0,null],[13,"Pathname","","An address corresponding to a path on the filesystem.",0,null],[13,"Abstract","","An address in an abstract namespace unrelated to the filesystem.",0,null],[11,"eq","","",0,{"inputs":[{"name":"addresskind"},{"name":"addresskind"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"addresskind"},{"name":"addresskind"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"addresskind"}],"output":{"name":"addresskind"}}],[11,"fmt","","",0,{"inputs":[{"name":"addresskind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"address","","Returns the value of the address.",1,{"inputs":[{"name":"socketaddr"}],"output":{"name":"addresskind"}}],[11,"fmt","","",1,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"unixstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Connect to the socket named by `path`.",2,{"inputs":[{"name":"unixstream"},{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",2,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"unnamed","","# Deprecated",2,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",2,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",2,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",2,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",2,{"inputs":[{"name":"unixstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",2,{"inputs":[{"name":"unixstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",2,{"inputs":[{"name":"unixstream"},{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"fmt","","",3,{"inputs":[{"name":"unixlistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `UnixListener` which will be bound to the specified\nsocket.",3,{"inputs":[{"name":"unixlistener"},{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",3,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",3,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",3,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",3,{"inputs":[{"name":"unixlistener"}],"output":{"name":"incoming"}}],[11,"as_raw_fd","","",3,{"inputs":[{"name":"unixlistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",3,{"inputs":[{"name":"unixlistener"},{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",4,{"inputs":[{"name":"incoming"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"unixdatagram"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a Unix datagram socket bound to the given path.",5,{"inputs":[{"name":"unixdatagram"},{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",5,{"inputs":[{"name":"unixdatagram"}],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",5,{"inputs":[{"name":"unixdatagram"}],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address.",5,{"inputs":[{"name":"unixdatagram"},{"name":"p"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the address of this socket.",5,{"inputs":[{"name":"unixdatagram"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the address of this socket's peer.",5,{"inputs":[{"name":"unixdatagram"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket.",5,null],[11,"recv","","Receives data from the socket.",5,null],[11,"send_to","","Sends data on the socket to the specified address.",5,null],[11,"send","","Sends data on the socket to the socket's peer.",5,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",5,{"inputs":[{"name":"unixdatagram"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",5,{"inputs":[{"name":"unixdatagram"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",5,{"inputs":[{"name":"unixdatagram"},{"name":"rawfd"}],"output":{"name":"unixdatagram"}}]],"paths":[[4,"AddressKind"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",8,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",8,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",8,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",10,null],[11,"make_place","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",8,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",10,null],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",8,null],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","alloc::arc","",11,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",12,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",12,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` is unique.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc<T>`.",12,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",11,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",11,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",11,null],[11,"eq","","Equality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",12,null],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",13,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",13,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is\nunique.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",13,null],[11,"clone","","Makes a clone of the `Rc<T>`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",14,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",14,null],[11,"clone","","Makes a clone of the `Weak<T>`.",14,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",14,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",15,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",15,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",15,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",15,null],[11,"cap","","Gets the capacity of the allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",15,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",15,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",15,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",15,null],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",15,null],[14,"log!","log","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"Box"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"]]};
searchIndex['regex_syntax'] = {"items":[[0,"","regex_syntax","This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",1,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",1,null],[12,"chars","regex_syntax::Expr","The characters.",1,null],[12,"casei","","Whether to match case insensitively.",1,null],[13,"AnyChar","regex_syntax","Match any character, excluding new line.",1,null],[13,"AnyCharNoNL","","Match any character.",1,null],[13,"Class","","A character class.",1,null],[13,"StartLine","","Match the start of a line or beginning of input.",1,null],[13,"EndLine","","Match the end of a line or end of input.",1,null],[13,"StartText","","Match the beginning of input.",1,null],[13,"EndText","","Match the end of input.",1,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",1,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",1,null],[13,"Group","","A group, possibly non-capturing.",1,null],[12,"e","regex_syntax::Expr","The expression inside the group.",1,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",1,null],[12,"name","","The capture name, only for capturing named groups.",1,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",1,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",1,null],[12,"r","","The type of repeat operator used.",1,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",1,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",1,null],[13,"Alternate","","An alternation of expressions. Only one must match.",1,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",2,null],[13,"ZeroOrMore","","Match zero or more (`*`).",2,null],[13,"OneOrMore","","Match one or more (`+`).",2,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",2,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",2,null],[12,"max","","Optional upper bound on the number of matches.",2,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",3,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P<a>.)(?P<a>.)`.",3,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",3,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",3,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",3,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",3,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",3,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",3,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",3,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",3,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",3,null],[12,"end","","The second character specified in the range.",3,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",3,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",3,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",3,null],[12,"max","","The second number specified in the repetition.",3,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",3,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",3,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",3,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",3,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",3,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",3,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",3,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",3,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",3,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",3,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",3,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",3,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",3,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",3,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",3,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",3,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",3,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",1,{"inputs":[{"name":"expr"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",5,null],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",5,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",5,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",5,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",5,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",5,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",5,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",5,null],[11,"as_slice","","Extracts a slice containing the entire vector.",5,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",5,null],[11,"set_len","","Sets the length of a vector.",5,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",5,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",5,null],[11,"push","","Appends an element to the back of a collection.",5,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",5,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",5,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",5,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",5,null],[11,"len","","Returns the number of elements in the vector.",5,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",5,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",5,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"split_off","","Splits the collection into two at the given index.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",5,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",5,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",5,null],[11,"clone","collections::binary_heap","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"default","","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",6,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",6,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",6,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",6,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",6,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",6,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",6,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",6,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",6,null],[11,"drop","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",6,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",6,null],[11,"extend","","",6,null],[11,"index","collections::bit","",11,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",11,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bitvec"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",11,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",11,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",11,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"bitvec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",11,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",11,null],[11,"set_all","","Sets all bits to 1.",11,null],[11,"negate","","Flips all bits.",11,null],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",11,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",11,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",11,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"iter"}}],[11,"append","","Moves all bits from `other` into `Self`, leaving `other` empty.",11,null],[11,"split_off","","Splits the `BitVec` into two at the given bit,\nretaining the first half in-place and returning the second one.",11,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"none","","Returns `true` if all bits are 0.",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",11,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",11,null],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",11,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",11,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",11,null],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",11,null],[11,"len","","Returns the total number of bits in this vector",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no bits in this vector",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",11,null],[11,"default","","",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_iter","","",11,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":{"name":"bitvec"}}],[11,"extend","","",11,null],[11,"extend","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"clone_from","","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"ordering"}}],[11,"fmt","","",11,{"inputs":[{"name":"bitvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",12,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"default","","",13,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"from_iter","","",13,{"inputs":[{"name":"bitset"},{"name":"i"}],"output":{"name":"bitset"}}],[11,"extend","","",13,null],[11,"extend","","",13,null],[11,"partial_cmp","","",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"ordering"}}],[11,"eq","","",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",13,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",13,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",13,{"inputs":[{"name":"bitset"},{"name":"bitvec"}],"output":{"name":"bitset"}}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",13,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct\nelements. In the case of `BitSet` this means reallocations will not\noccur as long as all inserted elements are less than `len`.",13,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len`\ndistinct elements.  In the case of `BitSet` this means reallocations\nwill not occur as long as all inserted elements are less than `len`.",13,null],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",13,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",13,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",13,null],[11,"iter","","Iterator over each usize stored in the `BitSet`.",13,{"inputs":[{"name":"bitset"}],"output":{"name":"setiter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place\nversion.",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place\nversion.",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self`\nand `other`.  See\n[symmetric_difference_with](#method.symmetric_difference_with) for an\nefficient in-place version.",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",13,null],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",13,null],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",13,null],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",13,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",13,null],[11,"split_off","","Splits the `BitSet` into two at the given key including the key.\nRetains the first part in-place while returning the second part.",13,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"len","","Returns the number of set bits in this set.",13,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",13,{"inputs":[{"name":"bitset"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",13,null],[11,"contains","","Returns `true` if this set contains the specified integer.",13,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",13,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",13,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",13,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"bitset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"blockiter"}],"output":{"name":"blockiter"}}],[11,"clone","","",15,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"twobitpositions"}}],[11,"clone","","",16,{"inputs":[{"name":"setiter"}],"output":{"name":"setiter"}}],[11,"clone","","",17,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"clone","","",18,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"clone","","",19,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"clone","","",20,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",14,{"inputs":[{"name":"blockiter"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next","","",15,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next","","",16,{"inputs":[{"name":"setiter"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next","","",17,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next","","",18,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next","","",19,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next","","",20,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next","collections::btree::node","",21,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",21,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",21,null],[11,"drop","","",22,null],[11,"as_slices","","",22,null],[11,"as_slices_mut","","",22,null],[11,"as_slices_internal","","",22,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",22,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",22,null],[11,"keys_mut","","",22,null],[11,"vals","","",22,null],[11,"vals_mut","","",22,null],[11,"edges","","",22,null],[11,"edges_mut","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",23,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",22,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",22,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",22,null],[11,"len","","How many key-value pairs the node contains",22,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",22,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",22,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",22,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",22,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",22,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",23,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",23,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",23,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",23,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",23,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",23,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",23,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",23,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",23,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",23,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",23,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",23,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",23,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",23,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",23,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",23,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",23,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",23,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",23,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",22,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",22,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",22,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",22,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",22,null],[11,"clone","","",24,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",24,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",24,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",24,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",24,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",25,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",25,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",25,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",25,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",25,null],[11,"clone","","",26,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",26,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",26,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",26,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",26,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",26,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",26,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",27,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",27,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",27,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",28,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",28,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",28,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",30,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",29,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",29,null],[11,"get","","Returns a reference to the value corresponding to the key.",29,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",29,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",29,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",29,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",29,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",31,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",32,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",32,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",33,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",33,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",34,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",34,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",34,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",34,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",34,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",29,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",29,null],[11,"extend","","",29,null],[11,"hash","","",29,null],[11,"default","","",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",29,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",29,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",29,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",29,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",26,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",26,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",26,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",30,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"next_back","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",36,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",38,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",39,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",41,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",41,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",42,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",42,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",42,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",43,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",44,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",29,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",29,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",29,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",29,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"clone","","",45,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",45,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",45,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",45,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",45,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",45,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",45,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",45,null],[11,"contains","","Returns `true` if the set contains a value.",45,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",45,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",45,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",45,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"from_iter","","",45,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",45,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"default","","",45,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",45,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",46,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",47,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",48,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",48,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",49,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",49,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",50,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",51,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",52,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","alloc::boxed","",53,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",53,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow","alloc::rc","",54,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","alloc::arc","",55,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",56,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",56,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",56,null],[11,"into_owned","","Extracts the owned data.",56,null],[11,"deref","","",56,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",56,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",56,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",56,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"into_cow","","",56,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",56,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",57,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",57,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",57,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",57,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",57,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",57,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",57,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",57,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",57,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",57,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"from_iter","","",57,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",57,null],[11,"extend","","",57,null],[11,"clone","core::fmt::rt::v1","",59,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",60,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",61,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",62,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",63,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",64,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",66,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",66,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",67,null],[11,"iter","","Provides a forward iterator.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",67,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",67,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",67,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",67,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",67,null],[11,"next","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",68,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",67,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",67,null],[11,"extend","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",67,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"start","core::ops","",69,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",70,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",71,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",71,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","collections::slice","",72,{"inputs":[{"name":"elementswaps"}],"output":{"name":"elementswaps"}}],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",72,{"inputs":[{"name":"elementswaps"},{"name":"usize"}],"output":{"name":"elementswaps"}}],[11,"borrow","collections::vec","",5,null],[11,"borrow_mut","","",5,null],[11,"clone","collections::slice","",73,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"clone","","",74,{"inputs":[{"name":"sizedirection"}],"output":{"name":"sizedirection"}}],[11,"next","","",72,{"inputs":[{"name":"elementswaps"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next","","",75,{"inputs":[{"name":"permutations"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","collections::str","",76,{"inputs":[{"name":"decompositiontype"}],"output":{"name":"decompositiontype"}}],[11,"clone","","",77,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",77,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"clone","","",78,{"inputs":[{"name":"recompositionstate"}],"output":{"name":"recompositionstate"}}],[11,"clone","","",79,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",79,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[11,"clone","","",80,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",80,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"borrow","collections::string","",81,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",82,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",83,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",84,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",83,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",83,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",83,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",88,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",89,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",90,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",91,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",92,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",92,null],[11,"matching","","",92,null],[11,"use_early_reject","","",93,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",93,null],[11,"matching","","",93,null],[11,"cmp","collections::string","",81,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",94,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",81,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",81,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_str","","Creates a new string buffer from the given string.",81,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",81,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",81,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",81,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",81,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",81,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",81,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",81,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",81,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",81,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",81,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",81,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",81,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",81,null],[11,"push","","Adds the given character to the end of the string.",81,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",81,null],[11,"truncate","","Shortens a string to the specified length.",81,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",81,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",81,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",81,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",81,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",81,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",81,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",81,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",81,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",81,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",94,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",94,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",94,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",81,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",81,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",81,null],[11,"extend","","",81,null],[11,"extend","","",81,null],[11,"eq","","",81,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",56,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",81,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",56,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",81,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",81,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"add","","",81,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",81,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",81,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",81,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",81,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",81,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",81,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",81,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",81,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",81,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",81,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"eq","","",96,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",96,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",81,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",81,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",81,null],[11,"from","","",81,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",56,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",56,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",81,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",81,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",81,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",81,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",97,null],[11,"next","","",97,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",5,null],[11,"hash","","",5,null],[11,"index","","",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",5,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",5,null],[11,"extend","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","collections::borrow","",56,null],[11,"ne","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",5,null],[11,"default","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",5,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",5,null],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",56,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",98,{"inputs":[{"name":"intoiter"}],"output":{"name":"vec"}}],[11,"next","","",98,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"count","","",98,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",98,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",98,null],[11,"next","","",99,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",99,null],[11,"drop","","",100,null],[11,"drop","","",101,null],[11,"clone","collections::vec_deque","",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",102,null],[11,"default","","",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",102,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",102,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",102,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",102,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",102,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",102,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",102,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",102,null],[11,"iter","","Returns a front-to-back iterator.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",102,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",102,null],[11,"len","","Returns the number of elements in the `VecDeque`.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",102,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",102,null],[11,"push_back","","Appends an element to the back of a buffer",102,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",102,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",102,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",102,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",102,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",102,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",102,null],[11,"retain","","Retains only the elements specified by the predicate.",102,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",102,null],[11,"clone","","",103,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",103,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",103,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",103,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",104,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",105,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",106,null],[11,"next","","",106,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",102,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",102,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",102,null],[11,"index","","",102,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",102,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",102,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",102,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",102,null],[11,"extend","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","collections::vec_map","",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone","","",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",107,null],[11,"hash","","",107,null],[11,"new","","Creates an empty `VecMap`.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",107,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",107,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",107,null],[11,"split_off","","Splits the collection into two at the given key.",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",107,null],[11,"get","","Returns a reference to the value corresponding to the key.",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",107,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",108,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",108,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",108,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",109,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",110,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",110,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",110,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",110,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",110,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"eq","","",107,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"option"}}],[11,"cmp","","",107,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"ordering"}}],[11,"fmt","","",107,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",107,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",107,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",107,null],[11,"extend","","",107,null],[11,"index","","",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",107,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",111,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",111,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",112,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",114,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",115,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",116,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"eq","collections","",117,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",117,null],[11,"fmt","","",117,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",118,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",119,null],[11,"make_place","","",119,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",119,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",53,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",118,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",119,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",53,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",53,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",53,null],[11,"default","","",53,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",53,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",53,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",53,null],[11,"clone","","",53,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",53,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",53,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",53,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",53,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",53,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",53,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",53,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",53,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",53,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",53,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"deref","regex_syntax","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",4,{"inputs":[{"name":"charclass"},{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",4,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"negate","","Negates the character class.",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",120,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",120,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",120,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",120,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",120,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"CharClass"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BitVec"],[3,"Iter"],[3,"BitSet"],[3,"BlockIter"],[3,"TwoBitPositions"],[3,"SetIter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Box"],[3,"Rc"],[3,"Arc"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"ElementSwaps"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Error"]]};
searchIndex['memchr'] = {"items":[[0,"","memchr","This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null]],"paths":[]};
searchIndex['phf'] = {"items":[[0,"","phf","Compile time optimized maps and sets.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"inputs":[{"name":"map"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given\nkey.",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"inputs":[{"name":"map"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"inputs":[{"name":"map"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"inputs":[{"name":"map"}],"output":{"name":"values"}}],[11,"next","","",2,{"inputs":[{"name":"entries"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"entries"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"set"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"inputs":[{"name":"set"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"inputs":[{"name":"set"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given\nkey.",5,{"inputs":[{"name":"set"},{"name":"u"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"inputs":[{"name":"set"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"inputs":[{"name":"set"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"inputs":[{"name":"set"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"inputs":[{"name":"set"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"inputs":[{"name":"set"},{"name":"set"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"orderedmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given\nkey.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered map.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"option"}}],[11,"index","","Returns references to both the key and values at an index\nwithin the list used to initialize the ordered map. See `.get_index(key)`.",7,{"inputs":[{"name":"orderedmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"entries"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"entries"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"orderedset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"inputs":[{"name":"orderedset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"inputs":[{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given\nkey.",11,{"inputs":[{"name":"orderedset"},{"name":"u"}],"output":{"name":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered set.",11,{"inputs":[{"name":"orderedset"},{"name":"u"}],"output":{"name":"option"}}],[11,"index","","Returns references to both the key and values at an index\nwithin the list used to initialize the ordered map. See `.get_index(key)`.",11,{"inputs":[{"name":"orderedset"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"inputs":[{"name":"orderedset"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"inputs":[{"name":"orderedset"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"inputs":[{"name":"orderedset"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"inputs":[{"name":"orderedset"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"inputs":[{"name":"orderedset"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"next","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",1,null],[12,"gl_pathv","","",1,null],[12,"gl_offs","","",1,null],[12,"__unused1","","",1,null],[12,"__unused2","","",1,null],[12,"__unused3","","",1,null],[12,"__unused4","","",1,null],[12,"__unused5","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",6,null],[12,"sa_data","","",6,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",7,null],[12,"__ss_align","","",7,null],[12,"__ss_pad2","","",7,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",8,null],[12,"sin_port","","",8,null],[12,"sin_addr","","",8,null],[12,"sin_zero","","",8,null],[3,"in_addr","","",null,null],[12,"s_addr","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",11,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",12,null],[12,"imr_interface","","",12,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",13,null],[12,"ipv6mr_interface","","",13,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",14,null],[12,"ai_family","","",14,null],[12,"ai_socktype","","",14,null],[12,"ai_protocol","","",14,null],[12,"ai_addrlen","","",14,null],[12,"ai_addr","","",14,null],[12,"ai_canonname","","",14,null],[12,"ai_next","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_ifu","","",16,null],[12,"ifa_data","","",16,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",8,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",9,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null],[5,"flock","","",null,null]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex['bufstream'] = {"items":[[0,"","bufstream","A crate for separately buffered streams.",null,null],[3,"BufStream","","Wraps a Stream and buffers input and output to and from it.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"bufstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",0,{"inputs":[{"name":"bufstream"},{"name":"usize"},{"name":"usize"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",0,{"inputs":[{"name":"bufstream"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"get_ref","","Gets a reference to the underlying stream.",0,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"get_mut","","Gets a mutable reference to the underlying stream.",0,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"into_inner","","Unwraps this `BufStream`, returning the underlying stream.",0,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"bufstream"},{"name":"usize"}],"output":null}],[11,"read","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}]],"paths":[[3,"BufStream"],[3,"IntoInnerError"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['debug_builders'] = {"items":[[0,"","debug_builders","",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[11,"new","","Creates a new `DebugStruct`.",0,{"inputs":[{"name":"debugstruct"},{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"field","","Adds a new field to the generated struct output.",0,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Consumes the `DebugStruct`, finishing output and returning any error\nencountered.",0,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DebugTuple`.",1,{"inputs":[{"name":"debugtuple"},{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"field","","Adds a new field to the generated tuple struct output.",1,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Consumes the `DebugTuple`, finishing output and returning any error\nencountered.",1,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DebugSet`.",2,{"inputs":[{"name":"debugset"},{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"entry","","Adds a new entry to the set output.",2,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"finish","","Consumes the `DebugSet`, finishing output and returning any error\nencountered.",2,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DebugList`.",3,{"inputs":[{"name":"debuglist"},{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"entry","","Adds a new entry to the set output.",3,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"finish","","Consumes the `DebugSet`, finishing output and returning any error\nencountered.",3,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DebugMap`.",4,{"inputs":[{"name":"debugmap"},{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"entry","","Adds a new entry to the map output.",4,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"finish","","Consumes the `DebugMap`, finishing output and returning any error\nencountered.",4,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}]],"paths":[[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"]]};
searchIndex['matches'] = {"items":[[0,"","matches","",null,null],[14,"matches!","","",null,null],[14,"_tt_as_expr_hack!","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means.",null,null]],"paths":[]};
searchIndex['build'] = {"items":[[0,"","build","",null,null],[5,"link","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":null}]],"paths":[]};
searchIndex['gcc'] = {"items":[[0,"","gcc","A library for build scripts to compile custom C code",null,null],[3,"Config","","Extra configuration to pass to gcc.",null,null],[3,"Tool","","Configuration used to represent an invocation of a C compiler.",null,null],[5,"compile_library","","Compile a library from the given set of input C files.",null,null],[0,"windows_registry","","A helper module to probe the Windows Registry when looking for\nwindows-specific tools.",null,null],[5,"find","gcc::windows_registry","Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[5,"find_tool","","Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"new","gcc","Construct a new instance of a blank set of configuration.",0,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"include","","Add a directory to the `-I` or include path for headers",0,{"inputs":[{"name":"config"},{"name":"p"}],"output":{"name":"config"}}],[11,"define","","Specify a `-D` variable with an optional value.",0,{"inputs":[{"name":"config"},{"name":"str"},{"name":"option"}],"output":{"name":"config"}}],[11,"object","","Add an arbitrary object file to link in",0,{"inputs":[{"name":"config"},{"name":"p"}],"output":{"name":"config"}}],[11,"flag","","Add an arbitrary flag to the invocation of the compiler",0,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"config"}}],[11,"file","","Add a file which will be compiled",0,{"inputs":[{"name":"config"},{"name":"p"}],"output":{"name":"config"}}],[11,"cpp","","Set C++ support.",0,{"inputs":[{"name":"config"},{"name":"bool"}],"output":{"name":"config"}}],[11,"cpp_link_stdlib","","Set the standard library to link against when compiling with C++\nsupport.",0,{"inputs":[{"name":"config"},{"name":"option"}],"output":{"name":"config"}}],[11,"cpp_set_stdlib","","Force the C++ compiler to use the specified standard library.",0,{"inputs":[{"name":"config"},{"name":"option"}],"output":{"name":"config"}}],[11,"target","","Configures the target this configuration will be compiling for.",0,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"config"}}],[11,"host","","Configures the host assumed by this configuration.",0,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"config"}}],[11,"opt_level","","Configures the optimization level of the generated object files.",0,{"inputs":[{"name":"config"},{"name":"u32"}],"output":{"name":"config"}}],[11,"debug","","Configures whether the compiler will emit debug information when\ngenerating object files.",0,{"inputs":[{"name":"config"},{"name":"bool"}],"output":{"name":"config"}}],[11,"out_dir","","Configures the output directory where all object files and static\nlibraries will be located.",0,{"inputs":[{"name":"config"},{"name":"p"}],"output":{"name":"config"}}],[11,"compiler","","Configures the compiler to be used to produce output.",0,{"inputs":[{"name":"config"},{"name":"p"}],"output":{"name":"config"}}],[11,"archiver","","Configures the tool used to assemble archives.",0,{"inputs":[{"name":"config"},{"name":"p"}],"output":{"name":"config"}}],[11,"cargo_metadata","","Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.",0,{"inputs":[{"name":"config"},{"name":"bool"}],"output":{"name":"config"}}],[11,"compile","","Run the compiler, generating the file `output`",0,{"inputs":[{"name":"config"},{"name":"str"}],"output":null}],[11,"get_compiler","","Get the compiler that's in use for this configuration.",0,{"inputs":[{"name":"config"}],"output":{"name":"tool"}}],[11,"to_command","","Converts this compiler into a `Command` that's ready to be run.",1,{"inputs":[{"name":"tool"}],"output":{"name":"command"}}],[11,"path","","Returns the path for this compiler.",1,{"inputs":[{"name":"tool"}],"output":{"name":"path"}}],[11,"args","","Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.",1,null],[11,"env","","Returns the set of environment variables needed for this compiler to\noperate.",1,null]],"paths":[[3,"Config"],[3,"Tool"]]};
searchIndex['lazy_static'] = {"items":[[0,"","lazy_static","A macro for declaring lazily evaluated statics.",null,null],[14,"lazy_static!","","",null,null]],"paths":[]};
searchIndex['pkg_config'] = {"items":[[0,"","pkg_config","A build dependency for Cargo libraries to find system artifacts through the\n`pkg-config` utility.",null,null],[3,"Config","","",null,null],[3,"Library","","",null,null],[12,"libs","","",0,null],[12,"link_paths","","",0,null],[12,"frameworks","","",0,null],[12,"framework_paths","","",0,null],[12,"include_paths","","",0,null],[12,"version","","",0,null],[5,"target_supported","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"find_library","","Simple shortcut for using all default options for finding a library.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"library"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new set of configuration options which are all initially set\nto \"blank\".",1,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"statik","","Indicate whether the `--static` flag should be passed.",1,{"inputs":[{"name":"config"},{"name":"bool"}],"output":{"name":"config"}}],[11,"atleast_version","","Indicate that the library must be at least version `vers`.",1,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"config"}}],[11,"arg","","Add an argument to pass to pkg-config.",1,{"inputs":[{"name":"config"},{"name":"s"}],"output":{"name":"config"}}],[11,"find","","Run `pkg-config` to find the library `name`.",1,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_variable","","Run `pkg-config` to get the value of a variable from a package using\n--variable.",1,{"inputs":[{"name":"config"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Library"],[3,"Config"]]};
searchIndex['phf_shared'] = {"items":[[0,"","phf_shared","",null,null],[5,"displace","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"phfhash"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex['strsim'] = {"items":[[0,"","strsim","This library implements string similarity metrics. Currently includes\nHamming, Levenshtein, Jaro, and Jaro-Winkler.",null,null],[4,"StrSimError","","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[6,"HammingResult","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"strsimerror"},{"name":"strsimerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"strsimerror"},{"name":"strsimerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"strsimerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"StrSimError"]]};
initSearch(searchIndex);
