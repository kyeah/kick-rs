//! Kickstarter errors
use validate;
use std::{error, fmt, io, result};

/// A type for results generated by Kickstarter-related functions, where the Err type is kickstarter::Error.
pub type Result<T> = result::Result<T, Error>;

/// The error type for Kickstarter operations.
#[derive(Debug)]
pub enum Error {
    /// Provided data was invalid.
    InvalidData(validate::Error),
    /// An error occurred with the provided configuration.
    Config(String),
    /// A database operation could not be completed.
    Database(database::DbError),
    /// An I/O operation could not be completed.
    IO(io::Error),
}

impl From<validate::Error> for Error {
    fn from(err: validate::Error) -> Error {
        Error::InvalidData(err)
    }
}

impl From<database::DbError> for Error {
    fn from(err: database::DbError) -> Error {
        Error::Database(err)
    }
}

impl From<io::Error> for Error {
    fn from(err: io::Error) -> Error {
        Error::IO(err)
    }
}

impl fmt::Display for Error {
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Error::InvalidData(ref inner) => inner.fmt(fmt),
            Error::Database(ref inner) => inner.fmt(fmt),
            Error::IO(ref inner) => inner.fmt(fmt),
            Error::Config(ref inner) => inner.fmt(fmt),
        }
    }
}

impl error::Error for Error {
    fn description(&self) -> &str {
        match *self {
            Error::InvalidData(ref inner) => inner.description(),
            Error::Database(ref inner) => inner.description(),
            Error::IO(ref inner) => inner.description(),
            Error::Config(ref inner) => inner,
        }
    }

    fn cause(&self) -> Option<&error::Error> {
        match *self {
            Error::InvalidData(ref inner) => Some(inner),
            Error::Database(ref inner) => Some(inner),
            Error::IO(ref inner) => Some(inner),
            Error::Config(_) => None,
        }
    }
}
